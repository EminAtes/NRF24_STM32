
NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000015c  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001b0  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000074  20000000  0800441c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000108  20000074  08004490  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000017c  08004490  0002017c  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   000198e0  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002f0e  00000000  00000000  0003997d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d60  00000000  00000000  0003c890  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc8  00000000  00000000  0003d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006a93  00000000  00000000  0003e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004d41  00000000  00000000  0004504b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00049d8c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033f0  00000000  00000000  00049e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007988  00000000  00000000  0004d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003dd0 	.word	0x08003dd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003dd0 	.word	0x08003dd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <selfrel_offset31>:
 8000160:	6803      	ldr	r3, [r0, #0]
 8000162:	005a      	lsls	r2, r3, #1
 8000164:	bf4c      	ite	mi
 8000166:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800016a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800016e:	4418      	add	r0, r3
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop

08000174 <search_EIT_table>:
 8000174:	b361      	cbz	r1, 80001d0 <search_EIT_table+0x5c>
 8000176:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800017a:	f101 3aff 	add.w	sl, r1, #4294967295
 800017e:	4690      	mov	r8, r2
 8000180:	4606      	mov	r6, r0
 8000182:	46d1      	mov	r9, sl
 8000184:	2700      	movs	r7, #0
 8000186:	eb07 0409 	add.w	r4, r7, r9
 800018a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800018e:	1064      	asrs	r4, r4, #1
 8000190:	00e5      	lsls	r5, r4, #3
 8000192:	1971      	adds	r1, r6, r5
 8000194:	4608      	mov	r0, r1
 8000196:	f7ff ffe3 	bl	8000160 <selfrel_offset31>
 800019a:	45a2      	cmp	sl, r4
 800019c:	4683      	mov	fp, r0
 800019e:	f105 0008 	add.w	r0, r5, #8
 80001a2:	4430      	add	r0, r6
 80001a4:	d009      	beq.n	80001ba <search_EIT_table+0x46>
 80001a6:	f7ff ffdb 	bl	8000160 <selfrel_offset31>
 80001aa:	45c3      	cmp	fp, r8
 80001ac:	f100 30ff 	add.w	r0, r0, #4294967295
 80001b0:	d805      	bhi.n	80001be <search_EIT_table+0x4a>
 80001b2:	4540      	cmp	r0, r8
 80001b4:	d209      	bcs.n	80001ca <search_EIT_table+0x56>
 80001b6:	1c67      	adds	r7, r4, #1
 80001b8:	e7e5      	b.n	8000186 <search_EIT_table+0x12>
 80001ba:	45c3      	cmp	fp, r8
 80001bc:	d905      	bls.n	80001ca <search_EIT_table+0x56>
 80001be:	42a7      	cmp	r7, r4
 80001c0:	d002      	beq.n	80001c8 <search_EIT_table+0x54>
 80001c2:	f104 39ff 	add.w	r9, r4, #4294967295
 80001c6:	e7de      	b.n	8000186 <search_EIT_table+0x12>
 80001c8:	2100      	movs	r1, #0
 80001ca:	4608      	mov	r0, r1
 80001cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001d0:	4608      	mov	r0, r1
 80001d2:	4770      	bx	lr

080001d4 <__gnu_unwind_get_pr_addr>:
 80001d4:	2801      	cmp	r0, #1
 80001d6:	d007      	beq.n	80001e8 <__gnu_unwind_get_pr_addr+0x14>
 80001d8:	2802      	cmp	r0, #2
 80001da:	d007      	beq.n	80001ec <__gnu_unwind_get_pr_addr+0x18>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__gnu_unwind_get_pr_addr+0x1c>)
 80001de:	2800      	cmp	r0, #0
 80001e0:	bf0c      	ite	eq
 80001e2:	4618      	moveq	r0, r3
 80001e4:	2000      	movne	r0, #0
 80001e6:	4770      	bx	lr
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <__gnu_unwind_get_pr_addr+0x20>)
 80001ea:	4770      	bx	lr
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <__gnu_unwind_get_pr_addr+0x24>)
 80001ee:	4770      	bx	lr
 80001f0:	080008e5 	.word	0x080008e5
 80001f4:	080008e9 	.word	0x080008e9
 80001f8:	080008ed 	.word	0x080008ed

080001fc <get_eit_entry>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	4b25      	ldr	r3, [pc, #148]	; (8000294 <get_eit_entry+0x98>)
 8000200:	b083      	sub	sp, #12
 8000202:	4604      	mov	r4, r0
 8000204:	1e8d      	subs	r5, r1, #2
 8000206:	b373      	cbz	r3, 8000266 <get_eit_entry+0x6a>
 8000208:	a901      	add	r1, sp, #4
 800020a:	4628      	mov	r0, r5
 800020c:	f3af 8000 	nop.w
 8000210:	b318      	cbz	r0, 800025a <get_eit_entry+0x5e>
 8000212:	9901      	ldr	r1, [sp, #4]
 8000214:	462a      	mov	r2, r5
 8000216:	f7ff ffad 	bl	8000174 <search_EIT_table>
 800021a:	4601      	mov	r1, r0
 800021c:	b1e8      	cbz	r0, 800025a <get_eit_entry+0x5e>
 800021e:	f7ff ff9f 	bl	8000160 <selfrel_offset31>
 8000222:	684b      	ldr	r3, [r1, #4]
 8000224:	64a0      	str	r0, [r4, #72]	; 0x48
 8000226:	2b01      	cmp	r3, #1
 8000228:	d011      	beq.n	800024e <get_eit_entry+0x52>
 800022a:	2b00      	cmp	r3, #0
 800022c:	db22      	blt.n	8000274 <get_eit_entry+0x78>
 800022e:	1d08      	adds	r0, r1, #4
 8000230:	f7ff ff96 	bl	8000160 <selfrel_offset31>
 8000234:	2300      	movs	r3, #0
 8000236:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000238:	6523      	str	r3, [r4, #80]	; 0x50
 800023a:	6803      	ldr	r3, [r0, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db1e      	blt.n	800027e <get_eit_entry+0x82>
 8000240:	f7ff ff8e 	bl	8000160 <selfrel_offset31>
 8000244:	2300      	movs	r3, #0
 8000246:	6120      	str	r0, [r4, #16]
 8000248:	4618      	mov	r0, r3
 800024a:	b003      	add	sp, #12
 800024c:	bd30      	pop	{r4, r5, pc}
 800024e:	2305      	movs	r3, #5
 8000250:	2200      	movs	r2, #0
 8000252:	4618      	mov	r0, r3
 8000254:	6122      	str	r2, [r4, #16]
 8000256:	b003      	add	sp, #12
 8000258:	bd30      	pop	{r4, r5, pc}
 800025a:	2309      	movs	r3, #9
 800025c:	2200      	movs	r2, #0
 800025e:	4618      	mov	r0, r3
 8000260:	6122      	str	r2, [r4, #16]
 8000262:	b003      	add	sp, #12
 8000264:	bd30      	pop	{r4, r5, pc}
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <get_eit_entry+0x9c>)
 8000268:	490c      	ldr	r1, [pc, #48]	; (800029c <get_eit_entry+0xa0>)
 800026a:	4618      	mov	r0, r3
 800026c:	1ac9      	subs	r1, r1, r3
 800026e:	10c9      	asrs	r1, r1, #3
 8000270:	9101      	str	r1, [sp, #4]
 8000272:	e7cf      	b.n	8000214 <get_eit_entry+0x18>
 8000274:	2301      	movs	r3, #1
 8000276:	1d08      	adds	r0, r1, #4
 8000278:	64e0      	str	r0, [r4, #76]	; 0x4c
 800027a:	6523      	str	r3, [r4, #80]	; 0x50
 800027c:	e7dd      	b.n	800023a <get_eit_entry+0x3e>
 800027e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000282:	f7ff ffa7 	bl	80001d4 <__gnu_unwind_get_pr_addr>
 8000286:	2800      	cmp	r0, #0
 8000288:	6120      	str	r0, [r4, #16]
 800028a:	bf14      	ite	ne
 800028c:	2300      	movne	r3, #0
 800028e:	2309      	moveq	r3, #9
 8000290:	e7da      	b.n	8000248 <get_eit_entry+0x4c>
 8000292:	bf00      	nop
 8000294:	00000000 	.word	0x00000000
 8000298:	08004264 	.word	0x08004264
 800029c:	08004414 	.word	0x08004414

080002a0 <restore_non_core_regs>:
 80002a0:	6803      	ldr	r3, [r0, #0]
 80002a2:	b510      	push	{r4, lr}
 80002a4:	07da      	lsls	r2, r3, #31
 80002a6:	4604      	mov	r4, r0
 80002a8:	d406      	bmi.n	80002b8 <restore_non_core_regs+0x18>
 80002aa:	079b      	lsls	r3, r3, #30
 80002ac:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002b0:	d509      	bpl.n	80002c6 <restore_non_core_regs+0x26>
 80002b2:	f000 fc57 	bl	8000b64 <__gnu_Unwind_Restore_VFP_D>
 80002b6:	6823      	ldr	r3, [r4, #0]
 80002b8:	0759      	lsls	r1, r3, #29
 80002ba:	d509      	bpl.n	80002d0 <restore_non_core_regs+0x30>
 80002bc:	071a      	lsls	r2, r3, #28
 80002be:	d50e      	bpl.n	80002de <restore_non_core_regs+0x3e>
 80002c0:	06db      	lsls	r3, r3, #27
 80002c2:	d513      	bpl.n	80002ec <restore_non_core_regs+0x4c>
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	f000 fc45 	bl	8000b54 <__gnu_Unwind_Restore_VFP>
 80002ca:	6823      	ldr	r3, [r4, #0]
 80002cc:	0759      	lsls	r1, r3, #29
 80002ce:	d4f5      	bmi.n	80002bc <restore_non_core_regs+0x1c>
 80002d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002d4:	f000 fc4e 	bl	8000b74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002d8:	6823      	ldr	r3, [r4, #0]
 80002da:	071a      	lsls	r2, r3, #28
 80002dc:	d4f0      	bmi.n	80002c0 <restore_non_core_regs+0x20>
 80002de:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002e2:	f000 fc4f 	bl	8000b84 <__gnu_Unwind_Restore_WMMXD>
 80002e6:	6823      	ldr	r3, [r4, #0]
 80002e8:	06db      	lsls	r3, r3, #27
 80002ea:	d4eb      	bmi.n	80002c4 <restore_non_core_regs+0x24>
 80002ec:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002f4:	f000 bc8a 	b.w	8000c0c <__gnu_Unwind_Restore_WMMXC>

080002f8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002f8:	6803      	ldr	r3, [r0, #0]
 80002fa:	b103      	cbz	r3, 80002fe <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80002fc:	4403      	add	r3, r0
 80002fe:	4618      	mov	r0, r3
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <__gnu_unwind_24bit.isra.1>:
 8000304:	2009      	movs	r0, #9
 8000306:	4770      	bx	lr

08000308 <_Unwind_DebugHook>:
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop

0800030c <unwind_phase2>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4604      	mov	r4, r0
 8000310:	460d      	mov	r5, r1
 8000312:	e008      	b.n	8000326 <unwind_phase2+0x1a>
 8000314:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000316:	6923      	ldr	r3, [r4, #16]
 8000318:	6162      	str	r2, [r4, #20]
 800031a:	4621      	mov	r1, r4
 800031c:	462a      	mov	r2, r5
 800031e:	2001      	movs	r0, #1
 8000320:	4798      	blx	r3
 8000322:	2808      	cmp	r0, #8
 8000324:	d108      	bne.n	8000338 <unwind_phase2+0x2c>
 8000326:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000328:	4620      	mov	r0, r4
 800032a:	f7ff ff67 	bl	80001fc <get_eit_entry>
 800032e:	4606      	mov	r6, r0
 8000330:	2800      	cmp	r0, #0
 8000332:	d0ef      	beq.n	8000314 <unwind_phase2+0x8>
 8000334:	f003 fd01 	bl	8003d3a <abort>
 8000338:	2807      	cmp	r0, #7
 800033a:	d1fb      	bne.n	8000334 <unwind_phase2+0x28>
 800033c:	4630      	mov	r0, r6
 800033e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000340:	f7ff ffe2 	bl	8000308 <_Unwind_DebugHook>
 8000344:	1d28      	adds	r0, r5, #4
 8000346:	f000 fbf9 	bl	8000b3c <__restore_core_regs>
 800034a:	bf00      	nop

0800034c <unwind_phase2_forced>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	4605      	mov	r5, r0
 8000352:	2700      	movs	r7, #0
 8000354:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000358:	ac03      	add	r4, sp, #12
 800035a:	1d0e      	adds	r6, r1, #4
 800035c:	4692      	mov	sl, r2
 800035e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000366:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800036e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000372:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800037a:	ac02      	add	r4, sp, #8
 800037c:	4628      	mov	r0, r5
 800037e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000380:	6027      	str	r7, [r4, #0]
 8000382:	f7ff ff3b 	bl	80001fc <get_eit_entry>
 8000386:	f1ba 0f00 	cmp.w	sl, #0
 800038a:	4607      	mov	r7, r0
 800038c:	bf14      	ite	ne
 800038e:	260a      	movne	r6, #10
 8000390:	2609      	moveq	r6, #9
 8000392:	b17f      	cbz	r7, 80003b4 <unwind_phase2_forced+0x68>
 8000394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000396:	f046 0110 	orr.w	r1, r6, #16
 800039a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800039e:	462a      	mov	r2, r5
 80003a0:	6463      	str	r3, [r4, #68]	; 0x44
 80003a2:	2001      	movs	r0, #1
 80003a4:	462b      	mov	r3, r5
 80003a6:	47c0      	blx	r8
 80003a8:	bb78      	cbnz	r0, 800040a <unwind_phase2_forced+0xbe>
 80003aa:	4638      	mov	r0, r7
 80003ac:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80003b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003ba:	616b      	str	r3, [r5, #20]
 80003bc:	4621      	mov	r1, r4
 80003be:	a87a      	add	r0, sp, #488	; 0x1e8
 80003c0:	f003 f888 	bl	80034d4 <memcpy>
 80003c4:	692b      	ldr	r3, [r5, #16]
 80003c6:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003c8:	4629      	mov	r1, r5
 80003ca:	4630      	mov	r0, r6
 80003cc:	4798      	blx	r3
 80003ce:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003d0:	4682      	mov	sl, r0
 80003d2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003d6:	4631      	mov	r1, r6
 80003d8:	6463      	str	r3, [r4, #68]	; 0x44
 80003da:	462a      	mov	r2, r5
 80003dc:	462b      	mov	r3, r5
 80003de:	2001      	movs	r0, #1
 80003e0:	47c0      	blx	r8
 80003e2:	b990      	cbnz	r0, 800040a <unwind_phase2_forced+0xbe>
 80003e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003e8:	a97a      	add	r1, sp, #488	; 0x1e8
 80003ea:	4620      	mov	r0, r4
 80003ec:	f003 f872 	bl	80034d4 <memcpy>
 80003f0:	f1ba 0f08 	cmp.w	sl, #8
 80003f4:	d106      	bne.n	8000404 <unwind_phase2_forced+0xb8>
 80003f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003f8:	4628      	mov	r0, r5
 80003fa:	f7ff feff 	bl	80001fc <get_eit_entry>
 80003fe:	2609      	movs	r6, #9
 8000400:	4607      	mov	r7, r0
 8000402:	e7c6      	b.n	8000392 <unwind_phase2_forced+0x46>
 8000404:	f1ba 0f07 	cmp.w	sl, #7
 8000408:	d005      	beq.n	8000416 <unwind_phase2_forced+0xca>
 800040a:	2709      	movs	r7, #9
 800040c:	4638      	mov	r0, r7
 800040e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	4638      	mov	r0, r7
 8000418:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800041a:	f7ff ff75 	bl	8000308 <_Unwind_DebugHook>
 800041e:	a803      	add	r0, sp, #12
 8000420:	f000 fb8c 	bl	8000b3c <__restore_core_regs>

08000424 <_Unwind_GetCFA>:
 8000424:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000426:	4770      	bx	lr

08000428 <__gnu_Unwind_RaiseException>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	f04f 3eff 	mov.w	lr, #4294967295
 800042e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000430:	b0f9      	sub	sp, #484	; 0x1e4
 8000432:	640b      	str	r3, [r1, #64]	; 0x40
 8000434:	1d0e      	adds	r6, r1, #4
 8000436:	ad01      	add	r5, sp, #4
 8000438:	460f      	mov	r7, r1
 800043a:	4604      	mov	r4, r0
 800043c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800043e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000448:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800044c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000450:	f8cd e000 	str.w	lr, [sp]
 8000454:	e006      	b.n	8000464 <__gnu_Unwind_RaiseException+0x3c>
 8000456:	6923      	ldr	r3, [r4, #16]
 8000458:	466a      	mov	r2, sp
 800045a:	4621      	mov	r1, r4
 800045c:	4798      	blx	r3
 800045e:	2808      	cmp	r0, #8
 8000460:	4605      	mov	r5, r0
 8000462:	d108      	bne.n	8000476 <__gnu_Unwind_RaiseException+0x4e>
 8000464:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000466:	4620      	mov	r0, r4
 8000468:	f7ff fec8 	bl	80001fc <get_eit_entry>
 800046c:	2800      	cmp	r0, #0
 800046e:	d0f2      	beq.n	8000456 <__gnu_Unwind_RaiseException+0x2e>
 8000470:	2009      	movs	r0, #9
 8000472:	b079      	add	sp, #484	; 0x1e4
 8000474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000476:	4668      	mov	r0, sp
 8000478:	f7ff ff12 	bl	80002a0 <restore_non_core_regs>
 800047c:	2d06      	cmp	r5, #6
 800047e:	d1f7      	bne.n	8000470 <__gnu_Unwind_RaiseException+0x48>
 8000480:	4639      	mov	r1, r7
 8000482:	4620      	mov	r0, r4
 8000484:	f7ff ff42 	bl	800030c <unwind_phase2>

08000488 <__gnu_Unwind_ForcedUnwind>:
 8000488:	b430      	push	{r4, r5}
 800048a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800048c:	60c1      	str	r1, [r0, #12]
 800048e:	6182      	str	r2, [r0, #24]
 8000490:	4619      	mov	r1, r3
 8000492:	641d      	str	r5, [r3, #64]	; 0x40
 8000494:	2200      	movs	r2, #0
 8000496:	bc30      	pop	{r4, r5}
 8000498:	e758      	b.n	800034c <unwind_phase2_forced>
 800049a:	bf00      	nop

0800049c <__gnu_Unwind_Resume>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	6943      	ldr	r3, [r0, #20]
 80004a0:	68c6      	ldr	r6, [r0, #12]
 80004a2:	640b      	str	r3, [r1, #64]	; 0x40
 80004a4:	b126      	cbz	r6, 80004b0 <__gnu_Unwind_Resume+0x14>
 80004a6:	2201      	movs	r2, #1
 80004a8:	f7ff ff50 	bl	800034c <unwind_phase2_forced>
 80004ac:	f003 fc45 	bl	8003d3a <abort>
 80004b0:	6903      	ldr	r3, [r0, #16]
 80004b2:	460a      	mov	r2, r1
 80004b4:	4604      	mov	r4, r0
 80004b6:	460d      	mov	r5, r1
 80004b8:	4601      	mov	r1, r0
 80004ba:	2002      	movs	r0, #2
 80004bc:	4798      	blx	r3
 80004be:	2807      	cmp	r0, #7
 80004c0:	d007      	beq.n	80004d2 <__gnu_Unwind_Resume+0x36>
 80004c2:	2808      	cmp	r0, #8
 80004c4:	d103      	bne.n	80004ce <__gnu_Unwind_Resume+0x32>
 80004c6:	4629      	mov	r1, r5
 80004c8:	4620      	mov	r0, r4
 80004ca:	f7ff ff1f 	bl	800030c <unwind_phase2>
 80004ce:	f003 fc34 	bl	8003d3a <abort>
 80004d2:	4630      	mov	r0, r6
 80004d4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004d6:	f7ff ff17 	bl	8000308 <_Unwind_DebugHook>
 80004da:	1d28      	adds	r0, r5, #4
 80004dc:	f000 fb2e 	bl	8000b3c <__restore_core_regs>

080004e0 <__gnu_Unwind_Resume_or_Rethrow>:
 80004e0:	68c2      	ldr	r2, [r0, #12]
 80004e2:	b12a      	cbz	r2, 80004f0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004e4:	b410      	push	{r4}
 80004e6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80004e8:	2200      	movs	r2, #0
 80004ea:	640c      	str	r4, [r1, #64]	; 0x40
 80004ec:	bc10      	pop	{r4}
 80004ee:	e72d      	b.n	800034c <unwind_phase2_forced>
 80004f0:	e79a      	b.n	8000428 <__gnu_Unwind_RaiseException>
 80004f2:	bf00      	nop

080004f4 <_Unwind_Complete>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_Unwind_DeleteException>:
 80004f8:	6883      	ldr	r3, [r0, #8]
 80004fa:	b113      	cbz	r3, 8000502 <_Unwind_DeleteException+0xa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	2001      	movs	r0, #1
 8000500:	4718      	bx	r3
 8000502:	4770      	bx	lr

08000504 <_Unwind_VRS_Get>:
 8000504:	b500      	push	{lr}
 8000506:	2904      	cmp	r1, #4
 8000508:	d807      	bhi.n	800051a <_Unwind_VRS_Get+0x16>
 800050a:	e8df f001 	tbb	[pc, r1]
 800050e:	0903      	.short	0x0903
 8000510:	0906      	.short	0x0906
 8000512:	09          	.byte	0x09
 8000513:	00          	.byte	0x00
 8000514:	b90b      	cbnz	r3, 800051a <_Unwind_VRS_Get+0x16>
 8000516:	2a0f      	cmp	r2, #15
 8000518:	d905      	bls.n	8000526 <_Unwind_VRS_Get+0x22>
 800051a:	2002      	movs	r0, #2
 800051c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000520:	2001      	movs	r0, #1
 8000522:	f85d fb04 	ldr.w	pc, [sp], #4
 8000526:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800052a:	6852      	ldr	r2, [r2, #4]
 800052c:	4618      	mov	r0, r3
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	f85d fb04 	ldr.w	pc, [sp], #4
 8000536:	bf00      	nop

08000538 <_Unwind_GetGR>:
 8000538:	2300      	movs	r3, #0
 800053a:	b510      	push	{r4, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	ac03      	add	r4, sp, #12
 8000540:	460a      	mov	r2, r1
 8000542:	9400      	str	r4, [sp, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f7ff ffdd 	bl	8000504 <_Unwind_VRS_Get>
 800054a:	9803      	ldr	r0, [sp, #12]
 800054c:	b004      	add	sp, #16
 800054e:	bd10      	pop	{r4, pc}

08000550 <_Unwind_VRS_Set>:
 8000550:	b500      	push	{lr}
 8000552:	2904      	cmp	r1, #4
 8000554:	d807      	bhi.n	8000566 <_Unwind_VRS_Set+0x16>
 8000556:	e8df f001 	tbb	[pc, r1]
 800055a:	0903      	.short	0x0903
 800055c:	0906      	.short	0x0906
 800055e:	09          	.byte	0x09
 800055f:	00          	.byte	0x00
 8000560:	b90b      	cbnz	r3, 8000566 <_Unwind_VRS_Set+0x16>
 8000562:	2a0f      	cmp	r2, #15
 8000564:	d905      	bls.n	8000572 <_Unwind_VRS_Set+0x22>
 8000566:	2002      	movs	r0, #2
 8000568:	f85d fb04 	ldr.w	pc, [sp], #4
 800056c:	2001      	movs	r0, #1
 800056e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000572:	9901      	ldr	r1, [sp, #4]
 8000574:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000578:	6809      	ldr	r1, [r1, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	6051      	str	r1, [r2, #4]
 800057e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000582:	bf00      	nop

08000584 <_Unwind_SetGR>:
 8000584:	2300      	movs	r3, #0
 8000586:	b510      	push	{r4, lr}
 8000588:	b084      	sub	sp, #16
 800058a:	ac04      	add	r4, sp, #16
 800058c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000590:	9400      	str	r4, [sp, #0]
 8000592:	460a      	mov	r2, r1
 8000594:	4619      	mov	r1, r3
 8000596:	f7ff ffdb 	bl	8000550 <_Unwind_VRS_Set>
 800059a:	b004      	add	sp, #16
 800059c:	bd10      	pop	{r4, pc}
 800059e:	bf00      	nop

080005a0 <__gnu_Unwind_Backtrace>:
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	f04f 3eff 	mov.w	lr, #4294967295
 80005a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005a8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80005ac:	6413      	str	r3, [r2, #64]	; 0x40
 80005ae:	1d15      	adds	r5, r2, #4
 80005b0:	ac17      	add	r4, sp, #92	; 0x5c
 80005b2:	4607      	mov	r7, r0
 80005b4:	460e      	mov	r6, r1
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005ca:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80005ce:	e012      	b.n	80005f6 <__gnu_Unwind_Backtrace+0x56>
 80005d0:	210c      	movs	r1, #12
 80005d2:	a816      	add	r0, sp, #88	; 0x58
 80005d4:	466a      	mov	r2, sp
 80005d6:	f7ff ffd5 	bl	8000584 <_Unwind_SetGR>
 80005da:	4631      	mov	r1, r6
 80005dc:	a816      	add	r0, sp, #88	; 0x58
 80005de:	47b8      	blx	r7
 80005e0:	b978      	cbnz	r0, 8000602 <__gnu_Unwind_Backtrace+0x62>
 80005e2:	9b04      	ldr	r3, [sp, #16]
 80005e4:	aa16      	add	r2, sp, #88	; 0x58
 80005e6:	4669      	mov	r1, sp
 80005e8:	2008      	movs	r0, #8
 80005ea:	4798      	blx	r3
 80005ec:	2805      	cmp	r0, #5
 80005ee:	4604      	mov	r4, r0
 80005f0:	d008      	beq.n	8000604 <__gnu_Unwind_Backtrace+0x64>
 80005f2:	2809      	cmp	r0, #9
 80005f4:	d005      	beq.n	8000602 <__gnu_Unwind_Backtrace+0x62>
 80005f6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80005f8:	4668      	mov	r0, sp
 80005fa:	f7ff fdff 	bl	80001fc <get_eit_entry>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d0e6      	beq.n	80005d0 <__gnu_Unwind_Backtrace+0x30>
 8000602:	2409      	movs	r4, #9
 8000604:	a816      	add	r0, sp, #88	; 0x58
 8000606:	f7ff fe4b 	bl	80002a0 <restore_non_core_regs>
 800060a:	4620      	mov	r0, r4
 800060c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000612:	bf00      	nop

08000614 <__gnu_unwind_pr_common>:
 8000614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000618:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800061a:	4691      	mov	r9, r2
 800061c:	6822      	ldr	r2, [r4, #0]
 800061e:	b08b      	sub	sp, #44	; 0x2c
 8000620:	3404      	adds	r4, #4
 8000622:	460d      	mov	r5, r1
 8000624:	9207      	str	r2, [sp, #28]
 8000626:	9408      	str	r4, [sp, #32]
 8000628:	f000 0b03 	and.w	fp, r0, #3
 800062c:	461e      	mov	r6, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d160      	bne.n	80006f4 <__gnu_unwind_pr_common+0xe0>
 8000632:	2303      	movs	r3, #3
 8000634:	0212      	lsls	r2, r2, #8
 8000636:	9207      	str	r2, [sp, #28]
 8000638:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800063c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000640:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000642:	f1bb 0f02 	cmp.w	fp, #2
 8000646:	bf08      	it	eq
 8000648:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800064a:	f013 0301 	ands.w	r3, r3, #1
 800064e:	d140      	bne.n	80006d2 <__gnu_unwind_pr_common+0xbe>
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f000 0308 	and.w	r3, r0, #8
 8000656:	9303      	str	r3, [sp, #12]
 8000658:	f8d4 8000 	ldr.w	r8, [r4]
 800065c:	f1b8 0f00 	cmp.w	r8, #0
 8000660:	d039      	beq.n	80006d6 <__gnu_unwind_pr_common+0xc2>
 8000662:	2e02      	cmp	r6, #2
 8000664:	d043      	beq.n	80006ee <__gnu_unwind_pr_common+0xda>
 8000666:	f8b4 8000 	ldrh.w	r8, [r4]
 800066a:	8867      	ldrh	r7, [r4, #2]
 800066c:	3404      	adds	r4, #4
 800066e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000670:	f027 0a01 	bic.w	sl, r7, #1
 8000674:	210f      	movs	r1, #15
 8000676:	4648      	mov	r0, r9
 8000678:	449a      	add	sl, r3
 800067a:	f7ff ff5d 	bl	8000538 <_Unwind_GetGR>
 800067e:	4582      	cmp	sl, r0
 8000680:	d833      	bhi.n	80006ea <__gnu_unwind_pr_common+0xd6>
 8000682:	f028 0301 	bic.w	r3, r8, #1
 8000686:	449a      	add	sl, r3
 8000688:	4550      	cmp	r0, sl
 800068a:	bf2c      	ite	cs
 800068c:	2000      	movcs	r0, #0
 800068e:	2001      	movcc	r0, #1
 8000690:	007f      	lsls	r7, r7, #1
 8000692:	f007 0702 	and.w	r7, r7, #2
 8000696:	f008 0801 	and.w	r8, r8, #1
 800069a:	ea47 0708 	orr.w	r7, r7, r8
 800069e:	2f01      	cmp	r7, #1
 80006a0:	d03e      	beq.n	8000720 <__gnu_unwind_pr_common+0x10c>
 80006a2:	d335      	bcc.n	8000710 <__gnu_unwind_pr_common+0xfc>
 80006a4:	2f02      	cmp	r7, #2
 80006a6:	d11c      	bne.n	80006e2 <__gnu_unwind_pr_common+0xce>
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006ae:	9202      	str	r2, [sp, #8]
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	d176      	bne.n	80007a4 <__gnu_unwind_pr_common+0x190>
 80006b6:	b128      	cbz	r0, 80006c4 <__gnu_unwind_pr_common+0xb0>
 80006b8:	9903      	ldr	r1, [sp, #12]
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d07e      	beq.n	80007bc <__gnu_unwind_pr_common+0x1a8>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f000 80a6 	beq.w	8000810 <__gnu_unwind_pr_common+0x1fc>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db77      	blt.n	80007b8 <__gnu_unwind_pr_common+0x1a4>
 80006c8:	9b02      	ldr	r3, [sp, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006d0:	e7c2      	b.n	8000658 <__gnu_unwind_pr_common+0x44>
 80006d2:	2300      	movs	r3, #0
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2e02      	cmp	r6, #2
 80006d8:	dd3e      	ble.n	8000758 <__gnu_unwind_pr_common+0x144>
 80006da:	f7ff fe13 	bl	8000304 <__gnu_unwind_24bit.isra.1>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d040      	beq.n	8000764 <__gnu_unwind_pr_common+0x150>
 80006e2:	2009      	movs	r0, #9
 80006e4:	b00b      	add	sp, #44	; 0x2c
 80006e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ea:	2000      	movs	r0, #0
 80006ec:	e7d0      	b.n	8000690 <__gnu_unwind_pr_common+0x7c>
 80006ee:	6867      	ldr	r7, [r4, #4]
 80006f0:	3408      	adds	r4, #8
 80006f2:	e7bc      	b.n	800066e <__gnu_unwind_pr_common+0x5a>
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	dca3      	bgt.n	8000640 <__gnu_unwind_pr_common+0x2c>
 80006f8:	2102      	movs	r1, #2
 80006fa:	0c13      	lsrs	r3, r2, #16
 80006fc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000700:	0412      	lsls	r2, r2, #16
 8000702:	b2db      	uxtb	r3, r3
 8000704:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000708:	9207      	str	r2, [sp, #28]
 800070a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800070e:	e797      	b.n	8000640 <__gnu_unwind_pr_common+0x2c>
 8000710:	f1bb 0f00 	cmp.w	fp, #0
 8000714:	d002      	beq.n	800071c <__gnu_unwind_pr_common+0x108>
 8000716:	2800      	cmp	r0, #0
 8000718:	f040 80bd 	bne.w	8000896 <__gnu_unwind_pr_common+0x282>
 800071c:	3404      	adds	r4, #4
 800071e:	e79b      	b.n	8000658 <__gnu_unwind_pr_common+0x44>
 8000720:	f1bb 0f00 	cmp.w	fp, #0
 8000724:	d125      	bne.n	8000772 <__gnu_unwind_pr_common+0x15e>
 8000726:	b1a8      	cbz	r0, 8000754 <__gnu_unwind_pr_common+0x140>
 8000728:	e894 000c 	ldmia.w	r4, {r2, r3}
 800072c:	1c99      	adds	r1, r3, #2
 800072e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000732:	d0d6      	beq.n	80006e2 <__gnu_unwind_pr_common+0xce>
 8000734:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000738:	3301      	adds	r3, #1
 800073a:	9106      	str	r1, [sp, #24]
 800073c:	f000 80a3 	beq.w	8000886 <__gnu_unwind_pr_common+0x272>
 8000740:	1d20      	adds	r0, r4, #4
 8000742:	f7ff fdd9 	bl	80002f8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000746:	ab06      	add	r3, sp, #24
 8000748:	4601      	mov	r1, r0
 800074a:	4628      	mov	r0, r5
 800074c:	f3af 8000 	nop.w
 8000750:	2800      	cmp	r0, #0
 8000752:	d177      	bne.n	8000844 <__gnu_unwind_pr_common+0x230>
 8000754:	3408      	adds	r4, #8
 8000756:	e77f      	b.n	8000658 <__gnu_unwind_pr_common+0x44>
 8000758:	a907      	add	r1, sp, #28
 800075a:	4648      	mov	r0, r9
 800075c:	f000 faf0 	bl	8000d40 <__gnu_unwind_execute>
 8000760:	2800      	cmp	r0, #0
 8000762:	d1be      	bne.n	80006e2 <__gnu_unwind_pr_common+0xce>
 8000764:	9b01      	ldr	r3, [sp, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d15c      	bne.n	8000824 <__gnu_unwind_pr_common+0x210>
 800076a:	2008      	movs	r0, #8
 800076c:	b00b      	add	sp, #44	; 0x2c
 800076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000772:	210d      	movs	r1, #13
 8000774:	4648      	mov	r0, r9
 8000776:	6a2f      	ldr	r7, [r5, #32]
 8000778:	f7ff fede 	bl	8000538 <_Unwind_GetGR>
 800077c:	4287      	cmp	r7, r0
 800077e:	d1e9      	bne.n	8000754 <__gnu_unwind_pr_common+0x140>
 8000780:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000782:	429c      	cmp	r4, r3
 8000784:	d1e6      	bne.n	8000754 <__gnu_unwind_pr_common+0x140>
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff fcea 	bl	8000160 <selfrel_offset31>
 800078c:	210f      	movs	r1, #15
 800078e:	4602      	mov	r2, r0
 8000790:	4648      	mov	r0, r9
 8000792:	f7ff fef7 	bl	8000584 <_Unwind_SetGR>
 8000796:	4648      	mov	r0, r9
 8000798:	462a      	mov	r2, r5
 800079a:	2100      	movs	r1, #0
 800079c:	f7ff fef2 	bl	8000584 <_Unwind_SetGR>
 80007a0:	2007      	movs	r0, #7
 80007a2:	e79f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 80007a4:	210d      	movs	r1, #13
 80007a6:	4648      	mov	r0, r9
 80007a8:	6a2f      	ldr	r7, [r5, #32]
 80007aa:	f7ff fec5 	bl	8000538 <_Unwind_GetGR>
 80007ae:	4287      	cmp	r7, r0
 80007b0:	d058      	beq.n	8000864 <__gnu_unwind_pr_common+0x250>
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	da87      	bge.n	80006c8 <__gnu_unwind_pr_common+0xb4>
 80007b8:	3404      	adds	r4, #4
 80007ba:	e785      	b.n	80006c8 <__gnu_unwind_pr_common+0xb4>
 80007bc:	9b02      	ldr	r3, [sp, #8]
 80007be:	b33b      	cbz	r3, 8000810 <__gnu_unwind_pr_common+0x1fc>
 80007c0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80007c4:	1d27      	adds	r7, r4, #4
 80007c6:	f8cd b010 	str.w	fp, [sp, #16]
 80007ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80007ce:	46a3      	mov	fp, r4
 80007d0:	f8dd a008 	ldr.w	sl, [sp, #8]
 80007d4:	461c      	mov	r4, r3
 80007d6:	9605      	str	r6, [sp, #20]
 80007d8:	e002      	b.n	80007e0 <__gnu_unwind_pr_common+0x1cc>
 80007da:	45b2      	cmp	sl, r6
 80007dc:	46b0      	mov	r8, r6
 80007de:	d016      	beq.n	800080e <__gnu_unwind_pr_common+0x1fa>
 80007e0:	4638      	mov	r0, r7
 80007e2:	9406      	str	r4, [sp, #24]
 80007e4:	f7ff fd88 	bl	80002f8 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007e8:	ab06      	add	r3, sp, #24
 80007ea:	4601      	mov	r1, r0
 80007ec:	2200      	movs	r2, #0
 80007ee:	4628      	mov	r0, r5
 80007f0:	f3af 8000 	nop.w
 80007f4:	f108 0601 	add.w	r6, r8, #1
 80007f8:	3704      	adds	r7, #4
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d0ed      	beq.n	80007da <__gnu_unwind_pr_common+0x1c6>
 80007fe:	9b02      	ldr	r3, [sp, #8]
 8000800:	465c      	mov	r4, fp
 8000802:	4543      	cmp	r3, r8
 8000804:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000808:	9e05      	ldr	r6, [sp, #20]
 800080a:	d1d2      	bne.n	80007b2 <__gnu_unwind_pr_common+0x19e>
 800080c:	e000      	b.n	8000810 <__gnu_unwind_pr_common+0x1fc>
 800080e:	465c      	mov	r4, fp
 8000810:	4648      	mov	r0, r9
 8000812:	210d      	movs	r1, #13
 8000814:	f7ff fe90 	bl	8000538 <_Unwind_GetGR>
 8000818:	9b06      	ldr	r3, [sp, #24]
 800081a:	6228      	str	r0, [r5, #32]
 800081c:	62ac      	str	r4, [r5, #40]	; 0x28
 800081e:	626b      	str	r3, [r5, #36]	; 0x24
 8000820:	2006      	movs	r0, #6
 8000822:	e75f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 8000824:	210f      	movs	r1, #15
 8000826:	4648      	mov	r0, r9
 8000828:	f7ff fe86 	bl	8000538 <_Unwind_GetGR>
 800082c:	210e      	movs	r1, #14
 800082e:	4602      	mov	r2, r0
 8000830:	4648      	mov	r0, r9
 8000832:	f7ff fea7 	bl	8000584 <_Unwind_SetGR>
 8000836:	4648      	mov	r0, r9
 8000838:	4a29      	ldr	r2, [pc, #164]	; (80008e0 <__gnu_unwind_pr_common+0x2cc>)
 800083a:	210f      	movs	r1, #15
 800083c:	f7ff fea2 	bl	8000584 <_Unwind_SetGR>
 8000840:	2007      	movs	r0, #7
 8000842:	e74f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 8000844:	4607      	mov	r7, r0
 8000846:	210d      	movs	r1, #13
 8000848:	4648      	mov	r0, r9
 800084a:	f7ff fe75 	bl	8000538 <_Unwind_GetGR>
 800084e:	2f02      	cmp	r7, #2
 8000850:	6228      	str	r0, [r5, #32]
 8000852:	d11d      	bne.n	8000890 <__gnu_unwind_pr_common+0x27c>
 8000854:	462b      	mov	r3, r5
 8000856:	9a06      	ldr	r2, [sp, #24]
 8000858:	f843 2f2c 	str.w	r2, [r3, #44]!
 800085c:	626b      	str	r3, [r5, #36]	; 0x24
 800085e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000860:	2006      	movs	r0, #6
 8000862:	e73f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 8000864:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000866:	429c      	cmp	r4, r3
 8000868:	d1a3      	bne.n	80007b2 <__gnu_unwind_pr_common+0x19e>
 800086a:	2204      	movs	r2, #4
 800086c:	2700      	movs	r7, #0
 800086e:	9902      	ldr	r1, [sp, #8]
 8000870:	18a3      	adds	r3, r4, r2
 8000872:	62a9      	str	r1, [r5, #40]	; 0x28
 8000874:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000876:	632a      	str	r2, [r5, #48]	; 0x30
 8000878:	636b      	str	r3, [r5, #52]	; 0x34
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	42bb      	cmp	r3, r7
 800087e:	db1d      	blt.n	80008bc <__gnu_unwind_pr_common+0x2a8>
 8000880:	2301      	movs	r3, #1
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	e720      	b.n	80006c8 <__gnu_unwind_pr_common+0xb4>
 8000886:	4648      	mov	r0, r9
 8000888:	210d      	movs	r1, #13
 800088a:	f7ff fe55 	bl	8000538 <_Unwind_GetGR>
 800088e:	6228      	str	r0, [r5, #32]
 8000890:	9b06      	ldr	r3, [sp, #24]
 8000892:	626b      	str	r3, [r5, #36]	; 0x24
 8000894:	e7e3      	b.n	800085e <__gnu_unwind_pr_common+0x24a>
 8000896:	4620      	mov	r0, r4
 8000898:	f7ff fc62 	bl	8000160 <selfrel_offset31>
 800089c:	3404      	adds	r4, #4
 800089e:	4606      	mov	r6, r0
 80008a0:	63ac      	str	r4, [r5, #56]	; 0x38
 80008a2:	4628      	mov	r0, r5
 80008a4:	f3af 8000 	nop.w
 80008a8:	2800      	cmp	r0, #0
 80008aa:	f43f af1a 	beq.w	80006e2 <__gnu_unwind_pr_common+0xce>
 80008ae:	4648      	mov	r0, r9
 80008b0:	4632      	mov	r2, r6
 80008b2:	210f      	movs	r1, #15
 80008b4:	f7ff fe66 	bl	8000584 <_Unwind_SetGR>
 80008b8:	2007      	movs	r0, #7
 80008ba:	e713      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 80008bc:	4608      	mov	r0, r1
 80008be:	3001      	adds	r0, #1
 80008c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008c4:	f7ff fc4c 	bl	8000160 <selfrel_offset31>
 80008c8:	210f      	movs	r1, #15
 80008ca:	4602      	mov	r2, r0
 80008cc:	4648      	mov	r0, r9
 80008ce:	f7ff fe59 	bl	8000584 <_Unwind_SetGR>
 80008d2:	4648      	mov	r0, r9
 80008d4:	462a      	mov	r2, r5
 80008d6:	4639      	mov	r1, r7
 80008d8:	f7ff fe54 	bl	8000584 <_Unwind_SetGR>
 80008dc:	2007      	movs	r0, #7
 80008de:	e701      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 80008e0:	00000000 	.word	0x00000000

080008e4 <__aeabi_unwind_cpp_pr0>:
 80008e4:	2300      	movs	r3, #0
 80008e6:	e695      	b.n	8000614 <__gnu_unwind_pr_common>

080008e8 <__aeabi_unwind_cpp_pr1>:
 80008e8:	2301      	movs	r3, #1
 80008ea:	e693      	b.n	8000614 <__gnu_unwind_pr_common>

080008ec <__aeabi_unwind_cpp_pr2>:
 80008ec:	2302      	movs	r3, #2
 80008ee:	e691      	b.n	8000614 <__gnu_unwind_pr_common>

080008f0 <_Unwind_VRS_Pop>:
 80008f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f2:	4604      	mov	r4, r0
 80008f4:	b0c5      	sub	sp, #276	; 0x114
 80008f6:	2904      	cmp	r1, #4
 80008f8:	d80d      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 80008fa:	e8df f001 	tbb	[pc, r1]
 80008fe:	0355      	.short	0x0355
 8000900:	310c      	.short	0x310c
 8000902:	0f          	.byte	0x0f
 8000903:	00          	.byte	0x00
 8000904:	2b01      	cmp	r3, #1
 8000906:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800090a:	b295      	uxth	r5, r2
 800090c:	d164      	bne.n	80009d8 <_Unwind_VRS_Pop+0xe8>
 800090e:	1972      	adds	r2, r6, r5
 8000910:	2a10      	cmp	r2, #16
 8000912:	f240 809d 	bls.w	8000a50 <_Unwind_VRS_Pop+0x160>
 8000916:	2002      	movs	r0, #2
 8000918:	b045      	add	sp, #276	; 0x114
 800091a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1fa      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 8000920:	2a10      	cmp	r2, #16
 8000922:	d8f8      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	06d8      	lsls	r0, r3, #27
 8000928:	f100 80c8 	bmi.w	8000abc <_Unwind_VRS_Pop+0x1cc>
 800092c:	ae22      	add	r6, sp, #136	; 0x88
 800092e:	4630      	mov	r0, r6
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	2501      	movs	r5, #1
 8000934:	f000 f974 	bl	8000c20 <__gnu_Unwind_Save_WMMXC>
 8000938:	2300      	movs	r3, #0
 800093a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800093c:	9a01      	ldr	r2, [sp, #4]
 800093e:	fa05 f103 	lsl.w	r1, r5, r3
 8000942:	4211      	tst	r1, r2
 8000944:	d003      	beq.n	800094e <_Unwind_VRS_Pop+0x5e>
 8000946:	6801      	ldr	r1, [r0, #0]
 8000948:	3004      	adds	r0, #4
 800094a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800094e:	3301      	adds	r3, #1
 8000950:	2b04      	cmp	r3, #4
 8000952:	d1f4      	bne.n	800093e <_Unwind_VRS_Pop+0x4e>
 8000954:	63a0      	str	r0, [r4, #56]	; 0x38
 8000956:	4630      	mov	r0, r6
 8000958:	f000 f958 	bl	8000c0c <__gnu_Unwind_Restore_WMMXC>
 800095c:	2000      	movs	r0, #0
 800095e:	e7db      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 8000960:	2b03      	cmp	r3, #3
 8000962:	d1d8      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 8000964:	0c15      	lsrs	r5, r2, #16
 8000966:	b297      	uxth	r7, r2
 8000968:	19eb      	adds	r3, r5, r7
 800096a:	2b10      	cmp	r3, #16
 800096c:	d8d3      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	071e      	lsls	r6, r3, #28
 8000972:	f100 80b7 	bmi.w	8000ae4 <_Unwind_VRS_Pop+0x1f4>
 8000976:	ae22      	add	r6, sp, #136	; 0x88
 8000978:	4630      	mov	r0, r6
 800097a:	f000 f925 	bl	8000bc8 <__gnu_Unwind_Save_WMMXD>
 800097e:	00ed      	lsls	r5, r5, #3
 8000980:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000982:	b15f      	cbz	r7, 800099c <_Unwind_VRS_Pop+0xac>
 8000984:	3d04      	subs	r5, #4
 8000986:	4603      	mov	r3, r0
 8000988:	1971      	adds	r1, r6, r5
 800098a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800098e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000992:	4283      	cmp	r3, r0
 8000994:	f841 2f04 	str.w	r2, [r1, #4]!
 8000998:	d1f9      	bne.n	800098e <_Unwind_VRS_Pop+0x9e>
 800099a:	4618      	mov	r0, r3
 800099c:	63a0      	str	r0, [r4, #56]	; 0x38
 800099e:	4630      	mov	r0, r6
 80009a0:	f000 f8f0 	bl	8000b84 <__gnu_Unwind_Restore_WMMXD>
 80009a4:	2000      	movs	r0, #0
 80009a6:	e7b7      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1b4      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 80009ac:	2701      	movs	r7, #1
 80009ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80009b0:	b296      	uxth	r6, r2
 80009b2:	1d20      	adds	r0, r4, #4
 80009b4:	fa07 f103 	lsl.w	r1, r7, r3
 80009b8:	4231      	tst	r1, r6
 80009ba:	f103 0301 	add.w	r3, r3, #1
 80009be:	d002      	beq.n	80009c6 <_Unwind_VRS_Pop+0xd6>
 80009c0:	6829      	ldr	r1, [r5, #0]
 80009c2:	3504      	adds	r5, #4
 80009c4:	6001      	str	r1, [r0, #0]
 80009c6:	2b10      	cmp	r3, #16
 80009c8:	f100 0004 	add.w	r0, r0, #4
 80009cc:	d1f2      	bne.n	80009b4 <_Unwind_VRS_Pop+0xc4>
 80009ce:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80009d2:	d13b      	bne.n	8000a4c <_Unwind_VRS_Pop+0x15c>
 80009d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80009d6:	e79f      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 80009d8:	2b05      	cmp	r3, #5
 80009da:	d19c      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 80009dc:	1977      	adds	r7, r6, r5
 80009de:	2f20      	cmp	r7, #32
 80009e0:	d899      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 80009e2:	2e0f      	cmp	r6, #15
 80009e4:	d966      	bls.n	8000ab4 <_Unwind_VRS_Pop+0x1c4>
 80009e6:	462f      	mov	r7, r5
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d13a      	bne.n	8000a62 <_Unwind_VRS_Pop+0x172>
 80009ec:	462a      	mov	r2, r5
 80009ee:	2700      	movs	r7, #0
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009f4:	dd72      	ble.n	8000adc <_Unwind_VRS_Pop+0x1ec>
 80009f6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80009fa:	4601      	mov	r1, r0
 80009fc:	a844      	add	r0, sp, #272	; 0x110
 80009fe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a02:	388c      	subs	r0, #140	; 0x8c
 8000a04:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a08:	4291      	cmp	r1, r2
 8000a0a:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a0e:	d1f9      	bne.n	8000a04 <_Unwind_VRS_Pop+0x114>
 8000a10:	4608      	mov	r0, r1
 8000a12:	b197      	cbz	r7, 8000a3a <_Unwind_VRS_Pop+0x14a>
 8000a14:	2e10      	cmp	r6, #16
 8000a16:	4632      	mov	r2, r6
 8000a18:	bf38      	it	cc
 8000a1a:	2210      	movcc	r2, #16
 8000a1c:	a944      	add	r1, sp, #272	; 0x110
 8000a1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a22:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a26:	0079      	lsls	r1, r7, #1
 8000a28:	3a04      	subs	r2, #4
 8000a2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a2e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a32:	4288      	cmp	r0, r1
 8000a34:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a38:	d1f9      	bne.n	8000a2e <_Unwind_VRS_Pop+0x13e>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d048      	beq.n	8000ad0 <_Unwind_VRS_Pop+0x1e0>
 8000a3e:	2e0f      	cmp	r6, #15
 8000a40:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a42:	d933      	bls.n	8000aac <_Unwind_VRS_Pop+0x1bc>
 8000a44:	b117      	cbz	r7, 8000a4c <_Unwind_VRS_Pop+0x15c>
 8000a46:	a802      	add	r0, sp, #8
 8000a48:	f000 f894 	bl	8000b74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e763      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 8000a50:	2e0f      	cmp	r6, #15
 8000a52:	f63f af60 	bhi.w	8000916 <_Unwind_VRS_Pop+0x26>
 8000a56:	2700      	movs	r7, #0
 8000a58:	6822      	ldr	r2, [r4, #0]
 8000a5a:	07d1      	lsls	r1, r2, #31
 8000a5c:	d417      	bmi.n	8000a8e <_Unwind_VRS_Pop+0x19e>
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d060      	beq.n	8000b24 <_Unwind_VRS_Pop+0x234>
 8000a62:	6822      	ldr	r2, [r4, #0]
 8000a64:	0751      	lsls	r1, r2, #29
 8000a66:	d445      	bmi.n	8000af4 <_Unwind_VRS_Pop+0x204>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d04d      	beq.n	8000b08 <_Unwind_VRS_Pop+0x218>
 8000a6c:	2e0f      	cmp	r6, #15
 8000a6e:	d806      	bhi.n	8000a7e <_Unwind_VRS_Pop+0x18e>
 8000a70:	a822      	add	r0, sp, #136	; 0x88
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f000 f87a 	bl	8000b6c <__gnu_Unwind_Save_VFP_D>
 8000a78:	9b01      	ldr	r3, [sp, #4]
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d0b6      	beq.n	80009ec <_Unwind_VRS_Pop+0xfc>
 8000a7e:	a802      	add	r0, sp, #8
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	f000 f87b 	bl	8000b7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a86:	9b01      	ldr	r3, [sp, #4]
 8000a88:	f1c6 0210 	rsb	r2, r6, #16
 8000a8c:	e7b0      	b.n	80009f0 <_Unwind_VRS_Pop+0x100>
 8000a8e:	f022 0101 	bic.w	r1, r2, #1
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	6021      	str	r1, [r4, #0]
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	4620      	mov	r0, r4
 8000a9a:	d03b      	beq.n	8000b14 <_Unwind_VRS_Pop+0x224>
 8000a9c:	f022 0203 	bic.w	r2, r2, #3
 8000aa0:	f840 2b48 	str.w	r2, [r0], #72
 8000aa4:	f000 f85a 	bl	8000b5c <__gnu_Unwind_Save_VFP>
 8000aa8:	9b01      	ldr	r3, [sp, #4]
 8000aaa:	e7d8      	b.n	8000a5e <_Unwind_VRS_Pop+0x16e>
 8000aac:	a822      	add	r0, sp, #136	; 0x88
 8000aae:	f000 f859 	bl	8000b64 <__gnu_Unwind_Restore_VFP_D>
 8000ab2:	e7c7      	b.n	8000a44 <_Unwind_VRS_Pop+0x154>
 8000ab4:	2f10      	cmp	r7, #16
 8000ab6:	d9ce      	bls.n	8000a56 <_Unwind_VRS_Pop+0x166>
 8000ab8:	3f10      	subs	r7, #16
 8000aba:	e7cd      	b.n	8000a58 <_Unwind_VRS_Pop+0x168>
 8000abc:	f023 0310 	bic.w	r3, r3, #16
 8000ac0:	6023      	str	r3, [r4, #0]
 8000ac2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ac6:	9201      	str	r2, [sp, #4]
 8000ac8:	f000 f8aa 	bl	8000c20 <__gnu_Unwind_Save_WMMXC>
 8000acc:	9a01      	ldr	r2, [sp, #4]
 8000ace:	e72d      	b.n	800092c <_Unwind_VRS_Pop+0x3c>
 8000ad0:	3104      	adds	r1, #4
 8000ad2:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ad4:	a822      	add	r0, sp, #136	; 0x88
 8000ad6:	f000 f83d 	bl	8000b54 <__gnu_Unwind_Restore_VFP>
 8000ada:	e7b7      	b.n	8000a4c <_Unwind_VRS_Pop+0x15c>
 8000adc:	2f00      	cmp	r7, #0
 8000ade:	d199      	bne.n	8000a14 <_Unwind_VRS_Pop+0x124>
 8000ae0:	4601      	mov	r1, r0
 8000ae2:	e7aa      	b.n	8000a3a <_Unwind_VRS_Pop+0x14a>
 8000ae4:	f023 0308 	bic.w	r3, r3, #8
 8000ae8:	6023      	str	r3, [r4, #0]
 8000aea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000aee:	f000 f86b 	bl	8000bc8 <__gnu_Unwind_Save_WMMXD>
 8000af2:	e740      	b.n	8000976 <_Unwind_VRS_Pop+0x86>
 8000af4:	4620      	mov	r0, r4
 8000af6:	f022 0204 	bic.w	r2, r2, #4
 8000afa:	f840 2bd0 	str.w	r2, [r0], #208
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f000 f83c 	bl	8000b7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b04:	9b01      	ldr	r3, [sp, #4]
 8000b06:	e7af      	b.n	8000a68 <_Unwind_VRS_Pop+0x178>
 8000b08:	a822      	add	r0, sp, #136	; 0x88
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	f000 f826 	bl	8000b5c <__gnu_Unwind_Save_VFP>
 8000b10:	9b01      	ldr	r3, [sp, #4]
 8000b12:	e7b9      	b.n	8000a88 <_Unwind_VRS_Pop+0x198>
 8000b14:	f041 0102 	orr.w	r1, r1, #2
 8000b18:	f840 1b48 	str.w	r1, [r0], #72
 8000b1c:	f000 f826 	bl	8000b6c <__gnu_Unwind_Save_VFP_D>
 8000b20:	9b01      	ldr	r3, [sp, #4]
 8000b22:	e79c      	b.n	8000a5e <_Unwind_VRS_Pop+0x16e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d003      	beq.n	8000b30 <_Unwind_VRS_Pop+0x240>
 8000b28:	2e0f      	cmp	r6, #15
 8000b2a:	f63f af5f 	bhi.w	80009ec <_Unwind_VRS_Pop+0xfc>
 8000b2e:	e79f      	b.n	8000a70 <_Unwind_VRS_Pop+0x180>
 8000b30:	a822      	add	r0, sp, #136	; 0x88
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	f000 f812 	bl	8000b5c <__gnu_Unwind_Save_VFP>
 8000b38:	9b01      	ldr	r3, [sp, #4]
 8000b3a:	e757      	b.n	80009ec <_Unwind_VRS_Pop+0xfc>

08000b3c <__restore_core_regs>:
 8000b3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b44:	469c      	mov	ip, r3
 8000b46:	46a6      	mov	lr, r4
 8000b48:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b50:	46e5      	mov	sp, ip
 8000b52:	bd00      	pop	{pc}

08000b54 <__gnu_Unwind_Restore_VFP>:
 8000b54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__gnu_Unwind_Save_VFP>:
 8000b5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__gnu_Unwind_Restore_VFP_D>:
 8000b64:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__gnu_Unwind_Save_VFP_D>:
 8000b6c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b74:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__gnu_Unwind_Restore_WMMXD>:
 8000b84:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b88:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b8c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b90:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b94:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b98:	ecf0 5102 	ldfe	f5, [r0], #8
 8000b9c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ba0:	ecf0 7102 	ldfe	f7, [r0], #8
 8000ba4:	ecf0 8102 	ldfp	f0, [r0], #8
 8000ba8:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bac:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bb0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bb4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bb8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bbc:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bc0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__gnu_Unwind_Save_WMMXD>:
 8000bc8:	ece0 0102 	stfe	f0, [r0], #8
 8000bcc:	ece0 1102 	stfe	f1, [r0], #8
 8000bd0:	ece0 2102 	stfe	f2, [r0], #8
 8000bd4:	ece0 3102 	stfe	f3, [r0], #8
 8000bd8:	ece0 4102 	stfe	f4, [r0], #8
 8000bdc:	ece0 5102 	stfe	f5, [r0], #8
 8000be0:	ece0 6102 	stfe	f6, [r0], #8
 8000be4:	ece0 7102 	stfe	f7, [r0], #8
 8000be8:	ece0 8102 	stfp	f0, [r0], #8
 8000bec:	ece0 9102 	stfp	f1, [r0], #8
 8000bf0:	ece0 a102 	stfp	f2, [r0], #8
 8000bf4:	ece0 b102 	stfp	f3, [r0], #8
 8000bf8:	ece0 c102 	stfp	f4, [r0], #8
 8000bfc:	ece0 d102 	stfp	f5, [r0], #8
 8000c00:	ece0 e102 	stfp	f6, [r0], #8
 8000c04:	ece0 f102 	stfp	f7, [r0], #8
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__gnu_Unwind_Restore_WMMXC>:
 8000c0c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c10:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c14:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c18:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__gnu_Unwind_Save_WMMXC>:
 8000c20:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c24:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c28:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c2c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_Unwind_RaiseException>:
 8000c34:	46ec      	mov	ip, sp
 8000c36:	b500      	push	{lr}
 8000c38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c48:	a901      	add	r1, sp, #4
 8000c4a:	f7ff fbed 	bl	8000428 <__gnu_Unwind_RaiseException>
 8000c4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c52:	b012      	add	sp, #72	; 0x48
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <_Unwind_Resume>:
 8000c58:	46ec      	mov	ip, sp
 8000c5a:	b500      	push	{lr}
 8000c5c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c6c:	a901      	add	r1, sp, #4
 8000c6e:	f7ff fc15 	bl	800049c <__gnu_Unwind_Resume>
 8000c72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c76:	b012      	add	sp, #72	; 0x48
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <_Unwind_Resume_or_Rethrow>:
 8000c7c:	46ec      	mov	ip, sp
 8000c7e:	b500      	push	{lr}
 8000c80:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c90:	a901      	add	r1, sp, #4
 8000c92:	f7ff fc25 	bl	80004e0 <__gnu_Unwind_Resume_or_Rethrow>
 8000c96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c9a:	b012      	add	sp, #72	; 0x48
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <_Unwind_ForcedUnwind>:
 8000ca0:	46ec      	mov	ip, sp
 8000ca2:	b500      	push	{lr}
 8000ca4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ca8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb4:	ab01      	add	r3, sp, #4
 8000cb6:	f7ff fbe7 	bl	8000488 <__gnu_Unwind_ForcedUnwind>
 8000cba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cbe:	b012      	add	sp, #72	; 0x48
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <_Unwind_Backtrace>:
 8000cc4:	46ec      	mov	ip, sp
 8000cc6:	b500      	push	{lr}
 8000cc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ccc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd8:	aa01      	add	r2, sp, #4
 8000cda:	f7ff fc61 	bl	80005a0 <__gnu_Unwind_Backtrace>
 8000cde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ce2:	b012      	add	sp, #72	; 0x48
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <next_unwind_byte>:
 8000ce8:	7a02      	ldrb	r2, [r0, #8]
 8000cea:	b91a      	cbnz	r2, 8000cf4 <next_unwind_byte+0xc>
 8000cec:	7a43      	ldrb	r3, [r0, #9]
 8000cee:	b943      	cbnz	r3, 8000d02 <next_unwind_byte+0x1a>
 8000cf0:	20b0      	movs	r0, #176	; 0xb0
 8000cf2:	4770      	bx	lr
 8000cf4:	6803      	ldr	r3, [r0, #0]
 8000cf6:	3a01      	subs	r2, #1
 8000cf8:	7202      	strb	r2, [r0, #8]
 8000cfa:	021a      	lsls	r2, r3, #8
 8000cfc:	6002      	str	r2, [r0, #0]
 8000cfe:	0e18      	lsrs	r0, r3, #24
 8000d00:	4770      	bx	lr
 8000d02:	2103      	movs	r1, #3
 8000d04:	6842      	ldr	r2, [r0, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b410      	push	{r4}
 8000d0a:	7243      	strb	r3, [r0, #9]
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	1d14      	adds	r4, r2, #4
 8000d10:	7201      	strb	r1, [r0, #8]
 8000d12:	021a      	lsls	r2, r3, #8
 8000d14:	6044      	str	r4, [r0, #4]
 8000d16:	6002      	str	r2, [r0, #0]
 8000d18:	bc10      	pop	{r4}
 8000d1a:	0e18      	lsrs	r0, r3, #24
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <_Unwind_GetGR.constprop.0>:
 8000d20:	2300      	movs	r3, #0
 8000d22:	b500      	push	{lr}
 8000d24:	b085      	sub	sp, #20
 8000d26:	aa03      	add	r2, sp, #12
 8000d28:	9200      	str	r2, [sp, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	220c      	movs	r2, #12
 8000d2e:	f7ff fbe9 	bl	8000504 <_Unwind_VRS_Get>
 8000d32:	9803      	ldr	r0, [sp, #12]
 8000d34:	b005      	add	sp, #20
 8000d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3a:	bf00      	nop

08000d3c <unwind_UCB_from_context>:
 8000d3c:	e7f0      	b.n	8000d20 <_Unwind_GetGR.constprop.0>
 8000d3e:	bf00      	nop

08000d40 <__gnu_unwind_execute>:
 8000d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d44:	4606      	mov	r6, r0
 8000d46:	460f      	mov	r7, r1
 8000d48:	f04f 0800 	mov.w	r8, #0
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	4638      	mov	r0, r7
 8000d50:	f7ff ffca 	bl	8000ce8 <next_unwind_byte>
 8000d54:	28b0      	cmp	r0, #176	; 0xb0
 8000d56:	4604      	mov	r4, r0
 8000d58:	d023      	beq.n	8000da2 <__gnu_unwind_execute+0x62>
 8000d5a:	0605      	lsls	r5, r0, #24
 8000d5c:	d427      	bmi.n	8000dae <__gnu_unwind_execute+0x6e>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f10d 090c 	add.w	r9, sp, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	0085      	lsls	r5, r0, #2
 8000d68:	220d      	movs	r2, #13
 8000d6a:	f8cd 9000 	str.w	r9, [sp]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f7ff fbc8 	bl	8000504 <_Unwind_VRS_Get>
 8000d74:	b2ed      	uxtb	r5, r5
 8000d76:	9b03      	ldr	r3, [sp, #12]
 8000d78:	0660      	lsls	r0, r4, #25
 8000d7a:	f105 0504 	add.w	r5, r5, #4
 8000d7e:	bf4c      	ite	mi
 8000d80:	1b5d      	submi	r5, r3, r5
 8000d82:	18ed      	addpl	r5, r5, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	220d      	movs	r2, #13
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f8cd 9000 	str.w	r9, [sp]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	9503      	str	r5, [sp, #12]
 8000d92:	f7ff fbdd 	bl	8000550 <_Unwind_VRS_Set>
 8000d96:	4638      	mov	r0, r7
 8000d98:	f7ff ffa6 	bl	8000ce8 <next_unwind_byte>
 8000d9c:	28b0      	cmp	r0, #176	; 0xb0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	d1db      	bne.n	8000d5a <__gnu_unwind_execute+0x1a>
 8000da2:	f1b8 0f00 	cmp.w	r8, #0
 8000da6:	f000 8094 	beq.w	8000ed2 <__gnu_unwind_execute+0x192>
 8000daa:	2000      	movs	r0, #0
 8000dac:	e01c      	b.n	8000de8 <__gnu_unwind_execute+0xa8>
 8000dae:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000db2:	2b80      	cmp	r3, #128	; 0x80
 8000db4:	d05c      	beq.n	8000e70 <__gnu_unwind_execute+0x130>
 8000db6:	2b90      	cmp	r3, #144	; 0x90
 8000db8:	d019      	beq.n	8000dee <__gnu_unwind_execute+0xae>
 8000dba:	2ba0      	cmp	r3, #160	; 0xa0
 8000dbc:	d02c      	beq.n	8000e18 <__gnu_unwind_execute+0xd8>
 8000dbe:	2bb0      	cmp	r3, #176	; 0xb0
 8000dc0:	d03e      	beq.n	8000e40 <__gnu_unwind_execute+0x100>
 8000dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8000dc4:	d06b      	beq.n	8000e9e <__gnu_unwind_execute+0x15e>
 8000dc6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dca:	2bd0      	cmp	r3, #208	; 0xd0
 8000dcc:	d10b      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000dce:	f000 0207 	and.w	r2, r0, #7
 8000dd2:	3201      	adds	r2, #1
 8000dd4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dd8:	2305      	movs	r3, #5
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	f7ff fd87 	bl	80008f0 <_Unwind_VRS_Pop>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d0b3      	beq.n	8000d4e <__gnu_unwind_execute+0xe>
 8000de6:	2009      	movs	r0, #9
 8000de8:	b005      	add	sp, #20
 8000dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dee:	f000 030d 	and.w	r3, r0, #13
 8000df2:	2b0d      	cmp	r3, #13
 8000df4:	d0f7      	beq.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000df6:	2300      	movs	r3, #0
 8000df8:	ad03      	add	r5, sp, #12
 8000dfa:	f000 020f 	and.w	r2, r0, #15
 8000dfe:	4619      	mov	r1, r3
 8000e00:	9500      	str	r5, [sp, #0]
 8000e02:	4630      	mov	r0, r6
 8000e04:	f7ff fb7e 	bl	8000504 <_Unwind_VRS_Get>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9500      	str	r5, [sp, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	220d      	movs	r2, #13
 8000e10:	4630      	mov	r0, r6
 8000e12:	f7ff fb9d 	bl	8000550 <_Unwind_VRS_Set>
 8000e16:	e79a      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e18:	43c3      	mvns	r3, r0
 8000e1a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	411a      	asrs	r2, r3
 8000e24:	2300      	movs	r3, #0
 8000e26:	0701      	lsls	r1, r0, #28
 8000e28:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e2c:	bf48      	it	mi
 8000e2e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e32:	4619      	mov	r1, r3
 8000e34:	4630      	mov	r0, r6
 8000e36:	f7ff fd5b 	bl	80008f0 <_Unwind_VRS_Pop>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d1d3      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e3e:	e786      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e40:	28b1      	cmp	r0, #177	; 0xb1
 8000e42:	d057      	beq.n	8000ef4 <__gnu_unwind_execute+0x1b4>
 8000e44:	28b2      	cmp	r0, #178	; 0xb2
 8000e46:	d068      	beq.n	8000f1a <__gnu_unwind_execute+0x1da>
 8000e48:	28b3      	cmp	r0, #179	; 0xb3
 8000e4a:	f000 8095 	beq.w	8000f78 <__gnu_unwind_execute+0x238>
 8000e4e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e52:	2bb4      	cmp	r3, #180	; 0xb4
 8000e54:	d0c7      	beq.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e56:	2301      	movs	r3, #1
 8000e58:	f000 0207 	and.w	r2, r0, #7
 8000e5c:	441a      	add	r2, r3
 8000e5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e62:	4619      	mov	r1, r3
 8000e64:	4630      	mov	r0, r6
 8000e66:	f7ff fd43 	bl	80008f0 <_Unwind_VRS_Pop>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d1bb      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e6e:	e76e      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e70:	4638      	mov	r0, r7
 8000e72:	f7ff ff39 	bl	8000ce8 <next_unwind_byte>
 8000e76:	0224      	lsls	r4, r4, #8
 8000e78:	4304      	orrs	r4, r0
 8000e7a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000e7e:	d0b2      	beq.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e80:	2300      	movs	r3, #0
 8000e82:	0124      	lsls	r4, r4, #4
 8000e84:	b2a2      	uxth	r2, r4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4630      	mov	r0, r6
 8000e8a:	f7ff fd31 	bl	80008f0 <_Unwind_VRS_Pop>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d1a9      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e92:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e96:	bf18      	it	ne
 8000e98:	f04f 0801 	movne.w	r8, #1
 8000e9c:	e757      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e9e:	28c6      	cmp	r0, #198	; 0xc6
 8000ea0:	d07d      	beq.n	8000f9e <__gnu_unwind_execute+0x25e>
 8000ea2:	28c7      	cmp	r0, #199	; 0xc7
 8000ea4:	f000 8086 	beq.w	8000fb4 <__gnu_unwind_execute+0x274>
 8000ea8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000eac:	2bc0      	cmp	r3, #192	; 0xc0
 8000eae:	f000 8094 	beq.w	8000fda <__gnu_unwind_execute+0x29a>
 8000eb2:	28c8      	cmp	r0, #200	; 0xc8
 8000eb4:	f000 809f 	beq.w	8000ff6 <__gnu_unwind_execute+0x2b6>
 8000eb8:	28c9      	cmp	r0, #201	; 0xc9
 8000eba:	d194      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	f7ff ff13 	bl	8000ce8 <next_unwind_byte>
 8000ec2:	0302      	lsls	r2, r0, #12
 8000ec4:	f000 000f 	and.w	r0, r0, #15
 8000ec8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000ecc:	3001      	adds	r0, #1
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	e782      	b.n	8000dd8 <__gnu_unwind_execute+0x98>
 8000ed2:	ac03      	add	r4, sp, #12
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	220e      	movs	r2, #14
 8000ed8:	4641      	mov	r1, r8
 8000eda:	9400      	str	r4, [sp, #0]
 8000edc:	4630      	mov	r0, r6
 8000ede:	f7ff fb11 	bl	8000504 <_Unwind_VRS_Get>
 8000ee2:	9400      	str	r4, [sp, #0]
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	220f      	movs	r2, #15
 8000eea:	4641      	mov	r1, r8
 8000eec:	f7ff fb30 	bl	8000550 <_Unwind_VRS_Set>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e779      	b.n	8000de8 <__gnu_unwind_execute+0xa8>
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f7ff fef7 	bl	8000ce8 <next_unwind_byte>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	f43f af73 	beq.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f00:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f04:	f47f af6f 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f7ff fcef 	bl	80008f0 <_Unwind_VRS_Pop>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	f47f af67 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f18:	e719      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f10d 090c 	add.w	r9, sp, #12
 8000f20:	220d      	movs	r2, #13
 8000f22:	4619      	mov	r1, r3
 8000f24:	f8cd 9000 	str.w	r9, [sp]
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f7ff faeb 	bl	8000504 <_Unwind_VRS_Get>
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f7ff feda 	bl	8000ce8 <next_unwind_byte>
 8000f34:	0602      	lsls	r2, r0, #24
 8000f36:	f04f 0402 	mov.w	r4, #2
 8000f3a:	d50c      	bpl.n	8000f56 <__gnu_unwind_execute+0x216>
 8000f3c:	9b03      	ldr	r3, [sp, #12]
 8000f3e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f42:	40a0      	lsls	r0, r4
 8000f44:	4403      	add	r3, r0
 8000f46:	4638      	mov	r0, r7
 8000f48:	9303      	str	r3, [sp, #12]
 8000f4a:	f7ff fecd 	bl	8000ce8 <next_unwind_byte>
 8000f4e:	0603      	lsls	r3, r0, #24
 8000f50:	f104 0407 	add.w	r4, r4, #7
 8000f54:	d4f2      	bmi.n	8000f3c <__gnu_unwind_execute+0x1fc>
 8000f56:	2300      	movs	r3, #0
 8000f58:	9903      	ldr	r1, [sp, #12]
 8000f5a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000f5e:	40a2      	lsls	r2, r4
 8000f60:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8000f64:	188c      	adds	r4, r1, r2
 8000f66:	f8cd 9000 	str.w	r9, [sp]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	220d      	movs	r2, #13
 8000f6e:	4630      	mov	r0, r6
 8000f70:	9403      	str	r4, [sp, #12]
 8000f72:	f7ff faed 	bl	8000550 <_Unwind_VRS_Set>
 8000f76:	e6ea      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000f78:	4638      	mov	r0, r7
 8000f7a:	f7ff feb5 	bl	8000ce8 <next_unwind_byte>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	0301      	lsls	r1, r0, #12
 8000f82:	f000 000f 	and.w	r0, r0, #15
 8000f86:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f8a:	18c2      	adds	r2, r0, r3
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	4630      	mov	r0, r6
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fcad 	bl	80008f0 <_Unwind_VRS_Pop>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	f47f af25 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f9c:	e6d7      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	f7ff fea2 	bl	8000ce8 <next_unwind_byte>
 8000fa4:	0301      	lsls	r1, r0, #12
 8000fa6:	f000 000f 	and.w	r0, r0, #15
 8000faa:	2303      	movs	r3, #3
 8000fac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fb0:	1c42      	adds	r2, r0, #1
 8000fb2:	e7eb      	b.n	8000f8c <__gnu_unwind_execute+0x24c>
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	f7ff fe97 	bl	8000ce8 <next_unwind_byte>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	f43f af13 	beq.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000fc0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fc4:	f47f af0f 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4630      	mov	r0, r6
 8000fce:	f7ff fc8f 	bl	80008f0 <_Unwind_VRS_Pop>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	f47f af07 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000fd8:	e6b9      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f000 020f 	and.w	r2, r0, #15
 8000fe0:	3201      	adds	r2, #1
 8000fe2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fc81 	bl	80008f0 <_Unwind_VRS_Pop>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	f47f aef9 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000ff4:	e6ab      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	f7ff fe76 	bl	8000ce8 <next_unwind_byte>
 8000ffc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001000:	f000 030f 	and.w	r3, r0, #15
 8001004:	3210      	adds	r2, #16
 8001006:	3301      	adds	r3, #1
 8001008:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800100c:	e6e4      	b.n	8000dd8 <__gnu_unwind_execute+0x98>
 800100e:	bf00      	nop

08001010 <__gnu_unwind_frame>:
 8001010:	b530      	push	{r4, r5, lr}
 8001012:	2403      	movs	r4, #3
 8001014:	460d      	mov	r5, r1
 8001016:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001018:	b085      	sub	sp, #20
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	f88d 400c 	strb.w	r4, [sp, #12]
 8001020:	79dc      	ldrb	r4, [r3, #7]
 8001022:	0212      	lsls	r2, r2, #8
 8001024:	3308      	adds	r3, #8
 8001026:	a901      	add	r1, sp, #4
 8001028:	4628      	mov	r0, r5
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	f7ff fe85 	bl	8000d40 <__gnu_unwind_execute>
 8001036:	b005      	add	sp, #20
 8001038:	bd30      	pop	{r4, r5, pc}
 800103a:	bf00      	nop

0800103c <_Unwind_GetRegionStart>:
 800103c:	b508      	push	{r3, lr}
 800103e:	f7ff fe7d 	bl	8000d3c <unwind_UCB_from_context>
 8001042:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001044:	bd08      	pop	{r3, pc}
 8001046:	bf00      	nop

08001048 <_Unwind_GetLanguageSpecificData>:
 8001048:	b508      	push	{r3, lr}
 800104a:	f7ff fe77 	bl	8000d3c <unwind_UCB_from_context>
 800104e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001050:	79c3      	ldrb	r3, [r0, #7]
 8001052:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001056:	3008      	adds	r0, #8
 8001058:	bd08      	pop	{r3, pc}
 800105a:	bf00      	nop

0800105c <_Unwind_GetTextRelBase>:
 800105c:	b508      	push	{r3, lr}
 800105e:	f002 fe6c 	bl	8003d3a <abort>
 8001062:	bf00      	nop

08001064 <_Unwind_GetDataRelBase>:
 8001064:	b508      	push	{r3, lr}
 8001066:	f7ff fff9 	bl	800105c <_Unwind_GetTextRelBase>
 800106a:	bf00      	nop

0800106c <_ZN4RF243csnE13GPIO_PinState>:
#include "RF24.h"
extern UART_HandleTypeDef huart1;
/****************************************************************************/

void RF24::csn(GPIO_PinState mode)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(csn_pin_port, csn_pin, mode);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6898      	ldr	r0, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	899b      	ldrh	r3, [r3, #12]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	4619      	mov	r1, r3
 8001084:	f001 f874 	bl	8002170 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN4RF242ceE13GPIO_PinState>:

/****************************************************************************/

void RF24::ce(GPIO_PinState level)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ce_pin_port, ce_pin, level);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	889b      	ldrh	r3, [r3, #4]
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	4619      	mov	r1, r3
 80010a8:	f001 f862 	bl	8002170 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN4RF2416beginTransactionEv>:

/****************************************************************************/

inline void RF24::beginTransaction()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	//_SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	csn(LOW);
 80010bc:	2100      	movs	r1, #0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffd4 	bl	800106c <_ZN4RF243csnE13GPIO_PinState>

}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN4RF2414endTransactionEv>:

/****************************************************************************/

inline void RF24::endTransaction()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	csn(HIGH);
 80010d4:	2101      	movs	r1, #1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffc8 	bl	800106c <_ZN4RF243csnE13GPIO_PinState>
	//_SPI.endTransaction();
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
	uint8_t result;
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	73bb      	strb	r3, [r7, #14]
	beginTransaction();
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffda 	bl	80010b4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6918      	ldr	r0, [r3, #16]
 8001104:	f107 010e 	add.w	r1, r7, #14
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	2201      	movs	r2, #1
 800110e:	f001 fb2a 	bl	8002766 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6918      	ldr	r0, [r3, #16]
 8001116:	f107 010f 	add.w	r1, r7, #15
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	2201      	movs	r2, #1
 8001120:	f001 fcc7 	bl	8002ab2 <HAL_SPI_Receive>
	endTransaction();
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffd1 	bl	80010cc <_ZN4RF2414endTransactionEv>

	return result;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	461a      	mov	r2, r3
 8001140:	460b      	mov	r3, r1
 8001142:	72fb      	strb	r3, [r7, #11]
 8001144:	4613      	mov	r3, r2
 8001146:	72bb      	strb	r3, [r7, #10]
	uint8_t status;
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8001148:	7afb      	ldrb	r3, [r7, #11]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	b2db      	uxtb	r3, r3
 8001156:	75bb      	strb	r3, [r7, #22]
	beginTransaction();
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff ffab 	bl	80010b4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6918      	ldr	r0, [r3, #16]
 8001162:	f107 0217 	add.w	r2, r7, #23
 8001166:	f107 0116 	add.w	r1, r7, #22
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	f001 fba1 	bl	80028b8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(hspix, (uint8_t *) buf, len, HAL_MAX_DELAY);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6918      	ldr	r0, [r3, #16]
 800117a:	7abb      	ldrb	r3, [r7, #10]
 800117c:	b29a      	uxth	r2, r3
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f001 fc95 	bl	8002ab2 <HAL_SPI_Receive>
	endTransaction();
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff ff9f 	bl	80010cc <_ZN4RF2414endTransactionEv>

	return status;
 800118e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b09e      	sub	sp, #120	; 0x78
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
 80011a4:	4613      	mov	r3, r2
 80011a6:	70bb      	strb	r3, [r7, #2]
	uint8_t status;
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
#ifdef SERIAL_DEBUG
	char buffer[100];
	sprintf(buffer, PSTR("write_register(%02x,%02x)\r\n"),reg,value);
 80011ba:	78fa      	ldrb	r2, [r7, #3]
 80011bc:	78bb      	ldrb	r3, [r7, #2]
 80011be:	f107 0008 	add.w	r0, r7, #8
 80011c2:	4918      	ldr	r1, [pc, #96]	; (8001224 <_ZN4RF2414write_registerEhh+0x8c>)
 80011c4:	f002 f99a 	bl	80034fc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7fe ffbf 	bl	8000150 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f107 0108 	add.w	r1, r7, #8
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <_ZN4RF2414write_registerEhh+0x90>)
 80011e0:	f001 ffe2 	bl	80031a8 <HAL_UART_Transmit>
#endif
	beginTransaction();
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff65 	bl	80010b4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6918      	ldr	r0, [r3, #16]
 80011ee:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 80011f2:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	f001 fb5b 	bl	80028b8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6918      	ldr	r0, [r3, #16]
 8001206:	1cb9      	adds	r1, r7, #2
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	2201      	movs	r2, #1
 800120e:	f001 faaa 	bl	8002766 <HAL_SPI_Transmit>
	endTransaction();
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff5a 	bl	80010cc <_ZN4RF2414endTransactionEv>

	return status;
 8001218:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800121c:	4618      	mov	r0, r3
 800121e:	3770      	adds	r7, #112	; 0x70
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08003de8 	.word	0x08003de8
 8001228:	20000128 	.word	0x20000128

0800122c <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, uint8_t writeType)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0a2      	sub	sp, #136	; 0x88
 8001230:	af02      	add	r7, sp, #8
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	4611      	mov	r1, r2
 8001238:	461a      	mov	r2, r3
 800123a:	460b      	mov	r3, r1
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	4613      	mov	r3, r2
 8001240:	71bb      	strb	r3, [r7, #6]
	uint8_t status, temp;
	const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	67bb      	str	r3, [r7, #120]	; 0x78

	data_len = rf24_min(data_len, payload_size);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	7dd2      	ldrb	r2, [r2, #23]
 800124c:	4293      	cmp	r3, r2
 800124e:	db02      	blt.n	8001256 <_ZN4RF2413write_payloadEPKvhh+0x2a>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	7ddb      	ldrb	r3, [r3, #23]
 8001254:	e000      	b.n	8001258 <_ZN4RF2413write_payloadEPKvhh+0x2c>
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	71fb      	strb	r3, [r7, #7]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	7e1b      	ldrb	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <_ZN4RF2413write_payloadEPKvhh+0x3a>
 8001262:	2300      	movs	r3, #0
 8001264:	e004      	b.n	8001270 <_ZN4RF2413write_payloadEPKvhh+0x44>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	7dda      	ldrb	r2, [r3, #23]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	//printf("[Writing %u bytes %u blanks]",data_len,blank_len);
#ifdef SERIAL_DEBUG
	char buffer[100];
	sprintf(buffer,"[Writing %u bytes %u blanks]\n",data_len,blank_len);
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800127a:	f107 0010 	add.w	r0, r7, #16
 800127e:	4925      	ldr	r1, [pc, #148]	; (8001314 <_ZN4RF2413write_payloadEPKvhh+0xe8>)
 8001280:	f002 f93c 	bl	80034fc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ff61 	bl	8000150 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 0110 	add.w	r1, r7, #16
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <_ZN4RF2413write_payloadEPKvhh+0xec>)
 800129c:	f001 ff84 	bl	80031a8 <HAL_UART_Transmit>
#endif
	beginTransaction();
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f7ff ff07 	bl	80010b4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &writeType, &status, 1, HAL_MAX_DELAY);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6918      	ldr	r0, [r3, #16]
 80012aa:	f107 0277 	add.w	r2, r7, #119	; 0x77
 80012ae:	1db9      	adds	r1, r7, #6
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	f001 fafe 	bl	80028b8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, (uint8_t *) current, data_len, HAL_MAX_DELAY);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6918      	ldr	r0, [r3, #16]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80012ca:	f001 fa4c 	bl	8002766 <HAL_SPI_Transmit>
	temp = LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	while (blank_len--)
 80012d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d009      	beq.n	8001300 <_ZN4RF2413write_payloadEPKvhh+0xd4>
	{
		HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6918      	ldr	r0, [r3, #16]
 80012f0:	f107 0176 	add.w	r1, r7, #118	; 0x76
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	2201      	movs	r2, #1
 80012fa:	f001 fa34 	bl	8002766 <HAL_SPI_Transmit>
	while (blank_len--)
 80012fe:	e7e9      	b.n	80012d4 <_ZN4RF2413write_payloadEPKvhh+0xa8>
	}
	endTransaction();
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff fee3 	bl	80010cc <_ZN4RF2414endTransactionEv>

	return status;
 8001306:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800130a:	4618      	mov	r0, r3
 800130c:	3780      	adds	r7, #128	; 0x80
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08003e04 	.word	0x08003e04
 8001318:	20000128 	.word	0x20000128

0800131c <_ZN4RF248flush_rxEv>:
}

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	return spiTrans( FLUSH_RX);
 8001324:	21e2      	movs	r1, #226	; 0xe2
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f812 	bl	8001350 <_ZN4RF248spiTransEh>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return spiTrans( FLUSH_TX);
 800133e:	21e1      	movs	r1, #225	; 0xe1
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f805 	bl	8001350 <_ZN4RF248spiTransEh>
 8001346:	4603      	mov	r3, r0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZN4RF248spiTransEh>:

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]

	uint8_t status;

	beginTransaction();
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fea9 	bl	80010b4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6918      	ldr	r0, [r3, #16]
 8001366:	f107 020f 	add.w	r2, r7, #15
 800136a:	1cf9      	adds	r1, r7, #3
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	f001 faa0 	bl	80028b8 <HAL_SPI_TransmitReceive>
	endTransaction();
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fea7 	bl	80010cc <_ZN4RF2414endTransactionEv>

	return status;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	return spiTrans(RF24_NOP);
 8001390:	21ff      	movs	r1, #255	; 0xff
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffdc 	bl	8001350 <_ZN4RF248spiTransEh>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_ZN4RF24C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>:
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer2,strlen(buffer2),HAL_MAX_DELAY);
}
#endif
/****************************************************************************/

RF24::RF24(GPIO_TypeDef * _cepin_port, uint16_t _cepin, GPIO_TypeDef * _cspin_port, uint16_t _cspin, SPI_HandleTypeDef * _hspix) :
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4613      	mov	r3, r2
 80013b0:	80fb      	strh	r3, [r7, #6]
		ce_pin_port(_cepin_port), ce_pin(_cepin), csn_pin_port(_cspin_port), csn_pin(_cspin), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(
				5)  //,pipe0_reading_addressHAL_MAX_DELAY
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	88fa      	ldrh	r2, [r7, #6]
 80013bc:	809a      	strh	r2, [r3, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8b3a      	ldrh	r2, [r7, #24]
 80013c8:	819a      	strh	r2, [r3, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	759a      	strb	r2, [r3, #22]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2220      	movs	r2, #32
 80013da:	75da      	strb	r2, [r3, #23]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	761a      	strb	r2, [r3, #24]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2205      	movs	r2, #5
 80013e6:	779a      	strb	r2, [r3, #30]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2205      	movs	r2, #5
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
{
	pipe0_reading_address[0] = 0;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	765a      	strb	r2, [r3, #25]
}
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
	const uint8_t max_channel = 125;
 800140c:	237d      	movs	r3, #125	; 0x7d
 800140e:	73fb      	strb	r3, [r7, #15]
	write_register(RF_CH, rf24_min(channel, max_channel));
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	2b7c      	cmp	r3, #124	; 0x7c
 8001414:	dc02      	bgt.n	800141c <_ZN4RF2410setChannelEh+0x1c>
 8001416:	1cfb      	adds	r3, r7, #3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	e000      	b.n	800141e <_ZN4RF2410setChannelEh+0x1e>
 800141c:	237d      	movs	r3, #125	; 0x7d
 800141e:	461a      	mov	r2, r3
 8001420:	2105      	movs	r1, #5
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff feb8 	bl	8001198 <_ZN4RF2414write_registerEhh>
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

	uint8_t setup = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
//      if (ce_pin != csn_pin)
//    #endif
//        pinMode(csn_pin,OUTPUT);
//
	//_SPI.begin();
	ce(LOW);
 800143c:	2100      	movs	r1, #0
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fe26 	bl	8001090 <_ZN4RF242ceE13GPIO_PinState>
	csn(HIGH);
 8001444:	2101      	movs	r1, #1
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fe10 	bl	800106c <_ZN4RF243csnE13GPIO_PinState>
	// This is actually only required following power up but some settling time also appears to
	// be required after resets too. For full coverage, we'll always assume the worst.
	// Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
	// Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
	// WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
	HAL_Delay(5);
 800144c:	2005      	movs	r0, #5
 800144e:	f000 fced 	bl	8001e2c <HAL_Delay>

	// Reset NRF_CONFIG and enable 16-bit CRC.
	write_register( NRF_CONFIG, 0x0C);
 8001452:	220c      	movs	r2, #12
 8001454:	2100      	movs	r1, #0
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fe9e 	bl	8001198 <_ZN4RF2414write_registerEhh>

	// Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
	// WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
	// sizes must never be used. See documentation for a more complete explanation.
	setRetries(5, 15);
 800145c:	220f      	movs	r2, #15
 800145e:	2105      	movs	r1, #5
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f9a1 	bl	80017a8 <_ZN4RF2410setRetriesEhh>
	// Reset value is MAX
	//setPALevel( RF24_PA_MAX ) ;

	// check for connected module and if this is a p nRF24l01 variant
	//
	if (setDataRate(RF24_250KBPS))
 8001466:	2102      	movs	r1, #2
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f957 	bl	800171c <_ZN4RF2411setDataRateE15rf24_datarate_e>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <_ZN4RF245beginEv+0x4a>
	{
		p_variant = true;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	759a      	strb	r2, [r3, #22]
	}
	setup = read_register(RF_SETUP);
 800147a:	2106      	movs	r1, #6
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fe31 	bl	80010e4 <_ZN4RF2413read_registerEh>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
	 p_variant = true ;
	 }*/

	// Then set the data rate to the slowest (and most reliable) speed supported by all
	// hardware.
	setDataRate(RF24_1MBPS);
 8001486:	2100      	movs	r1, #0
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f947 	bl	800171c <_ZN4RF2411setDataRateE15rf24_datarate_e>

	// Initialize CRC and request 2-byte (16bit) CRC
	//setCRCLength( RF24_CRC_16 ) ;

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f920 	bl	80016d4 <_ZN4RF2415toggle_featuresEv>
	write_register(FEATURE, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	211d      	movs	r1, #29
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fe7d 	bl	8001198 <_ZN4RF2414write_registerEhh>
	write_register(DYNPD, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	211c      	movs	r1, #28
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fe78 	bl	8001198 <_ZN4RF2414write_registerEhh>
	dynamic_payloads_enabled = false;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	761a      	strb	r2, [r3, #24]

	// Reset current status
	// Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 80014ae:	2270      	movs	r2, #112	; 0x70
 80014b0:	2107      	movs	r1, #7
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe70 	bl	8001198 <_ZN4RF2414write_registerEhh>

	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	setChannel(76);
 80014b8:	214c      	movs	r1, #76	; 0x4c
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa0 	bl	8001400 <_ZN4RF2410setChannelEh>

	// Flush buffers
	flush_rx();
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff2b 	bl	800131c <_ZN4RF248flush_rxEv>
	flush_tx();
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ff35 	bl	8001336 <_ZN4RF248flush_txEv>

	powerUp(); //Power up by default when begin() is called
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f81a 	bl	8001506 <_ZN4RF247powerUpEv>

	// Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
	// PTX should use only 22uA of power
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fe05 	bl	80010e4 <_ZN4RF2413read_registerEh>
 80014da:	4603      	mov	r3, r0
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fe56 	bl	8001198 <_ZN4RF2414write_registerEhh>

	// if setup is 0 or ff then there was no response from module
	return (setup != 0 && setup != 0xff);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <_ZN4RF245beginEv+0xcc>
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	d001      	beq.n	80014fc <_ZN4RF245beginEv+0xcc>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <_ZN4RF245beginEv+0xce>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	uint8_t cfg = read_register(NRF_CONFIG);
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fde7 	bl	80010e4 <_ZN4RF2413read_registerEh>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]

	// if not powered up then power up and wait for the radio to initialize
	if (!(cfg & _BV(PWR_UP)))
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10b      	bne.n	800153c <_ZN4RF247powerUpEv+0x36>
	{
		write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	2100      	movs	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fe31 	bl	8001198 <_ZN4RF2414write_registerEhh>

		// For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
		// There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
		// the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
		HAL_Delay(5);
 8001536:	2005      	movs	r0, #5
 8001538:	f000 fc78 	bl	8001e2c <HAL_Delay>
	}
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZN4RF249errNotifyEv>:

/******************************************************************/
#if defined (FAILURE_HANDLING)
void RF24::errNotify()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b09c      	sub	sp, #112	; 0x70
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
#if defined (SERIAL_DEBUG)
	char buffer[100];
	sprintf(buffer,PSTR("RF24 HARDWARE FAIL: Radio not responding, verify pin connections, wiring, etc.\r\n"));
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <_ZN4RF249errNotifyEv+0x44>)
 8001552:	4618      	mov	r0, r3
 8001554:	4611      	mov	r1, r2
 8001556:	2351      	movs	r3, #81	; 0x51
 8001558:	461a      	mov	r2, r3
 800155a:	f001 ffbb 	bl	80034d4 <memcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fdf4 	bl	8000150 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	f107 010c 	add.w	r1, r7, #12
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <_ZN4RF249errNotifyEv+0x48>)
 8001576:	f001 fe17 	bl	80031a8 <HAL_UART_Transmit>
#endif
#if defined (FAILURE_HANDLING)
	failureDetected = 1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	77da      	strb	r2, [r3, #31]
#else
	HAL_Delay(5000);
#endif
}
 8001580:	bf00      	nop
 8001582:	3770      	adds	r7, #112	; 0x70
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	0800403c 	.word	0x0800403c
 800158c:	20000128 	.word	0x20000128

08001590 <_ZN4RF245writeEPKvhb>:
#endif
/******************************************************************/

//Similar to the previous write, clears the interrupt flags
bool RF24::write(const void* buf, uint8_t len, const bool multicast)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af02      	add	r7, sp, #8
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	460b      	mov	r3, r1
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	4613      	mov	r3, r2
 80015a4:	71bb      	strb	r3, [r7, #6]
	//Start Writing
	startFastWrite(buf, len, multicast);
 80015a6:	79b9      	ldrb	r1, [r7, #6]
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	2301      	movs	r3, #1
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	460b      	mov	r3, r1
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f84e 	bl	8001654 <_ZN4RF2414startFastWriteEPKvhbb>

	//Wait until complete or failed
#if defined (FAILURE_HANDLING)
	uint32_t timer = HAL_GetTick();
 80015b8:	f000 fc32 	bl	8001e20 <HAL_GetTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	617b      	str	r3, [r7, #20]
#endif

	while (!(get_status() & ( _BV(TX_DS) | _BV(MAX_RT))))
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fee1 	bl	8001388 <_ZN4RF2410get_statusEv>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <_ZN4RF245writeEPKvhb+0x6c>
	{
#if defined (FAILURE_HANDLING)
		if (HAL_GetTick() - timer > 95)
 80015da:	f000 fc21 	bl	8001e20 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b5f      	cmp	r3, #95	; 0x5f
 80015e6:	bf8c      	ite	hi
 80015e8:	2301      	movhi	r3, #1
 80015ea:	2300      	movls	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0e6      	beq.n	80015c0 <_ZN4RF245writeEPKvhb+0x30>
		{
			errNotify();
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff ffa6 	bl	8001544 <_ZN4RF249errNotifyEv>
#if defined (FAILURE_HANDLING)
			return 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e015      	b.n	8001628 <_ZN4RF245writeEPKvhb+0x98>
#endif
		}
#endif
	}

	ce(LOW);
 80015fc:	2100      	movs	r1, #0
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7ff fd46 	bl	8001090 <_ZN4RF242ceE13GPIO_PinState>

	uint8_t status = write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 8001604:	2270      	movs	r2, #112	; 0x70
 8001606:	2107      	movs	r1, #7
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff fdc5 	bl	8001198 <_ZN4RF2414write_registerEhh>
 800160e:	4603      	mov	r3, r0
 8001610:	74fb      	strb	r3, [r7, #19]

	//Max retries exceeded
	if (status & _BV(MAX_RT))
 8001612:	7cfb      	ldrb	r3, [r7, #19]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <_ZN4RF245writeEPKvhb+0x96>
	{
		flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fe8a 	bl	8001336 <_ZN4RF248flush_txEv>
		return 0;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <_ZN4RF245writeEPKvhb+0x98>
	}
	//TX OK 1 or 0
	return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN4RF245writeEPKvh>:

bool RF24::write(const void* buf, uint8_t len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	4613      	mov	r3, r2
 800163c:	71fb      	strb	r3, [r7, #7]
	return write(buf, len, 0);
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	2300      	movs	r3, #0
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff ffa3 	bl	8001590 <_ZN4RF245writeEPKvhb>
 800164a:	4603      	mov	r3, r0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_ZN4RF2414startFastWriteEPKvhbb>:
//Per the documentation, we want to set PTX Mode when not listening. Then all we do is write data and set CE high
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data
void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	460b      	mov	r3, r1
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	4613      	mov	r3, r2
 8001668:	71bb      	strb	r3, [r7, #6]

	//write_payload( buf,len);
	write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <_ZN4RF2414startFastWriteEPKvhbb+0x20>
 8001670:	23b0      	movs	r3, #176	; 0xb0
 8001672:	e000      	b.n	8001676 <_ZN4RF2414startFastWriteEPKvhbb+0x22>
 8001674:	23a0      	movs	r3, #160	; 0xa0
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff fdd6 	bl	800122c <_ZN4RF2413write_payloadEPKvhh>
	if (startTx)
 8001680:	7e3b      	ldrb	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <_ZN4RF2414startFastWriteEPKvhbb+0x3a>
	{
		ce(HIGH);
 8001686:	2101      	movs	r1, #1
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fd01 	bl	8001090 <_ZN4RF242ceE13GPIO_PinState>
	}

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	e9c7 2300 	strd	r2, r3, [r7]
	// Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
	// expects it LSB first too, so we're good.

	write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	7f9b      	ldrb	r3, [r3, #30]
 80016a6:	463a      	mov	r2, r7
 80016a8:	210a      	movs	r1, #10
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fd42 	bl	8001134 <_ZN4RF2414write_registerEhPKhh>
	write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	7f9b      	ldrb	r3, [r3, #30]
 80016b4:	463a      	mov	r2, r7
 80016b6:	2110      	movs	r1, #16
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7ff fd3b 	bl	8001134 <_ZN4RF2414write_registerEhPKhh>

	//const uint8_t max_payload_size = 32;
	//write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
	write_register(RX_PW_P0, payload_size);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	7ddb      	ldrb	r3, [r3, #23]
 80016c2:	461a      	mov	r2, r3
 80016c4:	2111      	movs	r1, #17
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff fd66 	bl	8001198 <_ZN4RF2414write_registerEhh>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_ZN4RF2415toggle_featuresEv>:
}

/****************************************************************************/

void RF24::toggle_features(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t temp = ACTIVATE;
 80016dc:	2350      	movs	r3, #80	; 0x50
 80016de:	73fb      	strb	r3, [r7, #15]
	beginTransaction();
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fce7 	bl	80010b4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6918      	ldr	r0, [r3, #16]
 80016ea:	f107 010f 	add.w	r1, r7, #15
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	2201      	movs	r2, #1
 80016f4:	f001 f837 	bl	8002766 <HAL_SPI_Transmit>
	temp = 0x73;
 80016f8:	2373      	movs	r3, #115	; 0x73
 80016fa:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6918      	ldr	r0, [r3, #16]
 8001700:	f107 010f 	add.w	r1, r7, #15
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	2201      	movs	r2, #1
 800170a:	f001 f82c 	bl	8002766 <HAL_SPI_Transmit>
	endTransaction();
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fcdc 	bl	80010cc <_ZN4RF2414endTransactionEv>
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
	bool result = false;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 800172c:	2106      	movs	r1, #6
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fcd8 	bl	80010e4 <_ZN4RF2413read_registerEh>
 8001734:	4603      	mov	r3, r0
 8001736:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800173e:	73bb      	strb	r3, [r7, #14]

#if !defined(F_CPU) || F_CPU > 20000000
	txDelay = 250;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	22fa      	movs	r2, #250	; 0xfa
 8001744:	621a      	str	r2, [r3, #32]
#else //16Mhz Arduino
	txDelay=85;
#endif
	if (speed == RF24_250KBPS)
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d108      	bne.n	800175e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x42>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		setup |= _BV(RF_DR_LOW);
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	f043 0320 	orr.w	r3, r3, #32
 8001752:	73bb      	strb	r3, [r7, #14]
#if !defined(F_CPU) || F_CPU > 20000000
		txDelay = 450;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800175a:	621a      	str	r2, [r3, #32]
 800175c:	e009      	b.n	8001772 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS)
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
		{
			setup |= _BV(RF_DR_HIGH);
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	73bb      	strb	r3, [r7, #14]
#if !defined(F_CPU) || F_CPU > 20000000
			txDelay = 190;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	22be      	movs	r2, #190	; 0xbe
 8001770:	621a      	str	r2, [r3, #32]
#else //16Mhz Arduino
			txDelay=65;
#endif
		}
	}
	write_register(RF_SETUP, setup);
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	461a      	mov	r2, r3
 8001776:	2106      	movs	r1, #6
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fd0d 	bl	8001198 <_ZN4RF2414write_registerEhh>

	// Verify our result
	if (read_register(RF_SETUP) == setup)
 800177e:	2106      	movs	r1, #6
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fcaf 	bl	80010e4 <_ZN4RF2413read_registerEh>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	4293      	cmp	r3, r2
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x82>
	{
		result = true;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZN4RF2410setRetriesEhh>:
	write_register( NRF_CONFIG, disable);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
 80017b4:	4613      	mov	r3, r2
 80017b6:	70bb      	strb	r3, [r7, #2]
	write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	2104      	movs	r1, #4
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fce0 	bl	8001198 <_ZN4RF2414write_registerEhh>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08f      	sub	sp, #60	; 0x3c
 80017e4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017e6:	f000 fafd 	bl	8001de4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017ea:	f000 f83d 	bl	8001868 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017ee:	f000 f94f 	bl	8001a90 <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 80017f2:	f000 f889 	bl	8001908 <_ZL12MX_SPI1_Initv>
	MX_TIM2_Init();
 80017f6:	f000 f8c3 	bl	8001980 <_ZL12MX_TIM2_Initv>
	MX_USART1_UART_Init();
 80017fa:	f000 f91b 	bl	8001a34 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	RF24 radio(CE_GPIO_Port, CE_Pin, CSN_GPIO_Port, CSN_Pin, &hspi1);
 80017fe:	4638      	mov	r0, r7
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <main+0x78>)
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	2310      	movs	r3, #16
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <main+0x7c>)
 800180a:	2208      	movs	r2, #8
 800180c:	4913      	ldr	r1, [pc, #76]	; (800185c <main+0x7c>)
 800180e:	f7ff fdc8 	bl	80013a2 <_ZN4RF24C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>
	const uint64_t pipe = 0xE8E8F0F0E1LL;
 8001812:	a40f      	add	r4, pc, #60	; (adr r4, 8001850 <main+0x70>)
 8001814:	cc18      	ldmia	r4, {r3, r4}
 8001816:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	radio.begin();
 800181a:	463b      	mov	r3, r7
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe07 	bl	8001430 <_ZN4RF245beginEv>
	radio.openWritingPipe(pipe);
 8001822:	4639      	mov	r1, r7
 8001824:	a30a      	add	r3, pc, #40	; (adr r3, 8001850 <main+0x70>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	4608      	mov	r0, r1
 800182c:	f7ff ff33 	bl	8001696 <_ZN4RF2415openWritingPipeEy>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//		if (radio.available())
//			radio.read(data, 1);
		radio.write(data,1);
 8001830:	463b      	mov	r3, r7
 8001832:	2201      	movs	r2, #1
 8001834:	490a      	ldr	r1, [pc, #40]	; (8001860 <main+0x80>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fefa 	bl	8001630 <_ZN4RF245writeEPKvh>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800183c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <main+0x84>)
 8001842:	f000 fc9a 	bl	800217a <HAL_GPIO_TogglePin>
		//radio.printDetails();
		//radio.setDataRate(RF24_250KBPS);
		HAL_Delay(1000);
 8001846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184a:	f000 faef 	bl	8001e2c <HAL_Delay>
		radio.write(data,1);
 800184e:	e7ef      	b.n	8001830 <main+0x50>
 8001850:	e8f0f0e1 	.word	0xe8f0f0e1
 8001854:	000000e8 	.word	0x000000e8
 8001858:	20000090 	.word	0x20000090
 800185c:	40010800 	.word	0x40010800
 8001860:	20000000 	.word	0x20000000
 8001864:	40011000 	.word	0x40011000

08001868 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b090      	sub	sp, #64	; 0x40
 800186c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
	{ 0 };
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	2228      	movs	r2, #40	; 0x28
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fe37 	bl	80034ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
	{ 0 };
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800188e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001892:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001898:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189a:	2301      	movs	r3, #1
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80018a8:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80018ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fc66 	bl	8002184 <HAL_RCC_OscConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf14      	ite	ne
 80018be:	2301      	movne	r3, #1
 80018c0:	2300      	moveq	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <_Z18SystemClock_Configv+0x64>
	{
		Error_Handler();
 80018c8:	f000 f942 	bl	8001b50 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018cc:	230f      	movs	r3, #15
 80018ce:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d0:	2302      	movs	r3, #2
 80018d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2102      	movs	r1, #2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fe14 	bl	8002514 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <_Z18SystemClock_Configv+0x98>
	{
		Error_Handler();
 80018fc:	f000 f928 	bl	8001b50 <Error_Handler>
	}
}
 8001900:	bf00      	nop
 8001902:	3740      	adds	r7, #64	; 0x40
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 800190e:	4a1b      	ldr	r2, [pc, #108]	; (800197c <_ZL12MX_SPI1_Initv+0x74>)
 8001910:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 8001914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001918:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 8001934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001938:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 800193c:	2208      	movs	r2, #8
 800193e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 800194e:	2200      	movs	r2, #0
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 8001954:	220a      	movs	r2, #10
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001958:	4807      	ldr	r0, [pc, #28]	; (8001978 <_ZL12MX_SPI1_Initv+0x70>)
 800195a:	f001 f9bb 	bl	8002cd4 <HAL_SPI_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <_ZL12MX_SPI1_Initv+0x6a>
	{
		Error_Handler();
 800196e:	f000 f8ef 	bl	8001b50 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000090 	.word	0x20000090
 800197c:	40013000 	.word	0x40013000

08001980 <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
	{ 0 };
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig =
	{ 0 };
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 800199e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c2:	481b      	ldr	r0, [pc, #108]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80019c4:	f001 fab2 	bl	8002f2c <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <_ZL12MX_TIM2_Initv+0x5c>
	{
		Error_Handler();
 80019d8:	f000 f8ba 	bl	8001b50 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	4811      	ldr	r0, [pc, #68]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 80019ea:	f001 f9ae 	bl	8002d4a <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_ZL12MX_TIM2_Initv+0x82>
	{
		Error_Handler();
 80019fe:	f000 f8a7 	bl	8001b50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4808      	ldr	r0, [pc, #32]	; (8001a30 <_ZL12MX_TIM2_Initv+0xb0>)
 8001a10:	f001 faa6 	bl	8002f60 <HAL_TIMEx_MasterConfigSynchronization>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <_ZL12MX_TIM2_Initv+0xa8>
	{
		Error_Handler();
 8001a24:	f000 f894 	bl	8001b50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200000e8 	.word	0x200000e8

08001a34 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_ZL19MX_USART1_UART_Initv+0x58>)
 8001a3c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a6c:	f001 fb6e 	bl	800314c <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf14      	ite	ne
 8001a76:	2301      	movne	r3, #1
 8001a78:	2300      	moveq	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <_ZL19MX_USART1_UART_Initv+0x50>
	{
		Error_Handler();
 8001a80:	f000 f866 	bl	8001b50 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000128 	.word	0x20000128
 8001a8c:	40013800 	.word	0x40013800

08001a90 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
	{ 0 };
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001aa4:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f043 0320 	orr.w	r3, r3, #32
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <_ZL12MX_GPIO_Initv+0xb4>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	4815      	ldr	r0, [pc, #84]	; (8001b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8001af4:	f000 fb3c 	bl	8002170 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CE_Pin | CSN_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2118      	movs	r1, #24
 8001afc:	4813      	ldr	r0, [pc, #76]	; (8001b4c <_ZL12MX_GPIO_Initv+0xbc>)
 8001afe:	f000 fb37 	bl	8002170 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b06:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480b      	ldr	r0, [pc, #44]	; (8001b48 <_ZL12MX_GPIO_Initv+0xb8>)
 8001b1c:	f000 fa48 	bl	8001fb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ce_Pin csn_Pin */
	GPIO_InitStruct.Pin = CE_Pin | CSN_Pin;
 8001b20:	2318      	movs	r3, #24
 8001b22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <_ZL12MX_GPIO_Initv+0xbc>)
 8001b38:	f000 fa3a 	bl	8001fb0 <HAL_GPIO_Init>

}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40010800 	.word	0x40010800

08001b50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_MspInit+0x3c>)
{
 8001b5e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	f002 0201 	and.w	r2, r2, #1
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b78:	61da      	str	r2, [r3, #28]
 8001b7a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b86:	6853      	ldr	r3, [r2, #4]
 8001b88:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	b002      	add	sp, #8
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	2100      	movs	r1, #0
 8001baa:	a802      	add	r0, sp, #8
 8001bac:	f001 fc9d 	bl	80034ea <memset>
  if(hspi->Instance==SPI1)
 8001bb0:	6822      	ldr	r2, [r4, #0]
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_SPI_MspInit+0x7c>)
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d12e      	bne.n	8001c16 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001bbc:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bc4:	619a      	str	r2, [r3, #24]
 8001bc6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	4815      	ldr	r0, [pc, #84]	; (8001c20 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bce:	9200      	str	r2, [sp, #0]
 8001bd0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd4:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	f042 0204 	orr.w	r2, r2, #4
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001be6:	23a0      	movs	r3, #160	; 0xa0
 8001be8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f000 f9dd 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bf6:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	a902      	add	r1, sp, #8
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bfc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f000 f9d5 	bl	8001fb0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c06:	2023      	movs	r0, #35	; 0x23
 8001c08:	4622      	mov	r2, r4
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	f000 f932 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c10:	2023      	movs	r0, #35	; 0x23
 8001c12:	f000 f963 	bl	8001edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c16:	b006      	add	sp, #24
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40013000 	.word	0x40013000
 8001c20:	40010800 	.word	0x40010800

08001c24 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001c24:	6803      	ldr	r3, [r0, #0]
{
 8001c26:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d10a      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	61da      	str	r2, [r3, #28]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c44:	b002      	add	sp, #8
 8001c46:	4770      	bx	lr

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	2210      	movs	r2, #16
 8001c50:	2100      	movs	r1, #0
 8001c52:	a802      	add	r0, sp, #8
 8001c54:	f001 fc49 	bl	80034ea <memset>
  if(huart->Instance==USART1)
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d130      	bne.n	8001cc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c60:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c64:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	4816      	ldr	r0, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c72:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c76:	9200      	str	r2, [sp, #0]
 8001c78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	f042 0204 	orr.w	r2, r2, #4
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f000 f988 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	a902      	add	r1, sp, #8
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f000 f97f 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cb2:	2025      	movs	r0, #37	; 0x25
 8001cb4:	4622      	mov	r2, r4
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	f000 f8dc 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cbc:	2025      	movs	r0, #37	; 0x25
 8001cbe:	f000 f90d 	bl	8001edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cc2:	b006      	add	sp, #24
 8001cc4:	bd10      	pop	{r4, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <NMI_Handler>:
 8001cd0:	4770      	bx	lr

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler>

08001cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler>

08001cda <SVC_Handler>:
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f000 b892 	b.w	8001e08 <HAL_IncTick>

08001ce4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ce4:	4801      	ldr	r0, [pc, #4]	; (8001cec <SPI1_IRQHandler+0x8>)
 8001ce6:	f000 bf85 	b.w	8002bf4 <HAL_SPI_IRQHandler>
 8001cea:	bf00      	nop
 8001cec:	20000090 	.word	0x20000090

08001cf0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf0:	4801      	ldr	r0, [pc, #4]	; (8001cf8 <USART1_IRQHandler+0x8>)
 8001cf2:	f001 baf7 	b.w	80032e4 <HAL_UART_IRQHandler>
 8001cf6:	bf00      	nop
 8001cf8:	20000128 	.word	0x20000128

08001cfc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	4770      	bx	lr

08001d00 <_kill>:

int _kill(int pid, int sig)
{
 8001d00:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d02:	f001 fbbd 	bl	8003480 <__errno>
 8001d06:	2316      	movs	r3, #22
 8001d08:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0e:	bd08      	pop	{r3, pc}

08001d10 <_exit>:

void _exit (int status)
{
 8001d10:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d12:	f001 fbb5 	bl	8003480 <__errno>
 8001d16:	2316      	movs	r3, #22
 8001d18:	6003      	str	r3, [r0, #0]
 8001d1a:	e7fe      	b.n	8001d1a <_exit+0xa>

08001d1c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001d1c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <_sbrk+0x2c>)
{
 8001d20:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	b909      	cbnz	r1, 8001d2a <_sbrk+0xe>
		heap_end = &end;
 8001d26:	4909      	ldr	r1, [pc, #36]	; (8001d4c <_sbrk+0x30>)
 8001d28:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001d2a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001d2c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001d2e:	4402      	add	r2, r0
 8001d30:	428a      	cmp	r2, r1
 8001d32:	d906      	bls.n	8001d42 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d34:	f001 fba4 	bl	8003480 <__errno>
 8001d38:	230c      	movs	r3, #12
 8001d3a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001d42:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001d44:	bd08      	pop	{r3, pc}
 8001d46:	bf00      	nop
 8001d48:	20000168 	.word	0x20000168
 8001d4c:	2000017c 	.word	0x2000017c

08001d50 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <SystemInit+0x40>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <SystemInit+0x44>)
 8001d5e:	400a      	ands	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d74:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d7e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d82:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <SystemInit+0x48>)
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	f8ff0000 	.word	0xf8ff0000
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_InitTick+0x3c>)
{
 8001da0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da2:	7818      	ldrb	r0, [r3, #0]
 8001da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_InitTick+0x40>)
 8001dae:	6810      	ldr	r0, [r2, #0]
 8001db0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001db4:	f000 f89e 	bl	8001ef4 <HAL_SYSTICK_Config>
 8001db8:	4604      	mov	r4, r0
 8001dba:	b958      	cbnz	r0, 8001dd4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbc:	2d0f      	cmp	r5, #15
 8001dbe:	d809      	bhi.n	8001dd4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f854 	bl	8001e74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_InitTick+0x44>)
 8001dce:	4620      	mov	r0, r4
 8001dd0:	601d      	str	r5, [r3, #0]
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001dd4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	2000000c 	.word	0x2000000c

08001de4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_Init+0x20>)
{
 8001de6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df2:	f000 f82d 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff ffd0 	bl	8001d9c <HAL_InitTick>
  HAL_MspInit();
 8001dfc:	f7ff feae 	bl	8001b5c <HAL_MspInit>
}
 8001e00:	2000      	movs	r0, #0
 8001e02:	bd08      	pop	{r3, pc}
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x10>)
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_IncTick+0x14>)
 8001e0c:	6811      	ldr	r1, [r2, #0]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	440b      	add	r3, r1
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000174 	.word	0x20000174
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e20:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <HAL_GetTick+0x8>)
 8001e22:	6818      	ldr	r0, [r3, #0]
}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000174 	.word	0x20000174

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fff6 	bl	8001e20 <HAL_GetTick>
 8001e34:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001e38:	bf1e      	ittt	ne
 8001e3a:	4b04      	ldrne	r3, [pc, #16]	; (8001e4c <HAL_Delay+0x20>)
 8001e3c:	781b      	ldrbne	r3, [r3, #0]
 8001e3e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	1b40      	subs	r0, r0, r5
 8001e46:	4284      	cmp	r4, r0
 8001e48:	d8fa      	bhi.n	8001e40 <HAL_Delay+0x14>
  {
  }
}
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}
 8001e4c:	20000008 	.word	0x20000008

08001e50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e52:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001e6a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001e6c:	60d3      	str	r3, [r2, #12]
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b530      	push	{r4, r5, lr}
 8001e78:	68dc      	ldr	r4, [r3, #12]
 8001e7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	bf28      	it	cs
 8001e88:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e90:	bf98      	it	ls
 8001e92:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	fa05 f303 	lsl.w	r3, r5, r3
 8001e98:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9c:	bf88      	it	hi
 8001e9e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4019      	ands	r1, r3
 8001ea2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	fa05 f404 	lsl.w	r4, r5, r4
 8001ea8:	3c01      	subs	r4, #1
 8001eaa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001eac:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eae:	ea42 0201 	orr.w	r2, r2, r1
 8001eb2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	bfaf      	iteee	ge
 8001eb8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	4b06      	ldrlt	r3, [pc, #24]	; (8001ed8 <HAL_NVIC_SetPriority+0x64>)
 8001ebe:	f000 000f 	andlt.w	r0, r0, #15
 8001ec2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	bfa5      	ittet	ge
 8001ec6:	b2d2      	uxtbge	r2, r2
 8001ec8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001ed2:	bd30      	pop	{r4, r5, pc}
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	e000ed14 	.word	0xe000ed14

08001edc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001edc:	2301      	movs	r3, #1
 8001ede:	0942      	lsrs	r2, r0, #5
 8001ee0:	f000 001f 	and.w	r0, r0, #31
 8001ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ee8:	4b01      	ldr	r3, [pc, #4]	; (8001ef0 <HAL_NVIC_EnableIRQ+0x14>)
 8001eea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	3801      	subs	r0, #1
 8001ef6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001efa:	d20a      	bcs.n	8001f12 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f20:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001f24:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d003      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f32:	6803      	ldr	r3, [r0, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	f022 020e 	bic.w	r2, r2, #14
 8001f3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_DMA_Abort_IT+0x88>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01f      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x6a>
 8001f4a:	3214      	adds	r2, #20
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01e      	beq.n	8001f8e <HAL_DMA_Abort_IT+0x6e>
 8001f50:	3214      	adds	r2, #20
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01d      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x72>
 8001f56:	3214      	adds	r2, #20
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01d      	beq.n	8001f98 <HAL_DMA_Abort_IT+0x78>
 8001f5c:	3214      	adds	r2, #20
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01d      	beq.n	8001f9e <HAL_DMA_Abort_IT+0x7e>
 8001f62:	3214      	adds	r2, #20
 8001f64:	4293      	cmp	r3, r2
 8001f66:	bf0c      	ite	eq
 8001f68:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001f6c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f72:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f74:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001f7e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001f82:	b17b      	cbz	r3, 8001fa4 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8001f84:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f86:	4620      	mov	r0, r4
 8001f88:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e7f0      	b.n	8001f70 <HAL_DMA_Abort_IT+0x50>
 8001f8e:	2310      	movs	r3, #16
 8001f90:	e7ee      	b.n	8001f70 <HAL_DMA_Abort_IT+0x50>
 8001f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f96:	e7eb      	b.n	8001f70 <HAL_DMA_Abort_IT+0x50>
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	e7e8      	b.n	8001f70 <HAL_DMA_Abort_IT+0x50>
 8001f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa2:	e7e5      	b.n	8001f70 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	40020008 	.word	0x40020008
 8001fac:	40020000 	.word	0x40020000

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001fb4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	4616      	mov	r6, r2
 8001fb8:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fba:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002160 <HAL_GPIO_Init+0x1b0>
 8001fbe:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002164 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001fc2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001fc8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fcc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001fd0:	45a0      	cmp	r8, r4
 8001fd2:	d17f      	bne.n	80020d4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001fd4:	684d      	ldr	r5, [r1, #4]
 8001fd6:	2d12      	cmp	r5, #18
 8001fd8:	f000 80af 	beq.w	800213a <HAL_GPIO_Init+0x18a>
 8001fdc:	f200 8088 	bhi.w	80020f0 <HAL_GPIO_Init+0x140>
 8001fe0:	2d02      	cmp	r5, #2
 8001fe2:	f000 80a7 	beq.w	8002134 <HAL_GPIO_Init+0x184>
 8001fe6:	d87c      	bhi.n	80020e2 <HAL_GPIO_Init+0x132>
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	f000 808e 	beq.w	800210a <HAL_GPIO_Init+0x15a>
 8001fee:	2d01      	cmp	r5, #1
 8001ff0:	f000 809e 	beq.w	8002130 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff8:	2cff      	cmp	r4, #255	; 0xff
 8001ffa:	bf93      	iteet	ls
 8001ffc:	4682      	movls	sl, r0
 8001ffe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002002:	3d08      	subhi	r5, #8
 8002004:	f8d0 b000 	ldrls.w	fp, [r0]
 8002008:	bf92      	itee	ls
 800200a:	00b5      	lslls	r5, r6, #2
 800200c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002010:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002012:	fa09 f805 	lsl.w	r8, r9, r5
 8002016:	ea2b 0808 	bic.w	r8, fp, r8
 800201a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800201e:	bf88      	it	hi
 8002020:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002024:	ea48 0505 	orr.w	r5, r8, r5
 8002028:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002030:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002034:	d04e      	beq.n	80020d4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002036:	4d47      	ldr	r5, [pc, #284]	; (8002154 <HAL_GPIO_Init+0x1a4>)
 8002038:	4f46      	ldr	r7, [pc, #280]	; (8002154 <HAL_GPIO_Init+0x1a4>)
 800203a:	69ad      	ldr	r5, [r5, #24]
 800203c:	f026 0803 	bic.w	r8, r6, #3
 8002040:	f045 0501 	orr.w	r5, r5, #1
 8002044:	61bd      	str	r5, [r7, #24]
 8002046:	69bd      	ldr	r5, [r7, #24]
 8002048:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800204c:	f005 0501 	and.w	r5, r5, #1
 8002050:	9501      	str	r5, [sp, #4]
 8002052:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002056:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800205a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800205c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8002060:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002064:	fa09 f90b 	lsl.w	r9, r9, fp
 8002068:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206c:	4d3a      	ldr	r5, [pc, #232]	; (8002158 <HAL_GPIO_Init+0x1a8>)
 800206e:	42a8      	cmp	r0, r5
 8002070:	d068      	beq.n	8002144 <HAL_GPIO_Init+0x194>
 8002072:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002076:	42a8      	cmp	r0, r5
 8002078:	d066      	beq.n	8002148 <HAL_GPIO_Init+0x198>
 800207a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800207e:	42a8      	cmp	r0, r5
 8002080:	d064      	beq.n	800214c <HAL_GPIO_Init+0x19c>
 8002082:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002086:	42a8      	cmp	r0, r5
 8002088:	bf0c      	ite	eq
 800208a:	2503      	moveq	r5, #3
 800208c:	2504      	movne	r5, #4
 800208e:	fa05 f50b 	lsl.w	r5, r5, fp
 8002092:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8002096:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800209a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80020a0:	bf14      	ite	ne
 80020a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a4:	43a5      	biceq	r5, r4
 80020a6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020aa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80020ae:	bf14      	ite	ne
 80020b0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	43a5      	biceq	r5, r4
 80020b4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80020bc:	bf14      	ite	ne
 80020be:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020c0:	43a5      	biceq	r5, r4
 80020c2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ca:	bf14      	ite	ne
 80020cc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ce:	ea25 0404 	biceq.w	r4, r5, r4
 80020d2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80020d4:	3601      	adds	r6, #1
 80020d6:	2e10      	cmp	r6, #16
 80020d8:	f47f af73 	bne.w	8001fc2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80020dc:	b003      	add	sp, #12
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80020e2:	2d03      	cmp	r5, #3
 80020e4:	d022      	beq.n	800212c <HAL_GPIO_Init+0x17c>
 80020e6:	2d11      	cmp	r5, #17
 80020e8:	d184      	bne.n	8001ff4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020ea:	68ca      	ldr	r2, [r1, #12]
 80020ec:	3204      	adds	r2, #4
          break;
 80020ee:	e781      	b.n	8001ff4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80020f0:	4f1a      	ldr	r7, [pc, #104]	; (800215c <HAL_GPIO_Init+0x1ac>)
 80020f2:	42bd      	cmp	r5, r7
 80020f4:	d009      	beq.n	800210a <HAL_GPIO_Init+0x15a>
 80020f6:	d812      	bhi.n	800211e <HAL_GPIO_Init+0x16e>
 80020f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002168 <HAL_GPIO_Init+0x1b8>
 80020fc:	454d      	cmp	r5, r9
 80020fe:	d004      	beq.n	800210a <HAL_GPIO_Init+0x15a>
 8002100:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002104:	454d      	cmp	r5, r9
 8002106:	f47f af75 	bne.w	8001ff4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800210a:	688a      	ldr	r2, [r1, #8]
 800210c:	b1c2      	cbz	r2, 8002140 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800210e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002110:	bf0c      	ite	eq
 8002112:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002116:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800211a:	2208      	movs	r2, #8
 800211c:	e76a      	b.n	8001ff4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800211e:	4575      	cmp	r5, lr
 8002120:	d0f3      	beq.n	800210a <HAL_GPIO_Init+0x15a>
 8002122:	4565      	cmp	r5, ip
 8002124:	d0f1      	beq.n	800210a <HAL_GPIO_Init+0x15a>
 8002126:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800216c <HAL_GPIO_Init+0x1bc>
 800212a:	e7eb      	b.n	8002104 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800212c:	2200      	movs	r2, #0
 800212e:	e761      	b.n	8001ff4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002130:	68ca      	ldr	r2, [r1, #12]
          break;
 8002132:	e75f      	b.n	8001ff4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002134:	68ca      	ldr	r2, [r1, #12]
 8002136:	3208      	adds	r2, #8
          break;
 8002138:	e75c      	b.n	8001ff4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800213a:	68ca      	ldr	r2, [r1, #12]
 800213c:	320c      	adds	r2, #12
          break;
 800213e:	e759      	b.n	8001ff4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002140:	2204      	movs	r2, #4
 8002142:	e757      	b.n	8001ff4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002144:	2500      	movs	r5, #0
 8002146:	e7a2      	b.n	800208e <HAL_GPIO_Init+0xde>
 8002148:	2501      	movs	r5, #1
 800214a:	e7a0      	b.n	800208e <HAL_GPIO_Init+0xde>
 800214c:	2502      	movs	r5, #2
 800214e:	e79e      	b.n	800208e <HAL_GPIO_Init+0xde>
 8002150:	40010400 	.word	0x40010400
 8002154:	40021000 	.word	0x40021000
 8002158:	40010800 	.word	0x40010800
 800215c:	10210000 	.word	0x10210000
 8002160:	10310000 	.word	0x10310000
 8002164:	10320000 	.word	0x10320000
 8002168:	10110000 	.word	0x10110000
 800216c:	10220000 	.word	0x10220000

08002170 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	b10a      	cbz	r2, 8002176 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002172:	6101      	str	r1, [r0, #16]
 8002174:	4770      	bx	lr
 8002176:	0409      	lsls	r1, r1, #16
 8002178:	e7fb      	b.n	8002172 <HAL_GPIO_WritePin+0x2>

0800217a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800217a:	68c3      	ldr	r3, [r0, #12]
 800217c:	4059      	eors	r1, r3
 800217e:	60c1      	str	r1, [r0, #12]
 8002180:	4770      	bx	lr
	...

08002184 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002184:	6803      	ldr	r3, [r0, #0]
{
 8002186:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	07db      	lsls	r3, r3, #31
{
 800218c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	d410      	bmi.n	80021b2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002190:	682b      	ldr	r3, [r5, #0]
 8002192:	079f      	lsls	r7, r3, #30
 8002194:	d45e      	bmi.n	8002254 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	682b      	ldr	r3, [r5, #0]
 8002198:	0719      	lsls	r1, r3, #28
 800219a:	f100 8095 	bmi.w	80022c8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	075a      	lsls	r2, r3, #29
 80021a2:	f100 80bf 	bmi.w	8002324 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	69ea      	ldr	r2, [r5, #28]
 80021a8:	2a00      	cmp	r2, #0
 80021aa:	f040 812d 	bne.w	8002408 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80021ae:	2000      	movs	r0, #0
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021b2:	4c90      	ldr	r4, [pc, #576]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d007      	beq.n	80021ce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021be:	6863      	ldr	r3, [r4, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
 80021c8:	6863      	ldr	r3, [r4, #4]
 80021ca:	03de      	lsls	r6, r3, #15
 80021cc:	d509      	bpl.n	80021e2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	039c      	lsls	r4, r3, #14
 80021d2:	d5dd      	bpl.n	8002190 <HAL_RCC_OscConfig+0xc>
 80021d4:	686b      	ldr	r3, [r5, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1da      	bne.n	8002190 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80021da:	2001      	movs	r0, #1
}
 80021dc:	b002      	add	sp, #8
 80021de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	686b      	ldr	r3, [r5, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d110      	bne.n	800220c <HAL_RCC_OscConfig+0x88>
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021f2:	f7ff fe15 	bl	8001e20 <HAL_GetTick>
 80021f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	0398      	lsls	r0, r3, #14
 80021fc:	d4c8      	bmi.n	8002190 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fe:	f7ff fe0f 	bl	8001e20 <HAL_GetTick>
 8002202:	1b80      	subs	r0, r0, r6
 8002204:	2864      	cmp	r0, #100	; 0x64
 8002206:	d9f7      	bls.n	80021f8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002208:	2003      	movs	r0, #3
 800220a:	e7e7      	b.n	80021dc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220c:	b99b      	cbnz	r3, 8002236 <HAL_RCC_OscConfig+0xb2>
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800221e:	f7ff fdff 	bl	8001e20 <HAL_GetTick>
 8002222:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	0399      	lsls	r1, r3, #14
 8002228:	d5b2      	bpl.n	8002190 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222a:	f7ff fdf9 	bl	8001e20 <HAL_GetTick>
 800222e:	1b80      	subs	r0, r0, r6
 8002230:	2864      	cmp	r0, #100	; 0x64
 8002232:	d9f7      	bls.n	8002224 <HAL_RCC_OscConfig+0xa0>
 8002234:	e7e8      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	d103      	bne.n	8002246 <HAL_RCC_OscConfig+0xc2>
 800223e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002242:	6023      	str	r3, [r4, #0]
 8002244:	e7d1      	b.n	80021ea <HAL_RCC_OscConfig+0x66>
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6023      	str	r3, [r4, #0]
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002252:	e7cd      	b.n	80021f0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002254:	4c67      	ldr	r4, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 8002256:	6863      	ldr	r3, [r4, #4]
 8002258:	f013 0f0c 	tst.w	r3, #12
 800225c:	d007      	beq.n	800226e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225e:	6863      	ldr	r3, [r4, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d110      	bne.n	800228a <HAL_RCC_OscConfig+0x106>
 8002268:	6863      	ldr	r3, [r4, #4]
 800226a:	03da      	lsls	r2, r3, #15
 800226c:	d40d      	bmi.n	800228a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	079b      	lsls	r3, r3, #30
 8002272:	d502      	bpl.n	800227a <HAL_RCC_OscConfig+0xf6>
 8002274:	692b      	ldr	r3, [r5, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d1af      	bne.n	80021da <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	696a      	ldr	r2, [r5, #20]
 800227e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002282:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002286:	6023      	str	r3, [r4, #0]
 8002288:	e785      	b.n	8002196 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228a:	692a      	ldr	r2, [r5, #16]
 800228c:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 800228e:	b16a      	cbz	r2, 80022ac <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002294:	f7ff fdc4 	bl	8001e20 <HAL_GetTick>
 8002298:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	079f      	lsls	r7, r3, #30
 800229e:	d4ec      	bmi.n	800227a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fdbe 	bl	8001e20 <HAL_GetTick>
 80022a4:	1b80      	subs	r0, r0, r6
 80022a6:	2802      	cmp	r0, #2
 80022a8:	d9f7      	bls.n	800229a <HAL_RCC_OscConfig+0x116>
 80022aa:	e7ad      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80022ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022ae:	f7ff fdb7 	bl	8001e20 <HAL_GetTick>
 80022b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	0798      	lsls	r0, r3, #30
 80022b8:	f57f af6d 	bpl.w	8002196 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022bc:	f7ff fdb0 	bl	8001e20 <HAL_GetTick>
 80022c0:	1b80      	subs	r0, r0, r6
 80022c2:	2802      	cmp	r0, #2
 80022c4:	d9f6      	bls.n	80022b4 <HAL_RCC_OscConfig+0x130>
 80022c6:	e79f      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	69aa      	ldr	r2, [r5, #24]
 80022ca:	4c4a      	ldr	r4, [pc, #296]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x278>)
 80022ce:	b1da      	cbz	r2, 8002308 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022d4:	f7ff fda4 	bl	8001e20 <HAL_GetTick>
 80022d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022dc:	079b      	lsls	r3, r3, #30
 80022de:	d50d      	bpl.n	80022fc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022e4:	4b46      	ldr	r3, [pc, #280]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ec:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80022ee:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80022f0:	9b01      	ldr	r3, [sp, #4]
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	9201      	str	r2, [sp, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f9      	bne.n	80022ee <HAL_RCC_OscConfig+0x16a>
 80022fa:	e750      	b.n	800219e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff fd90 	bl	8001e20 <HAL_GetTick>
 8002300:	1b80      	subs	r0, r0, r6
 8002302:	2802      	cmp	r0, #2
 8002304:	d9e9      	bls.n	80022da <HAL_RCC_OscConfig+0x156>
 8002306:	e77f      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002308:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800230a:	f7ff fd89 	bl	8001e20 <HAL_GetTick>
 800230e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002312:	079f      	lsls	r7, r3, #30
 8002314:	f57f af43 	bpl.w	800219e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fd82 	bl	8001e20 <HAL_GetTick>
 800231c:	1b80      	subs	r0, r0, r6
 800231e:	2802      	cmp	r0, #2
 8002320:	d9f6      	bls.n	8002310 <HAL_RCC_OscConfig+0x18c>
 8002322:	e771      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002324:	4c33      	ldr	r4, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 8002326:	69e3      	ldr	r3, [r4, #28]
 8002328:	00d8      	lsls	r0, r3, #3
 800232a:	d424      	bmi.n	8002376 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800232c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	69e3      	ldr	r3, [r4, #28]
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	61e3      	str	r3, [r4, #28]
 8002336:	69e3      	ldr	r3, [r4, #28]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4e30      	ldr	r6, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0x280>)
 8002342:	6833      	ldr	r3, [r6, #0]
 8002344:	05d9      	lsls	r1, r3, #23
 8002346:	d518      	bpl.n	800237a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	68eb      	ldr	r3, [r5, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d126      	bne.n	800239c <HAL_RCC_OscConfig+0x218>
 800234e:	6a23      	ldr	r3, [r4, #32]
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002356:	f7ff fd63 	bl	8001e20 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800235e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	6a23      	ldr	r3, [r4, #32]
 8002362:	079b      	lsls	r3, r3, #30
 8002364:	d53f      	bpl.n	80023e6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002366:	2f00      	cmp	r7, #0
 8002368:	f43f af1d 	beq.w	80021a6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	69e3      	ldr	r3, [r4, #28]
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	61e3      	str	r3, [r4, #28]
 8002374:	e717      	b.n	80021a6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2700      	movs	r7, #0
 8002378:	e7e2      	b.n	8002340 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	6833      	ldr	r3, [r6, #0]
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002382:	f7ff fd4d 	bl	8001e20 <HAL_GetTick>
 8002386:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	6833      	ldr	r3, [r6, #0]
 800238a:	05da      	lsls	r2, r3, #23
 800238c:	d4dc      	bmi.n	8002348 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7ff fd47 	bl	8001e20 <HAL_GetTick>
 8002392:	eba0 0008 	sub.w	r0, r0, r8
 8002396:	2864      	cmp	r0, #100	; 0x64
 8002398:	d9f6      	bls.n	8002388 <HAL_RCC_OscConfig+0x204>
 800239a:	e735      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	b9ab      	cbnz	r3, 80023ca <HAL_RCC_OscConfig+0x246>
 800239e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6223      	str	r3, [r4, #32]
 80023aa:	6a23      	ldr	r3, [r4, #32]
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80023b2:	f7ff fd35 	bl	8001e20 <HAL_GetTick>
 80023b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	6a23      	ldr	r3, [r4, #32]
 80023ba:	0798      	lsls	r0, r3, #30
 80023bc:	d5d3      	bpl.n	8002366 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7ff fd2f 	bl	8001e20 <HAL_GetTick>
 80023c2:	1b80      	subs	r0, r0, r6
 80023c4:	4540      	cmp	r0, r8
 80023c6:	d9f7      	bls.n	80023b8 <HAL_RCC_OscConfig+0x234>
 80023c8:	e71e      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	6a23      	ldr	r3, [r4, #32]
 80023ce:	d103      	bne.n	80023d8 <HAL_RCC_OscConfig+0x254>
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6223      	str	r3, [r4, #32]
 80023d6:	e7ba      	b.n	800234e <HAL_RCC_OscConfig+0x1ca>
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6223      	str	r3, [r4, #32]
 80023de:	6a23      	ldr	r3, [r4, #32]
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	e7b6      	b.n	8002354 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff fd1b 	bl	8001e20 <HAL_GetTick>
 80023ea:	eba0 0008 	sub.w	r0, r0, r8
 80023ee:	42b0      	cmp	r0, r6
 80023f0:	d9b6      	bls.n	8002360 <HAL_RCC_OscConfig+0x1dc>
 80023f2:	e709      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	42420000 	.word	0x42420000
 80023fc:	42420480 	.word	0x42420480
 8002400:	20000004 	.word	0x20000004
 8002404:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	4c22      	ldr	r4, [pc, #136]	; (8002494 <HAL_RCC_OscConfig+0x310>)
 800240a:	6863      	ldr	r3, [r4, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	f43f aee2 	beq.w	80021da <HAL_RCC_OscConfig+0x56>
 8002416:	2300      	movs	r3, #0
 8002418:	4e1f      	ldr	r6, [pc, #124]	; (8002498 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800241c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241e:	d12b      	bne.n	8002478 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002420:	f7ff fcfe 	bl	8001e20 <HAL_GetTick>
 8002424:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	0199      	lsls	r1, r3, #6
 800242a:	d41f      	bmi.n	800246c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800242c:	6a2b      	ldr	r3, [r5, #32]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002434:	6862      	ldr	r2, [r4, #4]
 8002436:	68a9      	ldr	r1, [r5, #8]
 8002438:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800243c:	430a      	orrs	r2, r1
 800243e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002442:	6862      	ldr	r2, [r4, #4]
 8002444:	430b      	orrs	r3, r1
 8002446:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800244a:	4313      	orrs	r3, r2
 800244c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800244e:	2301      	movs	r3, #1
 8002450:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002452:	f7ff fce5 	bl	8001e20 <HAL_GetTick>
 8002456:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	019a      	lsls	r2, r3, #6
 800245c:	f53f aea7 	bmi.w	80021ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff fcde 	bl	8001e20 <HAL_GetTick>
 8002464:	1b40      	subs	r0, r0, r5
 8002466:	2802      	cmp	r0, #2
 8002468:	d9f6      	bls.n	8002458 <HAL_RCC_OscConfig+0x2d4>
 800246a:	e6cd      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff fcd8 	bl	8001e20 <HAL_GetTick>
 8002470:	1bc0      	subs	r0, r0, r7
 8002472:	2802      	cmp	r0, #2
 8002474:	d9d7      	bls.n	8002426 <HAL_RCC_OscConfig+0x2a2>
 8002476:	e6c7      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002478:	f7ff fcd2 	bl	8001e20 <HAL_GetTick>
 800247c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	019b      	lsls	r3, r3, #6
 8002482:	f57f ae94 	bpl.w	80021ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff fccb 	bl	8001e20 <HAL_GetTick>
 800248a:	1b40      	subs	r0, r0, r5
 800248c:	2802      	cmp	r0, #2
 800248e:	d9f6      	bls.n	800247e <HAL_RCC_OscConfig+0x2fa>
 8002490:	e6ba      	b.n	8002208 <HAL_RCC_OscConfig+0x84>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	42420060 	.word	0x42420060

0800249c <HAL_RCC_GetSysClockFreq>:
{
 800249c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80024a0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024a2:	ac02      	add	r4, sp, #8
 80024a4:	f103 0510 	add.w	r5, r3, #16
 80024a8:	4622      	mov	r2, r4
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	3308      	adds	r3, #8
 80024b0:	c203      	stmia	r2!, {r0, r1}
 80024b2:	42ab      	cmp	r3, r5
 80024b4:	4614      	mov	r4, r2
 80024b6:	d1f7      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024b8:	2301      	movs	r3, #1
 80024ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80024be:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80024c0:	4911      	ldr	r1, [pc, #68]	; (8002508 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024c2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80024c6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80024c8:	f003 020c 	and.w	r2, r3, #12
 80024cc:	2a08      	cmp	r2, #8
 80024ce:	d117      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024d0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80024d4:	a806      	add	r0, sp, #24
 80024d6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024da:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024de:	d50c      	bpl.n	80024fa <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024e2:	480a      	ldr	r0, [pc, #40]	; (800250c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024e8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ea:	aa06      	add	r2, sp, #24
 80024ec:	4413      	add	r3, r2
 80024ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80024f6:	b007      	add	sp, #28
 80024f8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024fa:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_RCC_GetSysClockFreq+0x74>)
 80024fc:	4350      	muls	r0, r2
 80024fe:	e7fa      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002502:	e7f8      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x5a>
 8002504:	080040ad 	.word	0x080040ad
 8002508:	40021000 	.word	0x40021000
 800250c:	007a1200 	.word	0x007a1200
 8002510:	003d0900 	.word	0x003d0900

08002514 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002514:	4a54      	ldr	r2, [pc, #336]	; (8002668 <HAL_RCC_ClockConfig+0x154>)
{
 8002516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800251a:	6813      	ldr	r3, [r2, #0]
{
 800251c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	428b      	cmp	r3, r1
{
 8002524:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002526:	d32a      	bcc.n	800257e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	6829      	ldr	r1, [r5, #0]
 800252a:	078c      	lsls	r4, r1, #30
 800252c:	d434      	bmi.n	8002598 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	07ca      	lsls	r2, r1, #31
 8002530:	d447      	bmi.n	80025c2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002532:	4a4d      	ldr	r2, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x154>)
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	429e      	cmp	r6, r3
 800253c:	f0c0 8082 	bcc.w	8002644 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	682a      	ldr	r2, [r5, #0]
 8002542:	4c4a      	ldr	r4, [pc, #296]	; (800266c <HAL_RCC_ClockConfig+0x158>)
 8002544:	f012 0f04 	tst.w	r2, #4
 8002548:	f040 8087 	bne.w	800265a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	0713      	lsls	r3, r2, #28
 800254e:	d506      	bpl.n	800255e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002550:	6863      	ldr	r3, [r4, #4]
 8002552:	692a      	ldr	r2, [r5, #16]
 8002554:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002558:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800255c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800255e:	f7ff ff9d 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8002562:	6863      	ldr	r3, [r4, #4]
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_RCC_ClockConfig+0x15c>)
 8002566:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	40d8      	lsrs	r0, r3
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_ClockConfig+0x160>)
 8002570:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002572:	2000      	movs	r0, #0
 8002574:	f7ff fc12 	bl	8001d9c <HAL_InitTick>
  return HAL_OK;
 8002578:	2000      	movs	r0, #0
}
 800257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	6813      	ldr	r3, [r2, #0]
 8002580:	f023 0307 	bic.w	r3, r3, #7
 8002584:	430b      	orrs	r3, r1
 8002586:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002588:	6813      	ldr	r3, [r2, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	4299      	cmp	r1, r3
 8002590:	d0ca      	beq.n	8002528 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002592:	2001      	movs	r0, #1
 8002594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259e:	bf1e      	ittt	ne
 80025a0:	685a      	ldrne	r2, [r3, #4]
 80025a2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80025a6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025aa:	bf42      	ittt	mi
 80025ac:	685a      	ldrmi	r2, [r3, #4]
 80025ae:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80025b2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	68a8      	ldr	r0, [r5, #8]
 80025b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025bc:	4302      	orrs	r2, r0
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	e7b5      	b.n	800252e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	686a      	ldr	r2, [r5, #4]
 80025c4:	4c29      	ldr	r4, [pc, #164]	; (800266c <HAL_RCC_ClockConfig+0x158>)
 80025c6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	d11c      	bne.n	8002606 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	d0df      	beq.n	8002592 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d8:	f023 0303 	bic.w	r3, r3, #3
 80025dc:	4313      	orrs	r3, r2
 80025de:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80025e0:	f7ff fc1e 	bl	8001e20 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80025e6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d114      	bne.n	8002616 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ec:	6863      	ldr	r3, [r4, #4]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d09d      	beq.n	8002532 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7ff fc13 	bl	8001e20 <HAL_GetTick>
 80025fa:	1bc0      	subs	r0, r0, r7
 80025fc:	4540      	cmp	r0, r8
 80025fe:	d9f5      	bls.n	80025ec <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002600:	2003      	movs	r0, #3
 8002602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	2a02      	cmp	r2, #2
 8002608:	d102      	bne.n	8002610 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800260e:	e7df      	b.n	80025d0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	f013 0f02 	tst.w	r3, #2
 8002614:	e7dc      	b.n	80025d0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002616:	2b02      	cmp	r3, #2
 8002618:	d10f      	bne.n	800263a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d086      	beq.n	8002532 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7ff fbfc 	bl	8001e20 <HAL_GetTick>
 8002628:	1bc0      	subs	r0, r0, r7
 800262a:	4540      	cmp	r0, r8
 800262c:	d9f5      	bls.n	800261a <HAL_RCC_ClockConfig+0x106>
 800262e:	e7e7      	b.n	8002600 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7ff fbf6 	bl	8001e20 <HAL_GetTick>
 8002634:	1bc0      	subs	r0, r0, r7
 8002636:	4540      	cmp	r0, r8
 8002638:	d8e2      	bhi.n	8002600 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800263a:	6863      	ldr	r3, [r4, #4]
 800263c:	f013 0f0c 	tst.w	r3, #12
 8002640:	d1f6      	bne.n	8002630 <HAL_RCC_ClockConfig+0x11c>
 8002642:	e776      	b.n	8002532 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	f023 0307 	bic.w	r3, r3, #7
 800264a:	4333      	orrs	r3, r6
 800264c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800264e:	6813      	ldr	r3, [r2, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	429e      	cmp	r6, r3
 8002656:	d19c      	bne.n	8002592 <HAL_RCC_ClockConfig+0x7e>
 8002658:	e772      	b.n	8002540 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	68e9      	ldr	r1, [r5, #12]
 800265e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002662:	430b      	orrs	r3, r1
 8002664:	6063      	str	r3, [r4, #4]
 8002666:	e771      	b.n	800254c <HAL_RCC_ClockConfig+0x38>
 8002668:	40022000 	.word	0x40022000
 800266c:	40021000 	.word	0x40021000
 8002670:	080040bd 	.word	0x080040bd
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_RCC_GetPCLK1Freq+0x14>)
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x18>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	4a03      	ldr	r2, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002686:	6810      	ldr	r0, [r2, #0]
}    
 8002688:	40d8      	lsrs	r0, r3
 800268a:	4770      	bx	lr
 800268c:	40021000 	.word	0x40021000
 8002690:	080040cd 	.word	0x080040cd
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x14>)
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026a6:	6810      	ldr	r0, [r2, #0]
} 
 80026a8:	40d8      	lsrs	r0, r3
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000
 80026b0:	080040cd 	.word	0x080040cd
 80026b4:	20000004 	.word	0x20000004

080026b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026bc:	4604      	mov	r4, r0
 80026be:	4688      	mov	r8, r1
 80026c0:	4617      	mov	r7, r2
 80026c2:	461d      	mov	r5, r3
 80026c4:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	6893      	ldr	r3, [r2, #8]
 80026ca:	ea38 0303 	bics.w	r3, r8, r3
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	429f      	cmp	r7, r3
 80026d6:	d102      	bne.n	80026de <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80026d8:	2000      	movs	r0, #0
}
 80026da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80026de:	1c6b      	adds	r3, r5, #1
 80026e0:	d0f2      	beq.n	80026c8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80026e2:	bb55      	cbnz	r5, 800273a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026ec:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ee:	6862      	ldr	r2, [r4, #4]
 80026f0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80026f4:	d10a      	bne.n	800270c <SPI_WaitFlagStateUntilTimeout+0x54>
 80026f6:	68a2      	ldr	r2, [r4, #8]
 80026f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80026fc:	d002      	beq.n	8002704 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80026fe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002702:	d103      	bne.n	800270c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800270a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800270c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800270e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002712:	d109      	bne.n	8002728 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800271a:	0412      	lsls	r2, r2, #16
 800271c:	0c12      	lsrs	r2, r2, #16
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002726:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8002728:	2301      	movs	r3, #1
 800272a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800272e:	2300      	movs	r3, #0
 8002730:	2003      	movs	r0, #3
 8002732:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800273a:	f7ff fb71 	bl	8001e20 <HAL_GetTick>
 800273e:	1b80      	subs	r0, r0, r6
 8002740:	4285      	cmp	r5, r0
 8002742:	d8c0      	bhi.n	80026c6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8002744:	e7ce      	b.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x2c>

08002746 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002746:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002748:	460b      	mov	r3, r1
 800274a:	9200      	str	r2, [sp, #0]
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	2200      	movs	r2, #0
{
 8002750:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002752:	f7ff ffb1 	bl	80026b8 <SPI_WaitFlagStateUntilTimeout>
 8002756:	b120      	cbz	r0, 8002762 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002758:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800275a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800275c:	f043 0320 	orr.w	r3, r3, #32
 8002760:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002762:	b002      	add	sp, #8
 8002764:	bd10      	pop	{r4, pc}

08002766 <HAL_SPI_Transmit>:
{
 8002766:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800276a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800276c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002770:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002772:	2b01      	cmp	r3, #1
{
 8002774:	460d      	mov	r5, r1
 8002776:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002778:	f000 809c 	beq.w	80028b4 <HAL_SPI_Transmit+0x14e>
 800277c:	2301      	movs	r3, #1
 800277e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002782:	f7ff fb4d 	bl	8001e20 <HAL_GetTick>
 8002786:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002788:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800278c:	b2c0      	uxtb	r0, r0
 800278e:	2801      	cmp	r0, #1
 8002790:	f040 808e 	bne.w	80028b0 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8002794:	2d00      	cmp	r5, #0
 8002796:	d04e      	beq.n	8002836 <HAL_SPI_Transmit+0xd0>
 8002798:	f1b8 0f00 	cmp.w	r8, #0
 800279c:	d04b      	beq.n	8002836 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800279e:	2303      	movs	r3, #3
 80027a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027a8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027aa:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80027ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027b2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027b4:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b6:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027b8:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027be:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80027c0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80027c4:	bf02      	ittt	eq
 80027c6:	681a      	ldreq	r2, [r3, #0]
 80027c8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80027cc:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80027d2:	bf5e      	ittt	pl
 80027d4:	681a      	ldrpl	r2, [r3, #0]
 80027d6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80027da:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027dc:	68e2      	ldr	r2, [r4, #12]
 80027de:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80027e2:	6862      	ldr	r2, [r4, #4]
 80027e4:	d138      	bne.n	8002858 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80027e6:	b11a      	cbz	r2, 80027f0 <HAL_SPI_Transmit+0x8a>
 80027e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80027ea:	b292      	uxth	r2, r2
 80027ec:	2a01      	cmp	r2, #1
 80027ee:	d106      	bne.n	80027fe <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 80027f0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80027f4:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 80027f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80027fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002800:	b29b      	uxth	r3, r3
 8002802:	b993      	cbnz	r3, 800282a <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002804:	9700      	str	r7, [sp, #0]
 8002806:	4633      	mov	r3, r6
 8002808:	2201      	movs	r2, #1
 800280a:	2102      	movs	r1, #2
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff ff53 	bl	80026b8 <SPI_WaitFlagStateUntilTimeout>
 8002812:	b978      	cbnz	r0, 8002834 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002814:	463a      	mov	r2, r7
 8002816:	4631      	mov	r1, r6
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff ff94 	bl	8002746 <SPI_CheckFlag_BSY>
 800281e:	2800      	cmp	r0, #0
 8002820:	d038      	beq.n	8002894 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002822:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002824:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002826:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8002828:	e005      	b.n	8002836 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	0790      	lsls	r0, r2, #30
 8002830:	d4de      	bmi.n	80027f0 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002832:	b94e      	cbnz	r6, 8002848 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8002834:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002836:	2301      	movs	r3, #1
 8002838:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800283c:	2300      	movs	r3, #0
 800283e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002842:	b004      	add	sp, #16
 8002844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002848:	1c71      	adds	r1, r6, #1
 800284a:	d0d8      	beq.n	80027fe <HAL_SPI_Transmit+0x98>
 800284c:	f7ff fae8 	bl	8001e20 <HAL_GetTick>
 8002850:	1bc0      	subs	r0, r0, r7
 8002852:	4286      	cmp	r6, r0
 8002854:	d8d3      	bhi.n	80027fe <HAL_SPI_Transmit+0x98>
 8002856:	e7ed      	b.n	8002834 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002858:	b11a      	cbz	r2, 8002862 <HAL_SPI_Transmit+0xfc>
 800285a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800285c:	b292      	uxth	r2, r2
 800285e:	2a01      	cmp	r2, #1
 8002860:	d106      	bne.n	8002870 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002862:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002866:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002868:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800286a:	3b01      	subs	r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002870:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0c5      	beq.n	8002804 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	0792      	lsls	r2, r2, #30
 800287e:	d4f0      	bmi.n	8002862 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002880:	2e00      	cmp	r6, #0
 8002882:	d0d7      	beq.n	8002834 <HAL_SPI_Transmit+0xce>
 8002884:	1c73      	adds	r3, r6, #1
 8002886:	d0f3      	beq.n	8002870 <HAL_SPI_Transmit+0x10a>
 8002888:	f7ff faca 	bl	8001e20 <HAL_GetTick>
 800288c:	1bc0      	subs	r0, r0, r7
 800288e:	4286      	cmp	r6, r0
 8002890:	d8ee      	bhi.n	8002870 <HAL_SPI_Transmit+0x10a>
 8002892:	e7cf      	b.n	8002834 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002894:	68a3      	ldr	r3, [r4, #8]
 8002896:	b933      	cbnz	r3, 80028a6 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002898:	9303      	str	r3, [sp, #12]
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	9203      	str	r2, [sp, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	9303      	str	r3, [sp, #12]
 80028a4:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80028a8:	3000      	adds	r0, #0
 80028aa:	bf18      	it	ne
 80028ac:	2001      	movne	r0, #1
 80028ae:	e7c2      	b.n	8002836 <HAL_SPI_Transmit+0xd0>
 80028b0:	2002      	movs	r0, #2
 80028b2:	e7c0      	b.n	8002836 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 80028b4:	2002      	movs	r0, #2
 80028b6:	e7c4      	b.n	8002842 <HAL_SPI_Transmit+0xdc>

080028b8 <HAL_SPI_TransmitReceive>:
{
 80028b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028bc:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80028be:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80028c2:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80028c4:	2b01      	cmp	r3, #1
{
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	4616      	mov	r6, r2
 80028cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80028ce:	f000 80ee 	beq.w	8002aae <HAL_SPI_TransmitReceive+0x1f6>
 80028d2:	2301      	movs	r3, #1
 80028d4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80028d8:	f7ff faa2 	bl	8001e20 <HAL_GetTick>
  tmp  = hspi->State;
 80028dc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80028e0:	4680      	mov	r8, r0
  tmp  = hspi->State;
 80028e2:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80028e4:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 80028e6:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80028e8:	d00a      	beq.n	8002900 <HAL_SPI_TransmitReceive+0x48>
 80028ea:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80028ee:	f040 80dc 	bne.w	8002aaa <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80028f2:	68a2      	ldr	r2, [r4, #8]
 80028f4:	2a00      	cmp	r2, #0
 80028f6:	f040 80d8 	bne.w	8002aaa <HAL_SPI_TransmitReceive+0x1f2>
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	f040 80d5 	bne.w	8002aaa <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002900:	2d00      	cmp	r5, #0
 8002902:	d04e      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0xea>
 8002904:	2e00      	cmp	r6, #0
 8002906:	d04c      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0xea>
 8002908:	f1b9 0f00 	cmp.w	r9, #0
 800290c:	d049      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 800290e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002912:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8002914:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002916:	bf04      	itt	eq
 8002918:	2305      	moveq	r3, #5
 800291a:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800291e:	2300      	movs	r3, #0
 8002920:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002922:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002924:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002926:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002928:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800292c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002930:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002932:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002936:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002938:	bf58      	it	pl
 800293a:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800293c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800293e:	bf58      	it	pl
 8002940:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002944:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002948:	bf58      	it	pl
 800294a:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800294c:	68e2      	ldr	r2, [r4, #12]
 800294e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002952:	d15d      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002954:	b119      	cbz	r1, 800295e <HAL_SPI_TransmitReceive+0xa6>
 8002956:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002958:	b292      	uxth	r2, r2
 800295a:	2a01      	cmp	r2, #1
 800295c:	d106      	bne.n	800296c <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800295e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002962:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002964:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800296c:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002970:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002972:	b29b      	uxth	r3, r3
 8002974:	b9bb      	cbnz	r3, 80029a6 <HAL_SPI_TransmitReceive+0xee>
 8002976:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	b9a3      	cbnz	r3, 80029a6 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800297c:	f8cd 8000 	str.w	r8, [sp]
 8002980:	463b      	mov	r3, r7
 8002982:	2201      	movs	r2, #1
 8002984:	2102      	movs	r1, #2
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff fe96 	bl	80026b8 <SPI_WaitFlagStateUntilTimeout>
 800298c:	2800      	cmp	r0, #0
 800298e:	d135      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002990:	4642      	mov	r2, r8
 8002992:	4639      	mov	r1, r7
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fed6 	bl	8002746 <SPI_CheckFlag_BSY>
 800299a:	2800      	cmp	r0, #0
 800299c:	d07a      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800299e:	2320      	movs	r3, #32
 80029a0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
 80029a4:	e02b      	b.n	80029fe <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80029a6:	f1b9 0f00 	cmp.w	r9, #0
 80029aa:	d00f      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x114>
 80029ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b163      	cbz	r3, 80029cc <HAL_SPI_TransmitReceive+0x114>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	0791      	lsls	r1, r2, #30
 80029b8:	d508      	bpl.n	80029cc <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 80029ba:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80029be:	f835 2b02 	ldrh.w	r2, [r5], #2
 80029c2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80029c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80029cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b163      	cbz	r3, 80029ec <HAL_SPI_TransmitReceive+0x134>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	07d2      	lsls	r2, r2, #31
 80029d8:	d508      	bpl.n	80029ec <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 80029da:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80029e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80029ec:	1c78      	adds	r0, r7, #1
 80029ee:	d0bf      	beq.n	8002970 <HAL_SPI_TransmitReceive+0xb8>
 80029f0:	f7ff fa16 	bl	8001e20 <HAL_GetTick>
 80029f4:	eba0 0008 	sub.w	r0, r0, r8
 80029f8:	4287      	cmp	r7, r0
 80029fa:	d8b9      	bhi.n	8002970 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80029fc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a04:	2300      	movs	r3, #0
 8002a06:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002a0a:	b005      	add	sp, #20
 8002a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002a10:	b119      	cbz	r1, 8002a1a <HAL_SPI_TransmitReceive+0x162>
 8002a12:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002a14:	b292      	uxth	r2, r2
 8002a16:	2a01      	cmp	r2, #1
 8002a18:	d106      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002a1a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002a1e:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8002a20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002a28:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	b91b      	cbnz	r3, 8002a3a <HAL_SPI_TransmitReceive+0x182>
 8002a32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0a0      	beq.n	800297c <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002a3a:	f1b9 0f00 	cmp.w	r9, #0
 8002a3e:	d00f      	beq.n	8002a60 <HAL_SPI_TransmitReceive+0x1a8>
 8002a40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b163      	cbz	r3, 8002a60 <HAL_SPI_TransmitReceive+0x1a8>
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	0791      	lsls	r1, r2, #30
 8002a4c:	d508      	bpl.n	8002a60 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8002a4e:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002a52:	782a      	ldrb	r2, [r5, #0]
 8002a54:	3501      	adds	r5, #1
 8002a56:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002a60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b16b      	cbz	r3, 8002a82 <HAL_SPI_TransmitReceive+0x1ca>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	07d2      	lsls	r2, r2, #31
 8002a6c:	d509      	bpl.n	8002a82 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8002a6e:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	3601      	adds	r6, #1
 8002a76:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8002a7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002a82:	1c7b      	adds	r3, r7, #1
 8002a84:	d0d2      	beq.n	8002a2c <HAL_SPI_TransmitReceive+0x174>
 8002a86:	f7ff f9cb 	bl	8001e20 <HAL_GetTick>
 8002a8a:	eba0 0008 	sub.w	r0, r0, r8
 8002a8e:	4287      	cmp	r7, r0
 8002a90:	d8cc      	bhi.n	8002a2c <HAL_SPI_TransmitReceive+0x174>
 8002a92:	e7b3      	b.n	80029fc <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a94:	68a3      	ldr	r3, [r4, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1b1      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	9003      	str	r0, [sp, #12]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	9203      	str	r2, [sp, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	9303      	str	r3, [sp, #12]
 8002aa6:	9b03      	ldr	r3, [sp, #12]
 8002aa8:	e7a9      	b.n	80029fe <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8002aaa:	2002      	movs	r0, #2
 8002aac:	e7a7      	b.n	80029fe <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8002aae:	2002      	movs	r0, #2
 8002ab0:	e7ab      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x152>

08002ab2 <HAL_SPI_Receive>:
{
 8002ab2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002ab6:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ab8:	6843      	ldr	r3, [r0, #4]
{
 8002aba:	4604      	mov	r4, r0
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002ac0:	460d      	mov	r5, r1
 8002ac2:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_SPI_Receive+0x2e>
 8002ac6:	6883      	ldr	r3, [r0, #8]
 8002ac8:	b953      	cbnz	r3, 8002ae0 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002aca:	2304      	movs	r3, #4
 8002acc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	9600      	str	r6, [sp, #0]
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	f7ff feef 	bl	80028b8 <HAL_SPI_TransmitReceive>
}
 8002ada:	b002      	add	sp, #8
 8002adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002ae0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f000 8081 	beq.w	8002bec <HAL_SPI_Receive+0x13a>
 8002aea:	2301      	movs	r3, #1
 8002aec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002af0:	f7ff f996 	bl	8001e20 <HAL_GetTick>
 8002af4:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002af6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002afa:	b2c0      	uxtb	r0, r0
 8002afc:	2801      	cmp	r0, #1
 8002afe:	d173      	bne.n	8002be8 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0U))
 8002b00:	2d00      	cmp	r5, #0
 8002b02:	d058      	beq.n	8002bb6 <HAL_SPI_Receive+0x104>
 8002b04:	f1b8 0f00 	cmp.w	r8, #0
 8002b08:	d055      	beq.n	8002bb6 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b14:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002b16:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002b1a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b1c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b1e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b20:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b22:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b24:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8002b2c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8002b30:	bf02      	ittt	eq
 8002b32:	681a      	ldreq	r2, [r3, #0]
 8002b34:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8002b38:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002b3e:	bf5e      	ittt	pl
 8002b40:	681a      	ldrpl	r2, [r3, #0]
 8002b42:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002b46:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b48:	68e3      	ldr	r3, [r4, #12]
 8002b4a:	b1cb      	cbz	r3, 8002b80 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 8002b4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	b1d3      	cbz	r3, 8002b88 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	07d2      	lsls	r2, r2, #31
 8002b58:	d53c      	bpl.n	8002bd4 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8002b60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002b68:	e7f0      	b.n	8002b4c <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	07d0      	lsls	r0, r2, #31
 8002b70:	d51f      	bpl.n	8002bb2 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8002b72:	7b1b      	ldrb	r3, [r3, #12]
 8002b74:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8002b78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8002b80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b88:	6863      	ldr	r3, [r4, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_SPI_Receive+0xf6>
 8002b90:	68a3      	ldr	r3, [r4, #8]
 8002b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b96:	d002      	beq.n	8002b9e <HAL_SPI_Receive+0xec>
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	d104      	bne.n	8002ba8 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8002b9e:	6822      	ldr	r2, [r4, #0]
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba6:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002baa:	3000      	adds	r0, #0
 8002bac:	bf18      	it	ne
 8002bae:	2001      	movne	r0, #1
 8002bb0:	e001      	b.n	8002bb6 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002bb2:	b93e      	cbnz	r6, 8002bc4 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8002bb4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002bc2:	e78a      	b.n	8002ada <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002bc4:	1c71      	adds	r1, r6, #1
 8002bc6:	d0db      	beq.n	8002b80 <HAL_SPI_Receive+0xce>
 8002bc8:	f7ff f92a 	bl	8001e20 <HAL_GetTick>
 8002bcc:	1bc0      	subs	r0, r0, r7
 8002bce:	4286      	cmp	r6, r0
 8002bd0:	d8d6      	bhi.n	8002b80 <HAL_SPI_Receive+0xce>
 8002bd2:	e7ef      	b.n	8002bb4 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002bd4:	2e00      	cmp	r6, #0
 8002bd6:	d0ed      	beq.n	8002bb4 <HAL_SPI_Receive+0x102>
 8002bd8:	1c73      	adds	r3, r6, #1
 8002bda:	d0b7      	beq.n	8002b4c <HAL_SPI_Receive+0x9a>
 8002bdc:	f7ff f920 	bl	8001e20 <HAL_GetTick>
 8002be0:	1bc0      	subs	r0, r0, r7
 8002be2:	4286      	cmp	r6, r0
 8002be4:	d8b2      	bhi.n	8002b4c <HAL_SPI_Receive+0x9a>
 8002be6:	e7e5      	b.n	8002bb4 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8002be8:	2002      	movs	r0, #2
 8002bea:	e7e4      	b.n	8002bb6 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 8002bec:	2002      	movs	r0, #2
 8002bee:	e774      	b.n	8002ada <HAL_SPI_Receive+0x28>

08002bf0 <HAL_SPI_ErrorCallback>:
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002bf4:	6803      	ldr	r3, [r0, #0]
{
 8002bf6:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002bf8:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002bfa:	689a      	ldr	r2, [r3, #8]
{
 8002bfc:	b085      	sub	sp, #20
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002bfe:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8002c02:	2d01      	cmp	r5, #1
{
 8002c04:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002c06:	d105      	bne.n	8002c14 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002c08:	064d      	lsls	r5, r1, #25
 8002c0a:	d503      	bpl.n	8002c14 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8002c0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 8002c0e:	4798      	blx	r3
}
 8002c10:	b005      	add	sp, #20
 8002c12:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002c14:	0790      	lsls	r0, r2, #30
 8002c16:	d504      	bpl.n	8002c22 <HAL_SPI_IRQHandler+0x2e>
 8002c18:	060d      	lsls	r5, r1, #24
 8002c1a:	d502      	bpl.n	8002c22 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002c1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c1e:	4620      	mov	r0, r4
 8002c20:	e7f5      	b.n	8002c0e <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002c22:	f012 0f60 	tst.w	r2, #96	; 0x60
 8002c26:	d0f3      	beq.n	8002c10 <HAL_SPI_IRQHandler+0x1c>
 8002c28:	0688      	lsls	r0, r1, #26
 8002c2a:	d5f1      	bpl.n	8002c10 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002c2c:	0655      	lsls	r5, r2, #25
 8002c2e:	d50e      	bpl.n	8002c4e <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c30:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002c34:	2500      	movs	r5, #0
 8002c36:	2803      	cmp	r0, #3
 8002c38:	d036      	beq.n	8002ca8 <HAL_SPI_IRQHandler+0xb4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c3c:	f040 0004 	orr.w	r0, r0, #4
 8002c40:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c42:	9501      	str	r5, [sp, #4]
 8002c44:	68d8      	ldr	r0, [r3, #12]
 8002c46:	9001      	str	r0, [sp, #4]
 8002c48:	6898      	ldr	r0, [r3, #8]
 8002c4a:	9001      	str	r0, [sp, #4]
 8002c4c:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002c4e:	0690      	lsls	r0, r2, #26
 8002c50:	d50c      	bpl.n	8002c6c <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	9203      	str	r2, [sp, #12]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	9203      	str	r2, [sp, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c6e:	2a00      	cmp	r2, #0
 8002c70:	d0ce      	beq.n	8002c10 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c78:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c80:	078a      	lsls	r2, r1, #30
 8002c82:	d018      	beq.n	8002cb6 <HAL_SPI_IRQHandler+0xc2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c84:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002c86:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c88:	f022 0203 	bic.w	r2, r2, #3
 8002c8c:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002c8e:	b118      	cbz	r0, 8002c98 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_SPI_IRQHandler+0xcc>)
 8002c92:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002c94:	f7ff f944 	bl	8001f20 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002c98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0b8      	beq.n	8002c10 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_SPI_IRQHandler+0xcc>)
 8002ca0:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002ca2:	f7ff f93d 	bl	8001f20 <HAL_DMA_Abort_IT>
 8002ca6:	e7b3      	b.n	8002c10 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ca8:	9502      	str	r5, [sp, #8]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	9b02      	ldr	r3, [sp, #8]
        return;
 8002cb4:	e7ac      	b.n	8002c10 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff ff9a 	bl	8002bf0 <HAL_SPI_ErrorCallback>
 8002cbc:	e7a8      	b.n	8002c10 <HAL_SPI_IRQHandler+0x1c>
 8002cbe:	bf00      	nop
 8002cc0:	08002cc5 	.word	0x08002cc5

08002cc4 <SPI_DMAAbortOnError>:
{
 8002cc4:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8002cc6:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8002cca:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002ccc:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8002cce:	f7ff ff8f 	bl	8002bf0 <HAL_SPI_ErrorCallback>
 8002cd2:	bd08      	pop	{r3, pc}

08002cd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cd4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d034      	beq.n	8002d46 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002ce0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002ce4:	b90b      	cbnz	r3, 8002cea <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce6:	f7fe ff5b 	bl	8001ba0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cea:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cec:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002cf2:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cf4:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cfa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cfc:	6863      	ldr	r3, [r4, #4]
 8002cfe:	69a2      	ldr	r2, [r4, #24]
 8002d00:	4303      	orrs	r3, r0
 8002d02:	68e0      	ldr	r0, [r4, #12]
 8002d04:	4303      	orrs	r3, r0
 8002d06:	6920      	ldr	r0, [r4, #16]
 8002d08:	4303      	orrs	r3, r0
 8002d0a:	6960      	ldr	r0, [r4, #20]
 8002d0c:	4303      	orrs	r3, r0
 8002d0e:	69e0      	ldr	r0, [r4, #28]
 8002d10:	4303      	orrs	r3, r0
 8002d12:	6a20      	ldr	r0, [r4, #32]
 8002d14:	4303      	orrs	r3, r0
 8002d16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002d18:	4303      	orrs	r3, r0
 8002d1a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002d1e:	4303      	orrs	r3, r0
 8002d20:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d22:	0c12      	lsrs	r2, r2, #16
 8002d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d26:	f002 0204 	and.w	r2, r2, #4
 8002d2a:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002d2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d2e:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002d30:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d32:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d34:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d3a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8002d3c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d3e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002d40:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8002d44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
}
 8002d48:	bd10      	pop	{r4, pc}

08002d4a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d4e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f04f 0302 	mov.w	r3, #2
 8002d56:	d01c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x48>
 8002d58:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8002d5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d5e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002d60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002d64:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d66:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002d6a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d70:	680a      	ldr	r2, [r1, #0]
 8002d72:	2a40      	cmp	r2, #64	; 0x40
 8002d74:	d079      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x120>
 8002d76:	d819      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x62>
 8002d78:	2a10      	cmp	r2, #16
 8002d7a:	f000 8093 	beq.w	8002ea4 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7e:	d80a      	bhi.n	8002d96 <HAL_TIM_ConfigClockSource+0x4c>
 8002d80:	2a00      	cmp	r2, #0
 8002d82:	f000 8089 	beq.w	8002e98 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002d92:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002d96:	2a20      	cmp	r2, #32
 8002d98:	f000 808a 	beq.w	8002eb0 <HAL_TIM_ConfigClockSource+0x166>
 8002d9c:	2a30      	cmp	r2, #48	; 0x30
 8002d9e:	d1f2      	bne.n	8002d86 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002da0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002da2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002da6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002daa:	e036      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002dac:	2a70      	cmp	r2, #112	; 0x70
 8002dae:	d036      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0xd4>
 8002db0:	d81b      	bhi.n	8002dea <HAL_TIM_ConfigClockSource+0xa0>
 8002db2:	2a50      	cmp	r2, #80	; 0x50
 8002db4:	d042      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0xf2>
 8002db6:	2a60      	cmp	r2, #96	; 0x60
 8002db8:	d1e5      	bne.n	8002d86 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dba:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dbe:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002dc8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dca:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002dda:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002dde:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002de0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002de4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002de8:	e017      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002dea:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002dee:	d011      	beq.n	8002e14 <HAL_TIM_ConfigClockSource+0xca>
 8002df0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002df4:	d1c7      	bne.n	8002d86 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df6:	688a      	ldr	r2, [r1, #8]
 8002df8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002dfa:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfc:	68c9      	ldr	r1, [r1, #12]
 8002dfe:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e08:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e12:	e002      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e7b3      	b.n	8002d86 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e1e:	688a      	ldr	r2, [r1, #8]
 8002e20:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002e22:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e24:	68c9      	ldr	r1, [r1, #12]
 8002e26:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e28:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e30:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002e32:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002e34:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e36:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002e3a:	e7ee      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3c:	684c      	ldr	r4, [r1, #4]
 8002e3e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e40:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e42:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e44:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e48:	f025 0501 	bic.w	r5, r5, #1
 8002e4c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002e50:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e56:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002e5e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e64:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002e68:	e7d7      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	684c      	ldr	r4, [r1, #4]
 8002e6c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e6e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e70:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e72:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e76:	f025 0501 	bic.w	r5, r5, #1
 8002e7a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002e7e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e84:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002e8c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e92:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002e96:	e7c0      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002e98:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e9e:	f042 0207 	orr.w	r2, r2, #7
 8002ea2:	e7ba      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002ea4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ea6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002eaa:	f042 0217 	orr.w	r2, r2, #23
 8002eae:	e7b4      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002eb0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002eb6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002eba:	e7ae      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0xd0>

08002ebc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002ebe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	4290      	cmp	r0, r2
 8002ec2:	d00a      	beq.n	8002eda <TIM_Base_SetConfig+0x1e>
 8002ec4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ec8:	d007      	beq.n	8002eda <TIM_Base_SetConfig+0x1e>
 8002eca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ece:	4290      	cmp	r0, r2
 8002ed0:	d003      	beq.n	8002eda <TIM_Base_SetConfig+0x1e>
 8002ed2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ed6:	4290      	cmp	r0, r2
 8002ed8:	d115      	bne.n	8002f06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002eda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee2:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <TIM_Base_SetConfig+0x6c>)
 8002ee4:	4290      	cmp	r0, r2
 8002ee6:	d00a      	beq.n	8002efe <TIM_Base_SetConfig+0x42>
 8002ee8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002eec:	d007      	beq.n	8002efe <TIM_Base_SetConfig+0x42>
 8002eee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ef2:	4290      	cmp	r0, r2
 8002ef4:	d003      	beq.n	8002efe <TIM_Base_SetConfig+0x42>
 8002ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002efa:	4290      	cmp	r0, r2
 8002efc:	d103      	bne.n	8002f06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f04:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002f06:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002f0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f10:	688b      	ldr	r3, [r1, #8]
 8002f12:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f14:	680b      	ldr	r3, [r1, #0]
 8002f16:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <TIM_Base_SetConfig+0x6c>)
 8002f1a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002f1c:	bf04      	itt	eq
 8002f1e:	690b      	ldreq	r3, [r1, #16]
 8002f20:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002f22:	2301      	movs	r3, #1
 8002f24:	6143      	str	r3, [r0, #20]
 8002f26:	4770      	bx	lr
 8002f28:	40012c00 	.word	0x40012c00

08002f2c <HAL_TIM_Base_Init>:
{
 8002f2c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002f2e:	4604      	mov	r4, r0
 8002f30:	b1a0      	cbz	r0, 8002f5c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f3a:	b91b      	cbnz	r3, 8002f44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f40:	f7fe fe70 	bl	8001c24 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f46:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002f48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4c:	1d21      	adds	r1, r4, #4
 8002f4e:	f7ff ffb5 	bl	8002ebc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f52:	2301      	movs	r3, #1
  return HAL_OK;
 8002f54:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
}
 8002f5e:	bd10      	pop	{r4, pc}

08002f60 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002f60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f64:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f04f 0302 	mov.w	r3, #2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002f6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002f72:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002f74:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002f76:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002f78:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002f7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f7e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4322      	orrs	r2, r4
 8002f84:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f8c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002fa0:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002fa2:	bd10      	pop	{r4, pc}

08002fa4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa4:	6803      	ldr	r3, [r0, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002fbc:	4770      	bx	lr
	...

08002fc0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc4:	6805      	ldr	r5, [r0, #0]
 8002fc6:	68c2      	ldr	r2, [r0, #12]
 8002fc8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fca:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fd4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002fd6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002fdc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002fe0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fe4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fea:	696b      	ldr	r3, [r5, #20]
 8002fec:	6982      	ldr	r2, [r0, #24]
 8002fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002ff6:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <UART_SetConfig+0x138>)
{
 8002ff8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002ffa:	429d      	cmp	r5, r3
 8002ffc:	f04f 0419 	mov.w	r4, #25
 8003000:	d146      	bne.n	8003090 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003002:	f7ff fb49 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003006:	fb04 f300 	mul.w	r3, r4, r0
 800300a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800300e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003012:	00b6      	lsls	r6, r6, #2
 8003014:	fbb3 f3f6 	udiv	r3, r3, r6
 8003018:	fbb3 f3f8 	udiv	r3, r3, r8
 800301c:	011e      	lsls	r6, r3, #4
 800301e:	f7ff fb3b 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003022:	4360      	muls	r0, r4
 8003024:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	fbb0 f7f3 	udiv	r7, r0, r3
 800302e:	f7ff fb33 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003032:	4360      	muls	r0, r4
 8003034:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003042:	fb08 7313 	mls	r3, r8, r3, r7
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	3332      	adds	r3, #50	; 0x32
 800304a:	fbb3 f3f8 	udiv	r3, r3, r8
 800304e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003052:	f7ff fb21 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003056:	4360      	muls	r0, r4
 8003058:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	fbb0 faf2 	udiv	sl, r0, r2
 8003062:	f7ff fb19 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003066:	4360      	muls	r0, r4
 8003068:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	fbb3 f3f8 	udiv	r3, r3, r8
 8003076:	fb08 a313 	mls	r3, r8, r3, sl
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	3332      	adds	r3, #50	; 0x32
 800307e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	433b      	orrs	r3, r7
 8003088:	4433      	add	r3, r6
 800308a:	60ab      	str	r3, [r5, #8]
 800308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003090:	f7ff faf2 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8003094:	fb04 f300 	mul.w	r3, r4, r0
 8003098:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800309c:	f04f 0864 	mov.w	r8, #100	; 0x64
 80030a0:	00b6      	lsls	r6, r6, #2
 80030a2:	fbb3 f3f6 	udiv	r3, r3, r6
 80030a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80030aa:	011e      	lsls	r6, r3, #4
 80030ac:	f7ff fae4 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 80030b0:	4360      	muls	r0, r4
 80030b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	fbb0 f7f3 	udiv	r7, r0, r3
 80030bc:	f7ff fadc 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 80030c0:	4360      	muls	r0, r4
 80030c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030cc:	fbb3 f3f8 	udiv	r3, r3, r8
 80030d0:	fb08 7313 	mls	r3, r8, r3, r7
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	3332      	adds	r3, #50	; 0x32
 80030d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80030dc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80030e0:	f7ff faca 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 80030e4:	4360      	muls	r0, r4
 80030e6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	fbb0 faf2 	udiv	sl, r0, r2
 80030f0:	f7ff fac2 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 80030f4:	e7b7      	b.n	8003066 <UART_SetConfig+0xa6>
 80030f6:	bf00      	nop
 80030f8:	40013800 	.word	0x40013800

080030fc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	4604      	mov	r4, r0
 8003100:	460e      	mov	r6, r1
 8003102:	4617      	mov	r7, r2
 8003104:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003106:	6821      	ldr	r1, [r4, #0]
 8003108:	680b      	ldr	r3, [r1, #0]
 800310a:	ea36 0303 	bics.w	r3, r6, r3
 800310e:	d101      	bne.n	8003114 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003110:	2000      	movs	r0, #0
}
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003114:	1c6b      	adds	r3, r5, #1
 8003116:	d0f7      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003118:	b995      	cbnz	r5, 8003140 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800311c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003124:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800312e:	2320      	movs	r3, #32
 8003130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003134:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003138:	2300      	movs	r3, #0
 800313a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003140:	f7fe fe6e 	bl	8001e20 <HAL_GetTick>
 8003144:	1bc0      	subs	r0, r0, r7
 8003146:	4285      	cmp	r5, r0
 8003148:	d2dd      	bcs.n	8003106 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800314a:	e7e6      	b.n	800311a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800314c <HAL_UART_Init>:
{
 800314c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800314e:	4604      	mov	r4, r0
 8003150:	b340      	cbz	r0, 80031a4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003152:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003156:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800315a:	b91b      	cbnz	r3, 8003164 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800315c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003160:	f7fe fd72 	bl	8001c48 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003166:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003168:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800316c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800316e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003174:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003176:	f7ff ff23 	bl	8002fc0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800318c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003194:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8003196:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800319a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800319e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80031a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
}
 80031a6:	bd10      	pop	{r4, pc}

080031a8 <HAL_UART_Transmit>:
{
 80031a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ac:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80031ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80031b2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80031b4:	2b20      	cmp	r3, #32
{
 80031b6:	460d      	mov	r5, r1
 80031b8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80031ba:	d14e      	bne.n	800325a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80031bc:	2900      	cmp	r1, #0
 80031be:	d049      	beq.n	8003254 <HAL_UART_Transmit+0xac>
 80031c0:	2a00      	cmp	r2, #0
 80031c2:	d047      	beq.n	8003254 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80031c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d046      	beq.n	800325a <HAL_UART_Transmit+0xb2>
 80031cc:	2301      	movs	r3, #1
 80031ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031d6:	2321      	movs	r3, #33	; 0x21
 80031d8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80031dc:	f7fe fe20 	bl	8001e20 <HAL_GetTick>
 80031e0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80031e2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80031e6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80031ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	b96b      	cbnz	r3, 800320c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f0:	463b      	mov	r3, r7
 80031f2:	4632      	mov	r2, r6
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff ff80 	bl	80030fc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80031fc:	b9a8      	cbnz	r0, 800322a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80031fe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003200:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003204:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800320c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003210:	3b01      	subs	r3, #1
 8003212:	b29b      	uxth	r3, r3
 8003214:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003216:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003218:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	4620      	mov	r0, r4
 8003220:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003222:	d10e      	bne.n	8003242 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003224:	f7ff ff6a 	bl	80030fc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003228:	b110      	cbz	r0, 8003230 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800322a:	2003      	movs	r0, #3
 800322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003230:	882b      	ldrh	r3, [r5, #0]
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003238:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800323a:	6923      	ldr	r3, [r4, #16]
 800323c:	b943      	cbnz	r3, 8003250 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800323e:	3502      	adds	r5, #2
 8003240:	e7d3      	b.n	80031ea <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	f7ff ff5b 	bl	80030fc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003246:	2800      	cmp	r0, #0
 8003248:	d1ef      	bne.n	800322a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	782a      	ldrb	r2, [r5, #0]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	3501      	adds	r5, #1
 8003252:	e7ca      	b.n	80031ea <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003254:	2001      	movs	r0, #1
 8003256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800325a:	2002      	movs	r0, #2
}
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003260 <HAL_UART_TxCpltCallback>:
 8003260:	4770      	bx	lr

08003262 <HAL_UART_RxCpltCallback>:
 8003262:	4770      	bx	lr

08003264 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003264:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003268:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800326a:	2b22      	cmp	r3, #34	; 0x22
 800326c:	d136      	bne.n	80032dc <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800326e:	6883      	ldr	r3, [r0, #8]
 8003270:	6901      	ldr	r1, [r0, #16]
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	6802      	ldr	r2, [r0, #0]
 8003278:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800327a:	d123      	bne.n	80032c4 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800327c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800327e:	b9e9      	cbnz	r1, 80032bc <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003284:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003288:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800328a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800328c:	3c01      	subs	r4, #1
 800328e:	b2a4      	uxth	r4, r4
 8003290:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003292:	b98c      	cbnz	r4, 80032b8 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	f022 0220 	bic.w	r2, r2, #32
 800329c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a4:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80032ae:	2320      	movs	r3, #32
 80032b0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80032b4:	f7ff ffd5 	bl	8003262 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80032b8:	2000      	movs	r0, #0
}
 80032ba:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f823 2b01 	strh.w	r2, [r3], #1
 80032c2:	e7e1      	b.n	8003288 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80032c4:	b921      	cbnz	r1, 80032d0 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	6852      	ldr	r2, [r2, #4]
 80032ca:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e7dc      	b.n	800328a <UART_Receive_IT+0x26>
 80032d0:	6852      	ldr	r2, [r2, #4]
 80032d2:	1c59      	adds	r1, r3, #1
 80032d4:	6281      	str	r1, [r0, #40]	; 0x28
 80032d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032da:	e7f7      	b.n	80032cc <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80032dc:	2002      	movs	r0, #2
 80032de:	bd10      	pop	{r4, pc}

080032e0 <HAL_UART_ErrorCallback>:
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e4:	6803      	ldr	r3, [r0, #0]
{
 80032e6:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e8:	681a      	ldr	r2, [r3, #0]
{
 80032ea:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80032ec:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ee:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80032f2:	d107      	bne.n	8003304 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f4:	0696      	lsls	r6, r2, #26
 80032f6:	d55a      	bpl.n	80033ae <HAL_UART_IRQHandler+0xca>
 80032f8:	068d      	lsls	r5, r1, #26
 80032fa:	d558      	bpl.n	80033ae <HAL_UART_IRQHandler+0xca>
}
 80032fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003300:	f7ff bfb0 	b.w	8003264 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003304:	f015 0501 	ands.w	r5, r5, #1
 8003308:	d102      	bne.n	8003310 <HAL_UART_IRQHandler+0x2c>
 800330a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800330e:	d04e      	beq.n	80033ae <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003310:	07d3      	lsls	r3, r2, #31
 8003312:	d505      	bpl.n	8003320 <HAL_UART_IRQHandler+0x3c>
 8003314:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003316:	bf42      	ittt	mi
 8003318:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800331a:	f043 0301 	orrmi.w	r3, r3, #1
 800331e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003320:	0750      	lsls	r0, r2, #29
 8003322:	d504      	bpl.n	800332e <HAL_UART_IRQHandler+0x4a>
 8003324:	b11d      	cbz	r5, 800332e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003326:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800332e:	0793      	lsls	r3, r2, #30
 8003330:	d504      	bpl.n	800333c <HAL_UART_IRQHandler+0x58>
 8003332:	b11d      	cbz	r5, 800333c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800333c:	0716      	lsls	r6, r2, #28
 800333e:	d504      	bpl.n	800334a <HAL_UART_IRQHandler+0x66>
 8003340:	b11d      	cbz	r5, 800334a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003342:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800334a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d066      	beq.n	800341e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003350:	0695      	lsls	r5, r2, #26
 8003352:	d504      	bpl.n	800335e <HAL_UART_IRQHandler+0x7a>
 8003354:	0688      	lsls	r0, r1, #26
 8003356:	d502      	bpl.n	800335e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003358:	4620      	mov	r0, r4
 800335a:	f7ff ff83 	bl	8003264 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003360:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003362:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003364:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003366:	0711      	lsls	r1, r2, #28
 8003368:	d402      	bmi.n	8003370 <HAL_UART_IRQHandler+0x8c>
 800336a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800336e:	d01a      	beq.n	80033a6 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003370:	f7ff fe18 	bl	8002fa4 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	0652      	lsls	r2, r2, #25
 800337a:	d510      	bpl.n	800339e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800337e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003384:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003386:	b150      	cbz	r0, 800339e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_UART_IRQHandler+0x13c>)
 800338a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800338c:	f7fe fdc8 	bl	8001f20 <HAL_DMA_Abort_IT>
 8003390:	2800      	cmp	r0, #0
 8003392:	d044      	beq.n	800341e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003394:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800339a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800339c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff ff9e 	bl	80032e0 <HAL_UART_ErrorCallback>
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80033a6:	f7ff ff9b 	bl	80032e0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	63e5      	str	r5, [r4, #60]	; 0x3c
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033ae:	0616      	lsls	r6, r2, #24
 80033b0:	d527      	bpl.n	8003402 <HAL_UART_IRQHandler+0x11e>
 80033b2:	060d      	lsls	r5, r1, #24
 80033b4:	d525      	bpl.n	8003402 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80033b6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80033ba:	2a21      	cmp	r2, #33	; 0x21
 80033bc:	d12f      	bne.n	800341e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033be:	68a2      	ldr	r2, [r4, #8]
 80033c0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80033c4:	6a22      	ldr	r2, [r4, #32]
 80033c6:	d117      	bne.n	80033f8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033c8:	8811      	ldrh	r1, [r2, #0]
 80033ca:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80033ce:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80033d0:	6921      	ldr	r1, [r4, #16]
 80033d2:	b979      	cbnz	r1, 80033f4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80033d4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80033d6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80033d8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80033da:	3a01      	subs	r2, #1
 80033dc:	b292      	uxth	r2, r2
 80033de:	84e2      	strh	r2, [r4, #38]	; 0x26
 80033e0:	b9ea      	cbnz	r2, 800341e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80033f4:	3201      	adds	r2, #1
 80033f6:	e7ee      	b.n	80033d6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f8:	1c51      	adds	r1, r2, #1
 80033fa:	6221      	str	r1, [r4, #32]
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	e7ea      	b.n	80033d8 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003402:	0650      	lsls	r0, r2, #25
 8003404:	d50b      	bpl.n	800341e <HAL_UART_IRQHandler+0x13a>
 8003406:	064a      	lsls	r2, r1, #25
 8003408:	d509      	bpl.n	800341e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800340a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800340c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800340e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003412:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003414:	2320      	movs	r3, #32
 8003416:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800341a:	f7ff ff21 	bl	8003260 <HAL_UART_TxCpltCallback>
 800341e:	bd70      	pop	{r4, r5, r6, pc}
 8003420:	08003425 	.word	0x08003425

08003424 <UART_DMAAbortOnError>:
{
 8003424:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003426:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003428:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800342a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800342c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800342e:	f7ff ff57 	bl	80032e0 <HAL_UART_ErrorCallback>
 8003432:	bd08      	pop	{r3, pc}

08003434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003434:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003436:	e003      	b.n	8003440 <LoopCopyDataInit>

08003438 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800343a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800343c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800343e:	3104      	adds	r1, #4

08003440 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003440:	480a      	ldr	r0, [pc, #40]	; (800346c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003444:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003446:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003448:	d3f6      	bcc.n	8003438 <CopyDataInit>
  ldr r2, =_sbss
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800344c:	e002      	b.n	8003454 <LoopFillZerobss>

0800344e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003450:	f842 3b04 	str.w	r3, [r2], #4

08003454 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003456:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003458:	d3f9      	bcc.n	800344e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800345a:	f7fe fc79 	bl	8001d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800345e:	f000 f815 	bl	800348c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003462:	f7fe f9bd 	bl	80017e0 <main>
  bx lr
 8003466:	4770      	bx	lr
  ldr r3, =_sidata
 8003468:	0800441c 	.word	0x0800441c
  ldr r0, =_sdata
 800346c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003470:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003474:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8003478:	2000017c 	.word	0x2000017c

0800347c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800347c:	e7fe      	b.n	800347c <ADC1_2_IRQHandler>
	...

08003480 <__errno>:
 8003480:	4b01      	ldr	r3, [pc, #4]	; (8003488 <__errno+0x8>)
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000010 	.word	0x20000010

0800348c <__libc_init_array>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	2500      	movs	r5, #0
 8003490:	4e0c      	ldr	r6, [pc, #48]	; (80034c4 <__libc_init_array+0x38>)
 8003492:	4c0d      	ldr	r4, [pc, #52]	; (80034c8 <__libc_init_array+0x3c>)
 8003494:	1ba4      	subs	r4, r4, r6
 8003496:	10a4      	asrs	r4, r4, #2
 8003498:	42a5      	cmp	r5, r4
 800349a:	d109      	bne.n	80034b0 <__libc_init_array+0x24>
 800349c:	f000 fc98 	bl	8003dd0 <_init>
 80034a0:	2500      	movs	r5, #0
 80034a2:	4e0a      	ldr	r6, [pc, #40]	; (80034cc <__libc_init_array+0x40>)
 80034a4:	4c0a      	ldr	r4, [pc, #40]	; (80034d0 <__libc_init_array+0x44>)
 80034a6:	1ba4      	subs	r4, r4, r6
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	42a5      	cmp	r5, r4
 80034ac:	d105      	bne.n	80034ba <__libc_init_array+0x2e>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034b4:	4798      	blx	r3
 80034b6:	3501      	adds	r5, #1
 80034b8:	e7ee      	b.n	8003498 <__libc_init_array+0xc>
 80034ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034be:	4798      	blx	r3
 80034c0:	3501      	adds	r5, #1
 80034c2:	e7f2      	b.n	80034aa <__libc_init_array+0x1e>
 80034c4:	08004414 	.word	0x08004414
 80034c8:	08004414 	.word	0x08004414
 80034cc:	08004414 	.word	0x08004414
 80034d0:	08004418 	.word	0x08004418

080034d4 <memcpy>:
 80034d4:	b510      	push	{r4, lr}
 80034d6:	1e43      	subs	r3, r0, #1
 80034d8:	440a      	add	r2, r1
 80034da:	4291      	cmp	r1, r2
 80034dc:	d100      	bne.n	80034e0 <memcpy+0xc>
 80034de:	bd10      	pop	{r4, pc}
 80034e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034e8:	e7f7      	b.n	80034da <memcpy+0x6>

080034ea <memset>:
 80034ea:	4603      	mov	r3, r0
 80034ec:	4402      	add	r2, r0
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d100      	bne.n	80034f4 <memset+0xa>
 80034f2:	4770      	bx	lr
 80034f4:	f803 1b01 	strb.w	r1, [r3], #1
 80034f8:	e7f9      	b.n	80034ee <memset+0x4>
	...

080034fc <siprintf>:
 80034fc:	b40e      	push	{r1, r2, r3}
 80034fe:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003502:	b500      	push	{lr}
 8003504:	b09c      	sub	sp, #112	; 0x70
 8003506:	f8ad 1014 	strh.w	r1, [sp, #20]
 800350a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800350e:	9104      	str	r1, [sp, #16]
 8003510:	9107      	str	r1, [sp, #28]
 8003512:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003516:	ab1d      	add	r3, sp, #116	; 0x74
 8003518:	9002      	str	r0, [sp, #8]
 800351a:	9006      	str	r0, [sp, #24]
 800351c:	4808      	ldr	r0, [pc, #32]	; (8003540 <siprintf+0x44>)
 800351e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003522:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003526:	6800      	ldr	r0, [r0, #0]
 8003528:	a902      	add	r1, sp, #8
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	f000 f866 	bl	80035fc <_svfiprintf_r>
 8003530:	2200      	movs	r2, #0
 8003532:	9b02      	ldr	r3, [sp, #8]
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	b01c      	add	sp, #112	; 0x70
 8003538:	f85d eb04 	ldr.w	lr, [sp], #4
 800353c:	b003      	add	sp, #12
 800353e:	4770      	bx	lr
 8003540:	20000010 	.word	0x20000010

08003544 <__ssputs_r>:
 8003544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	688e      	ldr	r6, [r1, #8]
 800354a:	4682      	mov	sl, r0
 800354c:	429e      	cmp	r6, r3
 800354e:	460c      	mov	r4, r1
 8003550:	4691      	mov	r9, r2
 8003552:	4698      	mov	r8, r3
 8003554:	d835      	bhi.n	80035c2 <__ssputs_r+0x7e>
 8003556:	898a      	ldrh	r2, [r1, #12]
 8003558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800355c:	d031      	beq.n	80035c2 <__ssputs_r+0x7e>
 800355e:	2302      	movs	r3, #2
 8003560:	6825      	ldr	r5, [r4, #0]
 8003562:	6909      	ldr	r1, [r1, #16]
 8003564:	1a6f      	subs	r7, r5, r1
 8003566:	6965      	ldr	r5, [r4, #20]
 8003568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800356c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003570:	f108 0301 	add.w	r3, r8, #1
 8003574:	443b      	add	r3, r7
 8003576:	429d      	cmp	r5, r3
 8003578:	bf38      	it	cc
 800357a:	461d      	movcc	r5, r3
 800357c:	0553      	lsls	r3, r2, #21
 800357e:	d531      	bpl.n	80035e4 <__ssputs_r+0xa0>
 8003580:	4629      	mov	r1, r5
 8003582:	f000 fb3b 	bl	8003bfc <_malloc_r>
 8003586:	4606      	mov	r6, r0
 8003588:	b950      	cbnz	r0, 80035a0 <__ssputs_r+0x5c>
 800358a:	230c      	movs	r3, #12
 800358c:	f8ca 3000 	str.w	r3, [sl]
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	f04f 30ff 	mov.w	r0, #4294967295
 8003596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a0:	463a      	mov	r2, r7
 80035a2:	6921      	ldr	r1, [r4, #16]
 80035a4:	f7ff ff96 	bl	80034d4 <memcpy>
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b2:	81a3      	strh	r3, [r4, #12]
 80035b4:	6126      	str	r6, [r4, #16]
 80035b6:	443e      	add	r6, r7
 80035b8:	6026      	str	r6, [r4, #0]
 80035ba:	4646      	mov	r6, r8
 80035bc:	6165      	str	r5, [r4, #20]
 80035be:	1bed      	subs	r5, r5, r7
 80035c0:	60a5      	str	r5, [r4, #8]
 80035c2:	4546      	cmp	r6, r8
 80035c4:	bf28      	it	cs
 80035c6:	4646      	movcs	r6, r8
 80035c8:	4649      	mov	r1, r9
 80035ca:	4632      	mov	r2, r6
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	f000 faaf 	bl	8003b30 <memmove>
 80035d2:	68a3      	ldr	r3, [r4, #8]
 80035d4:	2000      	movs	r0, #0
 80035d6:	1b9b      	subs	r3, r3, r6
 80035d8:	60a3      	str	r3, [r4, #8]
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	441e      	add	r6, r3
 80035de:	6026      	str	r6, [r4, #0]
 80035e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e4:	462a      	mov	r2, r5
 80035e6:	f000 fb67 	bl	8003cb8 <_realloc_r>
 80035ea:	4606      	mov	r6, r0
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d1e1      	bne.n	80035b4 <__ssputs_r+0x70>
 80035f0:	6921      	ldr	r1, [r4, #16]
 80035f2:	4650      	mov	r0, sl
 80035f4:	f000 fab6 	bl	8003b64 <_free_r>
 80035f8:	e7c7      	b.n	800358a <__ssputs_r+0x46>
	...

080035fc <_svfiprintf_r>:
 80035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003600:	b09d      	sub	sp, #116	; 0x74
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	898b      	ldrh	r3, [r1, #12]
 8003606:	4680      	mov	r8, r0
 8003608:	061c      	lsls	r4, r3, #24
 800360a:	460d      	mov	r5, r1
 800360c:	4616      	mov	r6, r2
 800360e:	d50f      	bpl.n	8003630 <_svfiprintf_r+0x34>
 8003610:	690b      	ldr	r3, [r1, #16]
 8003612:	b96b      	cbnz	r3, 8003630 <_svfiprintf_r+0x34>
 8003614:	2140      	movs	r1, #64	; 0x40
 8003616:	f000 faf1 	bl	8003bfc <_malloc_r>
 800361a:	6028      	str	r0, [r5, #0]
 800361c:	6128      	str	r0, [r5, #16]
 800361e:	b928      	cbnz	r0, 800362c <_svfiprintf_r+0x30>
 8003620:	230c      	movs	r3, #12
 8003622:	f8c8 3000 	str.w	r3, [r8]
 8003626:	f04f 30ff 	mov.w	r0, #4294967295
 800362a:	e0c4      	b.n	80037b6 <_svfiprintf_r+0x1ba>
 800362c:	2340      	movs	r3, #64	; 0x40
 800362e:	616b      	str	r3, [r5, #20]
 8003630:	2300      	movs	r3, #0
 8003632:	9309      	str	r3, [sp, #36]	; 0x24
 8003634:	2320      	movs	r3, #32
 8003636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800363a:	2330      	movs	r3, #48	; 0x30
 800363c:	f04f 0b01 	mov.w	fp, #1
 8003640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003644:	4637      	mov	r7, r6
 8003646:	463c      	mov	r4, r7
 8003648:	f814 3b01 	ldrb.w	r3, [r4], #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d13c      	bne.n	80036ca <_svfiprintf_r+0xce>
 8003650:	ebb7 0a06 	subs.w	sl, r7, r6
 8003654:	d00b      	beq.n	800366e <_svfiprintf_r+0x72>
 8003656:	4653      	mov	r3, sl
 8003658:	4632      	mov	r2, r6
 800365a:	4629      	mov	r1, r5
 800365c:	4640      	mov	r0, r8
 800365e:	f7ff ff71 	bl	8003544 <__ssputs_r>
 8003662:	3001      	adds	r0, #1
 8003664:	f000 80a2 	beq.w	80037ac <_svfiprintf_r+0x1b0>
 8003668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366a:	4453      	add	r3, sl
 800366c:	9309      	str	r3, [sp, #36]	; 0x24
 800366e:	783b      	ldrb	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 809b 	beq.w	80037ac <_svfiprintf_r+0x1b0>
 8003676:	2300      	movs	r3, #0
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	9304      	str	r3, [sp, #16]
 800367e:	9307      	str	r3, [sp, #28]
 8003680:	9205      	str	r2, [sp, #20]
 8003682:	9306      	str	r3, [sp, #24]
 8003684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003688:	931a      	str	r3, [sp, #104]	; 0x68
 800368a:	2205      	movs	r2, #5
 800368c:	7821      	ldrb	r1, [r4, #0]
 800368e:	4850      	ldr	r0, [pc, #320]	; (80037d0 <_svfiprintf_r+0x1d4>)
 8003690:	f000 fa40 	bl	8003b14 <memchr>
 8003694:	1c67      	adds	r7, r4, #1
 8003696:	9b04      	ldr	r3, [sp, #16]
 8003698:	b9d8      	cbnz	r0, 80036d2 <_svfiprintf_r+0xd6>
 800369a:	06d9      	lsls	r1, r3, #27
 800369c:	bf44      	itt	mi
 800369e:	2220      	movmi	r2, #32
 80036a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036a4:	071a      	lsls	r2, r3, #28
 80036a6:	bf44      	itt	mi
 80036a8:	222b      	movmi	r2, #43	; 0x2b
 80036aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036ae:	7822      	ldrb	r2, [r4, #0]
 80036b0:	2a2a      	cmp	r2, #42	; 0x2a
 80036b2:	d016      	beq.n	80036e2 <_svfiprintf_r+0xe6>
 80036b4:	2100      	movs	r1, #0
 80036b6:	200a      	movs	r0, #10
 80036b8:	9a07      	ldr	r2, [sp, #28]
 80036ba:	4627      	mov	r7, r4
 80036bc:	783b      	ldrb	r3, [r7, #0]
 80036be:	3401      	adds	r4, #1
 80036c0:	3b30      	subs	r3, #48	; 0x30
 80036c2:	2b09      	cmp	r3, #9
 80036c4:	d950      	bls.n	8003768 <_svfiprintf_r+0x16c>
 80036c6:	b1c9      	cbz	r1, 80036fc <_svfiprintf_r+0x100>
 80036c8:	e011      	b.n	80036ee <_svfiprintf_r+0xf2>
 80036ca:	2b25      	cmp	r3, #37	; 0x25
 80036cc:	d0c0      	beq.n	8003650 <_svfiprintf_r+0x54>
 80036ce:	4627      	mov	r7, r4
 80036d0:	e7b9      	b.n	8003646 <_svfiprintf_r+0x4a>
 80036d2:	4a3f      	ldr	r2, [pc, #252]	; (80037d0 <_svfiprintf_r+0x1d4>)
 80036d4:	463c      	mov	r4, r7
 80036d6:	1a80      	subs	r0, r0, r2
 80036d8:	fa0b f000 	lsl.w	r0, fp, r0
 80036dc:	4318      	orrs	r0, r3
 80036de:	9004      	str	r0, [sp, #16]
 80036e0:	e7d3      	b.n	800368a <_svfiprintf_r+0x8e>
 80036e2:	9a03      	ldr	r2, [sp, #12]
 80036e4:	1d11      	adds	r1, r2, #4
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	9103      	str	r1, [sp, #12]
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	db01      	blt.n	80036f2 <_svfiprintf_r+0xf6>
 80036ee:	9207      	str	r2, [sp, #28]
 80036f0:	e004      	b.n	80036fc <_svfiprintf_r+0x100>
 80036f2:	4252      	negs	r2, r2
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	9207      	str	r2, [sp, #28]
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	783b      	ldrb	r3, [r7, #0]
 80036fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003700:	d10d      	bne.n	800371e <_svfiprintf_r+0x122>
 8003702:	787b      	ldrb	r3, [r7, #1]
 8003704:	1c79      	adds	r1, r7, #1
 8003706:	2b2a      	cmp	r3, #42	; 0x2a
 8003708:	d132      	bne.n	8003770 <_svfiprintf_r+0x174>
 800370a:	9b03      	ldr	r3, [sp, #12]
 800370c:	3702      	adds	r7, #2
 800370e:	1d1a      	adds	r2, r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	9203      	str	r2, [sp, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	bfb8      	it	lt
 8003718:	f04f 33ff 	movlt.w	r3, #4294967295
 800371c:	9305      	str	r3, [sp, #20]
 800371e:	4c2d      	ldr	r4, [pc, #180]	; (80037d4 <_svfiprintf_r+0x1d8>)
 8003720:	2203      	movs	r2, #3
 8003722:	7839      	ldrb	r1, [r7, #0]
 8003724:	4620      	mov	r0, r4
 8003726:	f000 f9f5 	bl	8003b14 <memchr>
 800372a:	b138      	cbz	r0, 800373c <_svfiprintf_r+0x140>
 800372c:	2340      	movs	r3, #64	; 0x40
 800372e:	1b00      	subs	r0, r0, r4
 8003730:	fa03 f000 	lsl.w	r0, r3, r0
 8003734:	9b04      	ldr	r3, [sp, #16]
 8003736:	3701      	adds	r7, #1
 8003738:	4303      	orrs	r3, r0
 800373a:	9304      	str	r3, [sp, #16]
 800373c:	7839      	ldrb	r1, [r7, #0]
 800373e:	2206      	movs	r2, #6
 8003740:	4825      	ldr	r0, [pc, #148]	; (80037d8 <_svfiprintf_r+0x1dc>)
 8003742:	1c7e      	adds	r6, r7, #1
 8003744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003748:	f000 f9e4 	bl	8003b14 <memchr>
 800374c:	2800      	cmp	r0, #0
 800374e:	d035      	beq.n	80037bc <_svfiprintf_r+0x1c0>
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <_svfiprintf_r+0x1e0>)
 8003752:	b9fb      	cbnz	r3, 8003794 <_svfiprintf_r+0x198>
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	3307      	adds	r3, #7
 8003758:	f023 0307 	bic.w	r3, r3, #7
 800375c:	3308      	adds	r3, #8
 800375e:	9303      	str	r3, [sp, #12]
 8003760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003762:	444b      	add	r3, r9
 8003764:	9309      	str	r3, [sp, #36]	; 0x24
 8003766:	e76d      	b.n	8003644 <_svfiprintf_r+0x48>
 8003768:	fb00 3202 	mla	r2, r0, r2, r3
 800376c:	2101      	movs	r1, #1
 800376e:	e7a4      	b.n	80036ba <_svfiprintf_r+0xbe>
 8003770:	2300      	movs	r3, #0
 8003772:	240a      	movs	r4, #10
 8003774:	4618      	mov	r0, r3
 8003776:	9305      	str	r3, [sp, #20]
 8003778:	460f      	mov	r7, r1
 800377a:	783a      	ldrb	r2, [r7, #0]
 800377c:	3101      	adds	r1, #1
 800377e:	3a30      	subs	r2, #48	; 0x30
 8003780:	2a09      	cmp	r2, #9
 8003782:	d903      	bls.n	800378c <_svfiprintf_r+0x190>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ca      	beq.n	800371e <_svfiprintf_r+0x122>
 8003788:	9005      	str	r0, [sp, #20]
 800378a:	e7c8      	b.n	800371e <_svfiprintf_r+0x122>
 800378c:	fb04 2000 	mla	r0, r4, r0, r2
 8003790:	2301      	movs	r3, #1
 8003792:	e7f1      	b.n	8003778 <_svfiprintf_r+0x17c>
 8003794:	ab03      	add	r3, sp, #12
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	462a      	mov	r2, r5
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <_svfiprintf_r+0x1e4>)
 800379c:	a904      	add	r1, sp, #16
 800379e:	4640      	mov	r0, r8
 80037a0:	f3af 8000 	nop.w
 80037a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037a8:	4681      	mov	r9, r0
 80037aa:	d1d9      	bne.n	8003760 <_svfiprintf_r+0x164>
 80037ac:	89ab      	ldrh	r3, [r5, #12]
 80037ae:	065b      	lsls	r3, r3, #25
 80037b0:	f53f af39 	bmi.w	8003626 <_svfiprintf_r+0x2a>
 80037b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037b6:	b01d      	add	sp, #116	; 0x74
 80037b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037bc:	ab03      	add	r3, sp, #12
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	462a      	mov	r2, r5
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <_svfiprintf_r+0x1e4>)
 80037c4:	a904      	add	r1, sp, #16
 80037c6:	4640      	mov	r0, r8
 80037c8:	f000 f884 	bl	80038d4 <_printf_i>
 80037cc:	e7ea      	b.n	80037a4 <_svfiprintf_r+0x1a8>
 80037ce:	bf00      	nop
 80037d0:	080040d5 	.word	0x080040d5
 80037d4:	080040db 	.word	0x080040db
 80037d8:	080040df 	.word	0x080040df
 80037dc:	00000000 	.word	0x00000000
 80037e0:	08003545 	.word	0x08003545

080037e4 <_printf_common>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	4691      	mov	r9, r2
 80037ea:	461f      	mov	r7, r3
 80037ec:	688a      	ldr	r2, [r1, #8]
 80037ee:	690b      	ldr	r3, [r1, #16]
 80037f0:	4606      	mov	r6, r0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	bfb8      	it	lt
 80037f6:	4613      	movlt	r3, r2
 80037f8:	f8c9 3000 	str.w	r3, [r9]
 80037fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003800:	460c      	mov	r4, r1
 8003802:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003806:	b112      	cbz	r2, 800380e <_printf_common+0x2a>
 8003808:	3301      	adds	r3, #1
 800380a:	f8c9 3000 	str.w	r3, [r9]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	0699      	lsls	r1, r3, #26
 8003812:	bf42      	ittt	mi
 8003814:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003818:	3302      	addmi	r3, #2
 800381a:	f8c9 3000 	strmi.w	r3, [r9]
 800381e:	6825      	ldr	r5, [r4, #0]
 8003820:	f015 0506 	ands.w	r5, r5, #6
 8003824:	d107      	bne.n	8003836 <_printf_common+0x52>
 8003826:	f104 0a19 	add.w	sl, r4, #25
 800382a:	68e3      	ldr	r3, [r4, #12]
 800382c:	f8d9 2000 	ldr.w	r2, [r9]
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	429d      	cmp	r5, r3
 8003834:	db2a      	blt.n	800388c <_printf_common+0xa8>
 8003836:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	3300      	adds	r3, #0
 800383e:	bf18      	it	ne
 8003840:	2301      	movne	r3, #1
 8003842:	0692      	lsls	r2, r2, #26
 8003844:	d42f      	bmi.n	80038a6 <_printf_common+0xc2>
 8003846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800384a:	4639      	mov	r1, r7
 800384c:	4630      	mov	r0, r6
 800384e:	47c0      	blx	r8
 8003850:	3001      	adds	r0, #1
 8003852:	d022      	beq.n	800389a <_printf_common+0xb6>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	68e5      	ldr	r5, [r4, #12]
 8003858:	f003 0306 	and.w	r3, r3, #6
 800385c:	2b04      	cmp	r3, #4
 800385e:	bf18      	it	ne
 8003860:	2500      	movne	r5, #0
 8003862:	f8d9 2000 	ldr.w	r2, [r9]
 8003866:	f04f 0900 	mov.w	r9, #0
 800386a:	bf08      	it	eq
 800386c:	1aad      	subeq	r5, r5, r2
 800386e:	68a3      	ldr	r3, [r4, #8]
 8003870:	6922      	ldr	r2, [r4, #16]
 8003872:	bf08      	it	eq
 8003874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003878:	4293      	cmp	r3, r2
 800387a:	bfc4      	itt	gt
 800387c:	1a9b      	subgt	r3, r3, r2
 800387e:	18ed      	addgt	r5, r5, r3
 8003880:	341a      	adds	r4, #26
 8003882:	454d      	cmp	r5, r9
 8003884:	d11b      	bne.n	80038be <_printf_common+0xda>
 8003886:	2000      	movs	r0, #0
 8003888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388c:	2301      	movs	r3, #1
 800388e:	4652      	mov	r2, sl
 8003890:	4639      	mov	r1, r7
 8003892:	4630      	mov	r0, r6
 8003894:	47c0      	blx	r8
 8003896:	3001      	adds	r0, #1
 8003898:	d103      	bne.n	80038a2 <_printf_common+0xbe>
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a2:	3501      	adds	r5, #1
 80038a4:	e7c1      	b.n	800382a <_printf_common+0x46>
 80038a6:	2030      	movs	r0, #48	; 0x30
 80038a8:	18e1      	adds	r1, r4, r3
 80038aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038b4:	4422      	add	r2, r4
 80038b6:	3302      	adds	r3, #2
 80038b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038bc:	e7c3      	b.n	8003846 <_printf_common+0x62>
 80038be:	2301      	movs	r3, #1
 80038c0:	4622      	mov	r2, r4
 80038c2:	4639      	mov	r1, r7
 80038c4:	4630      	mov	r0, r6
 80038c6:	47c0      	blx	r8
 80038c8:	3001      	adds	r0, #1
 80038ca:	d0e6      	beq.n	800389a <_printf_common+0xb6>
 80038cc:	f109 0901 	add.w	r9, r9, #1
 80038d0:	e7d7      	b.n	8003882 <_printf_common+0x9e>
	...

080038d4 <_printf_i>:
 80038d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038d8:	4617      	mov	r7, r2
 80038da:	7e0a      	ldrb	r2, [r1, #24]
 80038dc:	b085      	sub	sp, #20
 80038de:	2a6e      	cmp	r2, #110	; 0x6e
 80038e0:	4698      	mov	r8, r3
 80038e2:	4606      	mov	r6, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038e8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80038ec:	f000 80bc 	beq.w	8003a68 <_printf_i+0x194>
 80038f0:	d81a      	bhi.n	8003928 <_printf_i+0x54>
 80038f2:	2a63      	cmp	r2, #99	; 0x63
 80038f4:	d02e      	beq.n	8003954 <_printf_i+0x80>
 80038f6:	d80a      	bhi.n	800390e <_printf_i+0x3a>
 80038f8:	2a00      	cmp	r2, #0
 80038fa:	f000 80c8 	beq.w	8003a8e <_printf_i+0x1ba>
 80038fe:	2a58      	cmp	r2, #88	; 0x58
 8003900:	f000 808a 	beq.w	8003a18 <_printf_i+0x144>
 8003904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003908:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800390c:	e02a      	b.n	8003964 <_printf_i+0x90>
 800390e:	2a64      	cmp	r2, #100	; 0x64
 8003910:	d001      	beq.n	8003916 <_printf_i+0x42>
 8003912:	2a69      	cmp	r2, #105	; 0x69
 8003914:	d1f6      	bne.n	8003904 <_printf_i+0x30>
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800391e:	d023      	beq.n	8003968 <_printf_i+0x94>
 8003920:	1d11      	adds	r1, r2, #4
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	e027      	b.n	8003978 <_printf_i+0xa4>
 8003928:	2a73      	cmp	r2, #115	; 0x73
 800392a:	f000 80b4 	beq.w	8003a96 <_printf_i+0x1c2>
 800392e:	d808      	bhi.n	8003942 <_printf_i+0x6e>
 8003930:	2a6f      	cmp	r2, #111	; 0x6f
 8003932:	d02a      	beq.n	800398a <_printf_i+0xb6>
 8003934:	2a70      	cmp	r2, #112	; 0x70
 8003936:	d1e5      	bne.n	8003904 <_printf_i+0x30>
 8003938:	680a      	ldr	r2, [r1, #0]
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	600a      	str	r2, [r1, #0]
 8003940:	e003      	b.n	800394a <_printf_i+0x76>
 8003942:	2a75      	cmp	r2, #117	; 0x75
 8003944:	d021      	beq.n	800398a <_printf_i+0xb6>
 8003946:	2a78      	cmp	r2, #120	; 0x78
 8003948:	d1dc      	bne.n	8003904 <_printf_i+0x30>
 800394a:	2278      	movs	r2, #120	; 0x78
 800394c:	496f      	ldr	r1, [pc, #444]	; (8003b0c <_printf_i+0x238>)
 800394e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003952:	e064      	b.n	8003a1e <_printf_i+0x14a>
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800395a:	1d11      	adds	r1, r2, #4
 800395c:	6019      	str	r1, [r3, #0]
 800395e:	6813      	ldr	r3, [r2, #0]
 8003960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003964:	2301      	movs	r3, #1
 8003966:	e0a3      	b.n	8003ab0 <_printf_i+0x1dc>
 8003968:	f011 0f40 	tst.w	r1, #64	; 0x40
 800396c:	f102 0104 	add.w	r1, r2, #4
 8003970:	6019      	str	r1, [r3, #0]
 8003972:	d0d7      	beq.n	8003924 <_printf_i+0x50>
 8003974:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da03      	bge.n	8003984 <_printf_i+0xb0>
 800397c:	222d      	movs	r2, #45	; 0x2d
 800397e:	425b      	negs	r3, r3
 8003980:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003984:	4962      	ldr	r1, [pc, #392]	; (8003b10 <_printf_i+0x23c>)
 8003986:	220a      	movs	r2, #10
 8003988:	e017      	b.n	80039ba <_printf_i+0xe6>
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003992:	d003      	beq.n	800399c <_printf_i+0xc8>
 8003994:	1d08      	adds	r0, r1, #4
 8003996:	6018      	str	r0, [r3, #0]
 8003998:	680b      	ldr	r3, [r1, #0]
 800399a:	e006      	b.n	80039aa <_printf_i+0xd6>
 800399c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039a0:	f101 0004 	add.w	r0, r1, #4
 80039a4:	6018      	str	r0, [r3, #0]
 80039a6:	d0f7      	beq.n	8003998 <_printf_i+0xc4>
 80039a8:	880b      	ldrh	r3, [r1, #0]
 80039aa:	2a6f      	cmp	r2, #111	; 0x6f
 80039ac:	bf14      	ite	ne
 80039ae:	220a      	movne	r2, #10
 80039b0:	2208      	moveq	r2, #8
 80039b2:	4957      	ldr	r1, [pc, #348]	; (8003b10 <_printf_i+0x23c>)
 80039b4:	2000      	movs	r0, #0
 80039b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80039ba:	6865      	ldr	r5, [r4, #4]
 80039bc:	2d00      	cmp	r5, #0
 80039be:	60a5      	str	r5, [r4, #8]
 80039c0:	f2c0 809c 	blt.w	8003afc <_printf_i+0x228>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	f020 0004 	bic.w	r0, r0, #4
 80039ca:	6020      	str	r0, [r4, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d13f      	bne.n	8003a50 <_printf_i+0x17c>
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	f040 8095 	bne.w	8003b00 <_printf_i+0x22c>
 80039d6:	4675      	mov	r5, lr
 80039d8:	2a08      	cmp	r2, #8
 80039da:	d10b      	bne.n	80039f4 <_printf_i+0x120>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	07da      	lsls	r2, r3, #31
 80039e0:	d508      	bpl.n	80039f4 <_printf_i+0x120>
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	6862      	ldr	r2, [r4, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	bfde      	ittt	le
 80039ea:	2330      	movle	r3, #48	; 0x30
 80039ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039f4:	ebae 0305 	sub.w	r3, lr, r5
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	f8cd 8000 	str.w	r8, [sp]
 80039fe:	463b      	mov	r3, r7
 8003a00:	aa03      	add	r2, sp, #12
 8003a02:	4621      	mov	r1, r4
 8003a04:	4630      	mov	r0, r6
 8003a06:	f7ff feed 	bl	80037e4 <_printf_common>
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d155      	bne.n	8003aba <_printf_i+0x1e6>
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a12:	b005      	add	sp, #20
 8003a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a18:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003a1c:	493c      	ldr	r1, [pc, #240]	; (8003b10 <_printf_i+0x23c>)
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a26:	f100 0504 	add.w	r5, r0, #4
 8003a2a:	601d      	str	r5, [r3, #0]
 8003a2c:	d001      	beq.n	8003a32 <_printf_i+0x15e>
 8003a2e:	6803      	ldr	r3, [r0, #0]
 8003a30:	e002      	b.n	8003a38 <_printf_i+0x164>
 8003a32:	0655      	lsls	r5, r2, #25
 8003a34:	d5fb      	bpl.n	8003a2e <_printf_i+0x15a>
 8003a36:	8803      	ldrh	r3, [r0, #0]
 8003a38:	07d0      	lsls	r0, r2, #31
 8003a3a:	bf44      	itt	mi
 8003a3c:	f042 0220 	orrmi.w	r2, r2, #32
 8003a40:	6022      	strmi	r2, [r4, #0]
 8003a42:	b91b      	cbnz	r3, 8003a4c <_printf_i+0x178>
 8003a44:	6822      	ldr	r2, [r4, #0]
 8003a46:	f022 0220 	bic.w	r2, r2, #32
 8003a4a:	6022      	str	r2, [r4, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	e7b1      	b.n	80039b4 <_printf_i+0xe0>
 8003a50:	4675      	mov	r5, lr
 8003a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a56:	fb02 3310 	mls	r3, r2, r0, r3
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a60:	4603      	mov	r3, r0
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d1f5      	bne.n	8003a52 <_printf_i+0x17e>
 8003a66:	e7b7      	b.n	80039d8 <_printf_i+0x104>
 8003a68:	6808      	ldr	r0, [r1, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a70:	6949      	ldr	r1, [r1, #20]
 8003a72:	d004      	beq.n	8003a7e <_printf_i+0x1aa>
 8003a74:	1d10      	adds	r0, r2, #4
 8003a76:	6018      	str	r0, [r3, #0]
 8003a78:	6813      	ldr	r3, [r2, #0]
 8003a7a:	6019      	str	r1, [r3, #0]
 8003a7c:	e007      	b.n	8003a8e <_printf_i+0x1ba>
 8003a7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a82:	f102 0004 	add.w	r0, r2, #4
 8003a86:	6018      	str	r0, [r3, #0]
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	d0f6      	beq.n	8003a7a <_printf_i+0x1a6>
 8003a8c:	8019      	strh	r1, [r3, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	4675      	mov	r5, lr
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	e7b1      	b.n	80039fa <_printf_i+0x126>
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	1d11      	adds	r1, r2, #4
 8003a9a:	6019      	str	r1, [r3, #0]
 8003a9c:	6815      	ldr	r5, [r2, #0]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	6862      	ldr	r2, [r4, #4]
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f836 	bl	8003b14 <memchr>
 8003aa8:	b108      	cbz	r0, 8003aae <_printf_i+0x1da>
 8003aaa:	1b40      	subs	r0, r0, r5
 8003aac:	6060      	str	r0, [r4, #4]
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab8:	e79f      	b.n	80039fa <_printf_i+0x126>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	462a      	mov	r2, r5
 8003abe:	4639      	mov	r1, r7
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	47c0      	blx	r8
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d0a2      	beq.n	8003a0e <_printf_i+0x13a>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	079b      	lsls	r3, r3, #30
 8003acc:	d507      	bpl.n	8003ade <_printf_i+0x20a>
 8003ace:	2500      	movs	r5, #0
 8003ad0:	f104 0919 	add.w	r9, r4, #25
 8003ad4:	68e3      	ldr	r3, [r4, #12]
 8003ad6:	9a03      	ldr	r2, [sp, #12]
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	429d      	cmp	r5, r3
 8003adc:	db05      	blt.n	8003aea <_printf_i+0x216>
 8003ade:	68e0      	ldr	r0, [r4, #12]
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	4298      	cmp	r0, r3
 8003ae4:	bfb8      	it	lt
 8003ae6:	4618      	movlt	r0, r3
 8003ae8:	e793      	b.n	8003a12 <_printf_i+0x13e>
 8003aea:	2301      	movs	r3, #1
 8003aec:	464a      	mov	r2, r9
 8003aee:	4639      	mov	r1, r7
 8003af0:	4630      	mov	r0, r6
 8003af2:	47c0      	blx	r8
 8003af4:	3001      	adds	r0, #1
 8003af6:	d08a      	beq.n	8003a0e <_printf_i+0x13a>
 8003af8:	3501      	adds	r5, #1
 8003afa:	e7eb      	b.n	8003ad4 <_printf_i+0x200>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1a7      	bne.n	8003a50 <_printf_i+0x17c>
 8003b00:	780b      	ldrb	r3, [r1, #0]
 8003b02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b0a:	e765      	b.n	80039d8 <_printf_i+0x104>
 8003b0c:	080040f7 	.word	0x080040f7
 8003b10:	080040e6 	.word	0x080040e6

08003b14 <memchr>:
 8003b14:	b510      	push	{r4, lr}
 8003b16:	b2c9      	uxtb	r1, r1
 8003b18:	4402      	add	r2, r0
 8003b1a:	4290      	cmp	r0, r2
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	d101      	bne.n	8003b24 <memchr+0x10>
 8003b20:	2000      	movs	r0, #0
 8003b22:	bd10      	pop	{r4, pc}
 8003b24:	781c      	ldrb	r4, [r3, #0]
 8003b26:	3001      	adds	r0, #1
 8003b28:	428c      	cmp	r4, r1
 8003b2a:	d1f6      	bne.n	8003b1a <memchr+0x6>
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <memmove>:
 8003b30:	4288      	cmp	r0, r1
 8003b32:	b510      	push	{r4, lr}
 8003b34:	eb01 0302 	add.w	r3, r1, r2
 8003b38:	d803      	bhi.n	8003b42 <memmove+0x12>
 8003b3a:	1e42      	subs	r2, r0, #1
 8003b3c:	4299      	cmp	r1, r3
 8003b3e:	d10c      	bne.n	8003b5a <memmove+0x2a>
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	4298      	cmp	r0, r3
 8003b44:	d2f9      	bcs.n	8003b3a <memmove+0xa>
 8003b46:	1881      	adds	r1, r0, r2
 8003b48:	1ad2      	subs	r2, r2, r3
 8003b4a:	42d3      	cmn	r3, r2
 8003b4c:	d100      	bne.n	8003b50 <memmove+0x20>
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b58:	e7f7      	b.n	8003b4a <memmove+0x1a>
 8003b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b62:	e7eb      	b.n	8003b3c <memmove+0xc>

08003b64 <_free_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4605      	mov	r5, r0
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d043      	beq.n	8003bf4 <_free_r+0x90>
 8003b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b70:	1f0c      	subs	r4, r1, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bfb8      	it	lt
 8003b76:	18e4      	addlt	r4, r4, r3
 8003b78:	f000 f8d4 	bl	8003d24 <__malloc_lock>
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <_free_r+0x94>)
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	4610      	mov	r0, r2
 8003b82:	b933      	cbnz	r3, 8003b92 <_free_r+0x2e>
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	6014      	str	r4, [r2, #0]
 8003b88:	4628      	mov	r0, r5
 8003b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b8e:	f000 b8ca 	b.w	8003d26 <__malloc_unlock>
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d90b      	bls.n	8003bae <_free_r+0x4a>
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	1862      	adds	r2, r4, r1
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	bf01      	itttt	eq
 8003b9e:	681a      	ldreq	r2, [r3, #0]
 8003ba0:	685b      	ldreq	r3, [r3, #4]
 8003ba2:	1852      	addeq	r2, r2, r1
 8003ba4:	6022      	streq	r2, [r4, #0]
 8003ba6:	6063      	str	r3, [r4, #4]
 8003ba8:	6004      	str	r4, [r0, #0]
 8003baa:	e7ed      	b.n	8003b88 <_free_r+0x24>
 8003bac:	4613      	mov	r3, r2
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	b10a      	cbz	r2, 8003bb6 <_free_r+0x52>
 8003bb2:	42a2      	cmp	r2, r4
 8003bb4:	d9fa      	bls.n	8003bac <_free_r+0x48>
 8003bb6:	6819      	ldr	r1, [r3, #0]
 8003bb8:	1858      	adds	r0, r3, r1
 8003bba:	42a0      	cmp	r0, r4
 8003bbc:	d10b      	bne.n	8003bd6 <_free_r+0x72>
 8003bbe:	6820      	ldr	r0, [r4, #0]
 8003bc0:	4401      	add	r1, r0
 8003bc2:	1858      	adds	r0, r3, r1
 8003bc4:	4282      	cmp	r2, r0
 8003bc6:	6019      	str	r1, [r3, #0]
 8003bc8:	d1de      	bne.n	8003b88 <_free_r+0x24>
 8003bca:	6810      	ldr	r0, [r2, #0]
 8003bcc:	6852      	ldr	r2, [r2, #4]
 8003bce:	4401      	add	r1, r0
 8003bd0:	6019      	str	r1, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	e7d8      	b.n	8003b88 <_free_r+0x24>
 8003bd6:	d902      	bls.n	8003bde <_free_r+0x7a>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	e7d4      	b.n	8003b88 <_free_r+0x24>
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	1821      	adds	r1, r4, r0
 8003be2:	428a      	cmp	r2, r1
 8003be4:	bf01      	itttt	eq
 8003be6:	6811      	ldreq	r1, [r2, #0]
 8003be8:	6852      	ldreq	r2, [r2, #4]
 8003bea:	1809      	addeq	r1, r1, r0
 8003bec:	6021      	streq	r1, [r4, #0]
 8003bee:	6062      	str	r2, [r4, #4]
 8003bf0:	605c      	str	r4, [r3, #4]
 8003bf2:	e7c9      	b.n	8003b88 <_free_r+0x24>
 8003bf4:	bd38      	pop	{r3, r4, r5, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2000016c 	.word	0x2000016c

08003bfc <_malloc_r>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	1ccd      	adds	r5, r1, #3
 8003c00:	f025 0503 	bic.w	r5, r5, #3
 8003c04:	3508      	adds	r5, #8
 8003c06:	2d0c      	cmp	r5, #12
 8003c08:	bf38      	it	cc
 8003c0a:	250c      	movcc	r5, #12
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	4606      	mov	r6, r0
 8003c10:	db01      	blt.n	8003c16 <_malloc_r+0x1a>
 8003c12:	42a9      	cmp	r1, r5
 8003c14:	d903      	bls.n	8003c1e <_malloc_r+0x22>
 8003c16:	230c      	movs	r3, #12
 8003c18:	6033      	str	r3, [r6, #0]
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	f000 f881 	bl	8003d24 <__malloc_lock>
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <_malloc_r+0xb4>)
 8003c24:	6814      	ldr	r4, [r2, #0]
 8003c26:	4621      	mov	r1, r4
 8003c28:	b991      	cbnz	r1, 8003c50 <_malloc_r+0x54>
 8003c2a:	4c22      	ldr	r4, [pc, #136]	; (8003cb4 <_malloc_r+0xb8>)
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	b91b      	cbnz	r3, 8003c38 <_malloc_r+0x3c>
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 f867 	bl	8003d04 <_sbrk_r>
 8003c36:	6020      	str	r0, [r4, #0]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f000 f862 	bl	8003d04 <_sbrk_r>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d126      	bne.n	8003c92 <_malloc_r+0x96>
 8003c44:	230c      	movs	r3, #12
 8003c46:	4630      	mov	r0, r6
 8003c48:	6033      	str	r3, [r6, #0]
 8003c4a:	f000 f86c 	bl	8003d26 <__malloc_unlock>
 8003c4e:	e7e4      	b.n	8003c1a <_malloc_r+0x1e>
 8003c50:	680b      	ldr	r3, [r1, #0]
 8003c52:	1b5b      	subs	r3, r3, r5
 8003c54:	d41a      	bmi.n	8003c8c <_malloc_r+0x90>
 8003c56:	2b0b      	cmp	r3, #11
 8003c58:	d90f      	bls.n	8003c7a <_malloc_r+0x7e>
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	18cc      	adds	r4, r1, r3
 8003c5e:	50cd      	str	r5, [r1, r3]
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 f860 	bl	8003d26 <__malloc_unlock>
 8003c66:	f104 000b 	add.w	r0, r4, #11
 8003c6a:	1d23      	adds	r3, r4, #4
 8003c6c:	f020 0007 	bic.w	r0, r0, #7
 8003c70:	1ac3      	subs	r3, r0, r3
 8003c72:	d01b      	beq.n	8003cac <_malloc_r+0xb0>
 8003c74:	425a      	negs	r2, r3
 8003c76:	50e2      	str	r2, [r4, r3]
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
 8003c7a:	428c      	cmp	r4, r1
 8003c7c:	bf0b      	itete	eq
 8003c7e:	6863      	ldreq	r3, [r4, #4]
 8003c80:	684b      	ldrne	r3, [r1, #4]
 8003c82:	6013      	streq	r3, [r2, #0]
 8003c84:	6063      	strne	r3, [r4, #4]
 8003c86:	bf18      	it	ne
 8003c88:	460c      	movne	r4, r1
 8003c8a:	e7e9      	b.n	8003c60 <_malloc_r+0x64>
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	6849      	ldr	r1, [r1, #4]
 8003c90:	e7ca      	b.n	8003c28 <_malloc_r+0x2c>
 8003c92:	1cc4      	adds	r4, r0, #3
 8003c94:	f024 0403 	bic.w	r4, r4, #3
 8003c98:	42a0      	cmp	r0, r4
 8003c9a:	d005      	beq.n	8003ca8 <_malloc_r+0xac>
 8003c9c:	1a21      	subs	r1, r4, r0
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f000 f830 	bl	8003d04 <_sbrk_r>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d0cd      	beq.n	8003c44 <_malloc_r+0x48>
 8003ca8:	6025      	str	r5, [r4, #0]
 8003caa:	e7d9      	b.n	8003c60 <_malloc_r+0x64>
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000016c 	.word	0x2000016c
 8003cb4:	20000170 	.word	0x20000170

08003cb8 <_realloc_r>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	4607      	mov	r7, r0
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	460e      	mov	r6, r1
 8003cc0:	b921      	cbnz	r1, 8003ccc <_realloc_r+0x14>
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003cc8:	f7ff bf98 	b.w	8003bfc <_malloc_r>
 8003ccc:	b922      	cbnz	r2, 8003cd8 <_realloc_r+0x20>
 8003cce:	f7ff ff49 	bl	8003b64 <_free_r>
 8003cd2:	4625      	mov	r5, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd8:	f000 f826 	bl	8003d28 <_malloc_usable_size_r>
 8003cdc:	4284      	cmp	r4, r0
 8003cde:	d90f      	bls.n	8003d00 <_realloc_r+0x48>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	f7ff ff8a 	bl	8003bfc <_malloc_r>
 8003ce8:	4605      	mov	r5, r0
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d0f2      	beq.n	8003cd4 <_realloc_r+0x1c>
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	f7ff fbef 	bl	80034d4 <memcpy>
 8003cf6:	4631      	mov	r1, r6
 8003cf8:	4638      	mov	r0, r7
 8003cfa:	f7ff ff33 	bl	8003b64 <_free_r>
 8003cfe:	e7e9      	b.n	8003cd4 <_realloc_r+0x1c>
 8003d00:	4635      	mov	r5, r6
 8003d02:	e7e7      	b.n	8003cd4 <_realloc_r+0x1c>

08003d04 <_sbrk_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	2300      	movs	r3, #0
 8003d08:	4c05      	ldr	r4, [pc, #20]	; (8003d20 <_sbrk_r+0x1c>)
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	f7fe f804 	bl	8001d1c <_sbrk>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_sbrk_r+0x1a>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_sbrk_r+0x1a>
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	20000178 	.word	0x20000178

08003d24 <__malloc_lock>:
 8003d24:	4770      	bx	lr

08003d26 <__malloc_unlock>:
 8003d26:	4770      	bx	lr

08003d28 <_malloc_usable_size_r>:
 8003d28:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	f1a0 0004 	sub.w	r0, r0, #4
 8003d32:	bfbc      	itt	lt
 8003d34:	580b      	ldrlt	r3, [r1, r0]
 8003d36:	18c0      	addlt	r0, r0, r3
 8003d38:	4770      	bx	lr

08003d3a <abort>:
 8003d3a:	b508      	push	{r3, lr}
 8003d3c:	2006      	movs	r0, #6
 8003d3e:	f000 f82b 	bl	8003d98 <raise>
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7fd ffe4 	bl	8001d10 <_exit>

08003d48 <_raise_r>:
 8003d48:	291f      	cmp	r1, #31
 8003d4a:	b538      	push	{r3, r4, r5, lr}
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	460d      	mov	r5, r1
 8003d50:	d904      	bls.n	8003d5c <_raise_r+0x14>
 8003d52:	2316      	movs	r3, #22
 8003d54:	6003      	str	r3, [r0, #0]
 8003d56:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d5e:	b112      	cbz	r2, 8003d66 <_raise_r+0x1e>
 8003d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d64:	b94b      	cbnz	r3, 8003d7a <_raise_r+0x32>
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 f830 	bl	8003dcc <_getpid_r>
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4601      	mov	r1, r0
 8003d70:	4620      	mov	r0, r4
 8003d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d76:	f000 b817 	b.w	8003da8 <_kill_r>
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d00a      	beq.n	8003d94 <_raise_r+0x4c>
 8003d7e:	1c59      	adds	r1, r3, #1
 8003d80:	d103      	bne.n	8003d8a <_raise_r+0x42>
 8003d82:	2316      	movs	r3, #22
 8003d84:	6003      	str	r3, [r0, #0]
 8003d86:	2001      	movs	r0, #1
 8003d88:	bd38      	pop	{r3, r4, r5, pc}
 8003d8a:	2400      	movs	r4, #0
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d92:	4798      	blx	r3
 8003d94:	2000      	movs	r0, #0
 8003d96:	bd38      	pop	{r3, r4, r5, pc}

08003d98 <raise>:
 8003d98:	4b02      	ldr	r3, [pc, #8]	; (8003da4 <raise+0xc>)
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f7ff bfd3 	b.w	8003d48 <_raise_r>
 8003da2:	bf00      	nop
 8003da4:	20000010 	.word	0x20000010

08003da8 <_kill_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	2300      	movs	r3, #0
 8003dac:	4c06      	ldr	r4, [pc, #24]	; (8003dc8 <_kill_r+0x20>)
 8003dae:	4605      	mov	r5, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	f7fd ffa3 	bl	8001d00 <_kill>
 8003dba:	1c43      	adds	r3, r0, #1
 8003dbc:	d102      	bne.n	8003dc4 <_kill_r+0x1c>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	b103      	cbz	r3, 8003dc4 <_kill_r+0x1c>
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	bd38      	pop	{r3, r4, r5, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000178 	.word	0x20000178

08003dcc <_getpid_r>:
 8003dcc:	f7fd bf96 	b.w	8001cfc <_getpid>

08003dd0 <_init>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr

08003ddc <_fini>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr
