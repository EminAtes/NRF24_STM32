
NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08008340  08008340  00018340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000168  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001b8  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008bcc  08008bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000680  20000000  08008bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000140  20000680  08009250  00020680  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200007c0  08009250  000207c0  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001741e  00000000  00000000  000206a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002951  00000000  00000000  00037ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001010  00000000  00000000  0003a418  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f08  00000000  00000000  0003b428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006dce  00000000  00000000  0003c330  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004d24  00000000  00000000  000430fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00047e22  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005388  00000000  00000000  00047ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000680 	.word	0x20000680
 800012c:	00000000 	.word	0x00000000
 8000130:	08008328 	.word	0x08008328

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000684 	.word	0x20000684
 800014c:	08008328 	.word	0x08008328

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_uldivmod>:
 8000a80:	b953      	cbnz	r3, 8000a98 <__aeabi_uldivmod+0x18>
 8000a82:	b94a      	cbnz	r2, 8000a98 <__aeabi_uldivmod+0x18>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	bf08      	it	eq
 8000a88:	2800      	cmpeq	r0, #0
 8000a8a:	bf1c      	itt	ne
 8000a8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a90:	f04f 30ff 	movne.w	r0, #4294967295
 8000a94:	f001 b900 	b.w	8001c98 <__aeabi_idiv0>
 8000a98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa0:	f000 f806 	bl	8000ab0 <__udivmoddi4>
 8000aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <__udivmoddi4>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	4604      	mov	r4, r0
 8000aba:	9d08      	ldr	r5, [sp, #32]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__udivmoddi4+0xb2>
 8000ac0:	428a      	cmp	r2, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	d96c      	bls.n	8000ba0 <__udivmoddi4+0xf0>
 8000ac6:	fab2 fe82 	clz	lr, r2
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d00b      	beq.n	8000ae8 <__udivmoddi4+0x38>
 8000ad0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ad8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000adc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000ae4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ae8:	0c3a      	lsrs	r2, r7, #16
 8000aea:	fbbc f9f2 	udiv	r9, ip, r2
 8000aee:	b2bb      	uxth	r3, r7
 8000af0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000af4:	fb09 fa03 	mul.w	sl, r9, r3
 8000af8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000afc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000b00:	45b2      	cmp	sl, r6
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x6a>
 8000b04:	19f6      	adds	r6, r6, r7
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	f080 8125 	bcs.w	8000d58 <__udivmoddi4+0x2a8>
 8000b0e:	45b2      	cmp	sl, r6
 8000b10:	f240 8122 	bls.w	8000d58 <__udivmoddi4+0x2a8>
 8000b14:	f1a9 0902 	sub.w	r9, r9, #2
 8000b18:	443e      	add	r6, r7
 8000b1a:	eba6 060a 	sub.w	r6, r6, sl
 8000b1e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000b22:	fb02 6610 	mls	r6, r2, r0, r6
 8000b26:	fb00 f303 	mul.w	r3, r0, r3
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x98>
 8000b34:	19e4      	adds	r4, r4, r7
 8000b36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3a:	f080 810b 	bcs.w	8000d54 <__udivmoddi4+0x2a4>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	f240 8108 	bls.w	8000d54 <__udivmoddi4+0x2a4>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	1ae4      	subs	r4, r4, r3
 8000b4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d062      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5a:	602c      	str	r4, [r5, #0]
 8000b5c:	606b      	str	r3, [r5, #4]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0xc6>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d055      	beq.n	8000c16 <__udivmoddi4+0x166>
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000b70:	4608      	mov	r0, r1
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	f040 808f 	bne.w	8000c9e <__udivmoddi4+0x1ee>
 8000b80:	42b3      	cmp	r3, r6
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xda>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80fc 	bhi.w	8000d82 <__udivmoddi4+0x2d2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	46b4      	mov	ip, r6
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d040      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	b912      	cbnz	r2, 8000ba8 <__udivmoddi4+0xf8>
 8000ba2:	2701      	movs	r7, #1
 8000ba4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ba8:	fab7 fe87 	clz	lr, r7
 8000bac:	f1be 0f00 	cmp.w	lr, #0
 8000bb0:	d135      	bne.n	8000c1e <__udivmoddi4+0x16e>
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	1bf6      	subs	r6, r6, r7
 8000bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000bba:	fa1f f887 	uxth.w	r8, r7
 8000bbe:	fbb6 f2fc 	udiv	r2, r6, ip
 8000bc2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000bc6:	fb08 f002 	mul.w	r0, r8, r2
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d907      	bls.n	8000be4 <__udivmoddi4+0x134>
 8000bd4:	19f6      	adds	r6, r6, r7
 8000bd6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x132>
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	f200 80d2 	bhi.w	8000d86 <__udivmoddi4+0x2d6>
 8000be2:	461a      	mov	r2, r3
 8000be4:	1a36      	subs	r6, r6, r0
 8000be6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000bea:	fb0c 6610 	mls	r6, ip, r0, r6
 8000bee:	fb08 f800 	mul.w	r8, r8, r0
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	d907      	bls.n	8000c0c <__udivmoddi4+0x15c>
 8000bfc:	19e4      	adds	r4, r4, r7
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x15a>
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	f200 80b9 	bhi.w	8000d7c <__udivmoddi4+0x2cc>
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	eba4 0408 	sub.w	r4, r4, r8
 8000c10:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c14:	e79c      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c22:	f1ce 0320 	rsb	r3, lr, #32
 8000c26:	fa26 f203 	lsr.w	r2, r6, r3
 8000c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c2e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000c32:	fa1f f887 	uxth.w	r8, r7
 8000c36:	fb0c 2211 	mls	r2, ip, r1, r2
 8000c3a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c3e:	fa20 f303 	lsr.w	r3, r0, r3
 8000c42:	fb01 f908 	mul.w	r9, r1, r8
 8000c46:	4333      	orrs	r3, r6
 8000c48:	0c1e      	lsrs	r6, r3, #16
 8000c4a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c4e:	45b1      	cmp	r9, r6
 8000c50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x1ba>
 8000c56:	19f6      	adds	r6, r6, r7
 8000c58:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c5c:	f080 808c 	bcs.w	8000d78 <__udivmoddi4+0x2c8>
 8000c60:	45b1      	cmp	r9, r6
 8000c62:	f240 8089 	bls.w	8000d78 <__udivmoddi4+0x2c8>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443e      	add	r6, r7
 8000c6a:	eba6 0609 	sub.w	r6, r6, r9
 8000c6e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000c72:	fb0c 6210 	mls	r2, ip, r0, r6
 8000c76:	fb00 f908 	mul.w	r9, r0, r8
 8000c7a:	b29e      	uxth	r6, r3
 8000c7c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c80:	45b1      	cmp	r9, r6
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1e4>
 8000c84:	19f6      	adds	r6, r6, r7
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d271      	bcs.n	8000d70 <__udivmoddi4+0x2c0>
 8000c8c:	45b1      	cmp	r9, r6
 8000c8e:	d96f      	bls.n	8000d70 <__udivmoddi4+0x2c0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443e      	add	r6, r7
 8000c94:	eba6 0609 	sub.w	r6, r6, r9
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	e78f      	b.n	8000bbe <__udivmoddi4+0x10e>
 8000c9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ca2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	ea48 0303 	orr.w	r3, r8, r3
 8000cac:	fa26 f407 	lsr.w	r4, r6, r7
 8000cb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000cb4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb8:	fa1f fc83 	uxth.w	ip, r3
 8000cbc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cc0:	408e      	lsls	r6, r1
 8000cc2:	fa20 f807 	lsr.w	r8, r0, r7
 8000cc6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000cca:	ea48 0806 	orr.w	r8, r8, r6
 8000cce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000cd2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	fa02 f201 	lsl.w	r2, r2, r1
 8000cdc:	fa00 f601 	lsl.w	r6, r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x244>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	d244      	bcs.n	8000d74 <__udivmoddi4+0x2c4>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d942      	bls.n	8000d74 <__udivmoddi4+0x2c4>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	441c      	add	r4, r3
 8000cf4:	eba4 040a 	sub.w	r4, r4, sl
 8000cf8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cfc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d00:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d04:	fa1f f888 	uxth.w	r8, r8
 8000d08:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x270>
 8000d10:	18e4      	adds	r4, r4, r3
 8000d12:	f100 3eff 	add.w	lr, r0, #4294967295
 8000d16:	d229      	bcs.n	8000d6c <__udivmoddi4+0x2bc>
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d927      	bls.n	8000d6c <__udivmoddi4+0x2bc>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	441c      	add	r4, r3
 8000d20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d24:	fba0 8902 	umull	r8, r9, r0, r2
 8000d28:	eba4 0c0c 	sub.w	ip, r4, ip
 8000d2c:	45cc      	cmp	ip, r9
 8000d2e:	46c2      	mov	sl, r8
 8000d30:	46ce      	mov	lr, r9
 8000d32:	d315      	bcc.n	8000d60 <__udivmoddi4+0x2b0>
 8000d34:	d012      	beq.n	8000d5c <__udivmoddi4+0x2ac>
 8000d36:	b155      	cbz	r5, 8000d4e <__udivmoddi4+0x29e>
 8000d38:	ebb6 030a 	subs.w	r3, r6, sl
 8000d3c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000d40:	fa06 f707 	lsl.w	r7, r6, r7
 8000d44:	40cb      	lsrs	r3, r1
 8000d46:	431f      	orrs	r7, r3
 8000d48:	40ce      	lsrs	r6, r1
 8000d4a:	602f      	str	r7, [r5, #0]
 8000d4c:	606e      	str	r6, [r5, #4]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	4610      	mov	r0, r2
 8000d56:	e6f7      	b.n	8000b48 <__udivmoddi4+0x98>
 8000d58:	4689      	mov	r9, r1
 8000d5a:	e6de      	b.n	8000b1a <__udivmoddi4+0x6a>
 8000d5c:	4546      	cmp	r6, r8
 8000d5e:	d2ea      	bcs.n	8000d36 <__udivmoddi4+0x286>
 8000d60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d64:	eb69 0e03 	sbc.w	lr, r9, r3
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7e4      	b.n	8000d36 <__udivmoddi4+0x286>
 8000d6c:	4670      	mov	r0, lr
 8000d6e:	e7d7      	b.n	8000d20 <__udivmoddi4+0x270>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e78f      	b.n	8000c94 <__udivmoddi4+0x1e4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7bd      	b.n	8000cf4 <__udivmoddi4+0x244>
 8000d78:	4611      	mov	r1, r2
 8000d7a:	e776      	b.n	8000c6a <__udivmoddi4+0x1ba>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	e744      	b.n	8000c0c <__udivmoddi4+0x15c>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e706      	b.n	8000b94 <__udivmoddi4+0xe4>
 8000d86:	3a02      	subs	r2, #2
 8000d88:	443e      	add	r6, r7
 8000d8a:	e72b      	b.n	8000be4 <__udivmoddi4+0x134>

08000d8c <selfrel_offset31>:
 8000d8c:	6803      	ldr	r3, [r0, #0]
 8000d8e:	005a      	lsls	r2, r3, #1
 8000d90:	bf4c      	ite	mi
 8000d92:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000d96:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000d9a:	4418      	add	r0, r3
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <search_EIT_table>:
 8000da0:	b361      	cbz	r1, 8000dfc <search_EIT_table+0x5c>
 8000da2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da6:	f101 3aff 	add.w	sl, r1, #4294967295
 8000daa:	4690      	mov	r8, r2
 8000dac:	4606      	mov	r6, r0
 8000dae:	46d1      	mov	r9, sl
 8000db0:	2700      	movs	r7, #0
 8000db2:	eb07 0409 	add.w	r4, r7, r9
 8000db6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000dba:	1064      	asrs	r4, r4, #1
 8000dbc:	00e5      	lsls	r5, r4, #3
 8000dbe:	1971      	adds	r1, r6, r5
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	f7ff ffe3 	bl	8000d8c <selfrel_offset31>
 8000dc6:	45a2      	cmp	sl, r4
 8000dc8:	4683      	mov	fp, r0
 8000dca:	f105 0008 	add.w	r0, r5, #8
 8000dce:	4430      	add	r0, r6
 8000dd0:	d009      	beq.n	8000de6 <search_EIT_table+0x46>
 8000dd2:	f7ff ffdb 	bl	8000d8c <selfrel_offset31>
 8000dd6:	45c3      	cmp	fp, r8
 8000dd8:	f100 30ff 	add.w	r0, r0, #4294967295
 8000ddc:	d805      	bhi.n	8000dea <search_EIT_table+0x4a>
 8000dde:	4540      	cmp	r0, r8
 8000de0:	d209      	bcs.n	8000df6 <search_EIT_table+0x56>
 8000de2:	1c67      	adds	r7, r4, #1
 8000de4:	e7e5      	b.n	8000db2 <search_EIT_table+0x12>
 8000de6:	45c3      	cmp	fp, r8
 8000de8:	d905      	bls.n	8000df6 <search_EIT_table+0x56>
 8000dea:	42a7      	cmp	r7, r4
 8000dec:	d002      	beq.n	8000df4 <search_EIT_table+0x54>
 8000dee:	f104 39ff 	add.w	r9, r4, #4294967295
 8000df2:	e7de      	b.n	8000db2 <search_EIT_table+0x12>
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4770      	bx	lr

08000e00 <__gnu_unwind_get_pr_addr>:
 8000e00:	2801      	cmp	r0, #1
 8000e02:	d007      	beq.n	8000e14 <__gnu_unwind_get_pr_addr+0x14>
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d007      	beq.n	8000e18 <__gnu_unwind_get_pr_addr+0x18>
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__gnu_unwind_get_pr_addr+0x1c>)
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	bf0c      	ite	eq
 8000e0e:	4618      	moveq	r0, r3
 8000e10:	2000      	movne	r0, #0
 8000e12:	4770      	bx	lr
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <__gnu_unwind_get_pr_addr+0x20>)
 8000e16:	4770      	bx	lr
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <__gnu_unwind_get_pr_addr+0x24>)
 8000e1a:	4770      	bx	lr
 8000e1c:	08001511 	.word	0x08001511
 8000e20:	08001515 	.word	0x08001515
 8000e24:	08001519 	.word	0x08001519

08000e28 <get_eit_entry>:
 8000e28:	b530      	push	{r4, r5, lr}
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <get_eit_entry+0x98>)
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	4604      	mov	r4, r0
 8000e30:	1e8d      	subs	r5, r1, #2
 8000e32:	b373      	cbz	r3, 8000e92 <get_eit_entry+0x6a>
 8000e34:	a901      	add	r1, sp, #4
 8000e36:	4628      	mov	r0, r5
 8000e38:	f3af 8000 	nop.w
 8000e3c:	b318      	cbz	r0, 8000e86 <get_eit_entry+0x5e>
 8000e3e:	9901      	ldr	r1, [sp, #4]
 8000e40:	462a      	mov	r2, r5
 8000e42:	f7ff ffad 	bl	8000da0 <search_EIT_table>
 8000e46:	4601      	mov	r1, r0
 8000e48:	b1e8      	cbz	r0, 8000e86 <get_eit_entry+0x5e>
 8000e4a:	f7ff ff9f 	bl	8000d8c <selfrel_offset31>
 8000e4e:	684b      	ldr	r3, [r1, #4]
 8000e50:	64a0      	str	r0, [r4, #72]	; 0x48
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d011      	beq.n	8000e7a <get_eit_entry+0x52>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db22      	blt.n	8000ea0 <get_eit_entry+0x78>
 8000e5a:	1d08      	adds	r0, r1, #4
 8000e5c:	f7ff ff96 	bl	8000d8c <selfrel_offset31>
 8000e60:	2300      	movs	r3, #0
 8000e62:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000e64:	6523      	str	r3, [r4, #80]	; 0x50
 8000e66:	6803      	ldr	r3, [r0, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db1e      	blt.n	8000eaa <get_eit_entry+0x82>
 8000e6c:	f7ff ff8e 	bl	8000d8c <selfrel_offset31>
 8000e70:	2300      	movs	r3, #0
 8000e72:	6120      	str	r0, [r4, #16]
 8000e74:	4618      	mov	r0, r3
 8000e76:	b003      	add	sp, #12
 8000e78:	bd30      	pop	{r4, r5, pc}
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	6122      	str	r2, [r4, #16]
 8000e82:	b003      	add	sp, #12
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	2309      	movs	r3, #9
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	6122      	str	r2, [r4, #16]
 8000e8e:	b003      	add	sp, #12
 8000e90:	bd30      	pop	{r4, r5, pc}
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <get_eit_entry+0x9c>)
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <get_eit_entry+0xa0>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	1ac9      	subs	r1, r1, r3
 8000e9a:	10c9      	asrs	r1, r1, #3
 8000e9c:	9101      	str	r1, [sp, #4]
 8000e9e:	e7cf      	b.n	8000e40 <get_eit_entry+0x18>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	1d08      	adds	r0, r1, #4
 8000ea4:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000ea6:	6523      	str	r3, [r4, #80]	; 0x50
 8000ea8:	e7dd      	b.n	8000e66 <get_eit_entry+0x3e>
 8000eaa:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000eae:	f7ff ffa7 	bl	8000e00 <__gnu_unwind_get_pr_addr>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	6120      	str	r0, [r4, #16]
 8000eb6:	bf14      	ite	ne
 8000eb8:	2300      	movne	r3, #0
 8000eba:	2309      	moveq	r3, #9
 8000ebc:	e7da      	b.n	8000e74 <get_eit_entry+0x4c>
 8000ebe:	bf00      	nop
 8000ec0:	00000000 	.word	0x00000000
 8000ec4:	08008a10 	.word	0x08008a10
 8000ec8:	08008bc8 	.word	0x08008bc8

08000ecc <restore_non_core_regs>:
 8000ecc:	6803      	ldr	r3, [r0, #0]
 8000ece:	b510      	push	{r4, lr}
 8000ed0:	07da      	lsls	r2, r3, #31
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	d406      	bmi.n	8000ee4 <restore_non_core_regs+0x18>
 8000ed6:	079b      	lsls	r3, r3, #30
 8000ed8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000edc:	d509      	bpl.n	8000ef2 <restore_non_core_regs+0x26>
 8000ede:	f000 fc57 	bl	8001790 <__gnu_Unwind_Restore_VFP_D>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	0759      	lsls	r1, r3, #29
 8000ee6:	d509      	bpl.n	8000efc <restore_non_core_regs+0x30>
 8000ee8:	071a      	lsls	r2, r3, #28
 8000eea:	d50e      	bpl.n	8000f0a <restore_non_core_regs+0x3e>
 8000eec:	06db      	lsls	r3, r3, #27
 8000eee:	d513      	bpl.n	8000f18 <restore_non_core_regs+0x4c>
 8000ef0:	bd10      	pop	{r4, pc}
 8000ef2:	f000 fc45 	bl	8001780 <__gnu_Unwind_Restore_VFP>
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	0759      	lsls	r1, r3, #29
 8000efa:	d4f5      	bmi.n	8000ee8 <restore_non_core_regs+0x1c>
 8000efc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000f00:	f000 fc4e 	bl	80017a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	071a      	lsls	r2, r3, #28
 8000f08:	d4f0      	bmi.n	8000eec <restore_non_core_regs+0x20>
 8000f0a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f0e:	f000 fc4f 	bl	80017b0 <__gnu_Unwind_Restore_WMMXD>
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	06db      	lsls	r3, r3, #27
 8000f16:	d4eb      	bmi.n	8000ef0 <restore_non_core_regs+0x24>
 8000f18:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f20:	f000 bc8a 	b.w	8001838 <__gnu_Unwind_Restore_WMMXC>

08000f24 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000f24:	6803      	ldr	r3, [r0, #0]
 8000f26:	b103      	cbz	r3, 8000f2a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000f28:	4403      	add	r3, r0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__gnu_unwind_24bit.isra.1>:
 8000f30:	2009      	movs	r0, #9
 8000f32:	4770      	bx	lr

08000f34 <_Unwind_DebugHook>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <unwind_phase2>:
 8000f38:	b570      	push	{r4, r5, r6, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	460d      	mov	r5, r1
 8000f3e:	e008      	b.n	8000f52 <unwind_phase2+0x1a>
 8000f40:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000f42:	6923      	ldr	r3, [r4, #16]
 8000f44:	6162      	str	r2, [r4, #20]
 8000f46:	4621      	mov	r1, r4
 8000f48:	462a      	mov	r2, r5
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	4798      	blx	r3
 8000f4e:	2808      	cmp	r0, #8
 8000f50:	d108      	bne.n	8000f64 <unwind_phase2+0x2c>
 8000f52:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff ff67 	bl	8000e28 <get_eit_entry>
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d0ef      	beq.n	8000f40 <unwind_phase2+0x8>
 8000f60:	f007 f997 	bl	8008292 <abort>
 8000f64:	2807      	cmp	r0, #7
 8000f66:	d1fb      	bne.n	8000f60 <unwind_phase2+0x28>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f6c:	f7ff ffe2 	bl	8000f34 <_Unwind_DebugHook>
 8000f70:	1d28      	adds	r0, r5, #4
 8000f72:	f000 fbf9 	bl	8001768 <__restore_core_regs>
 8000f76:	bf00      	nop

08000f78 <unwind_phase2_forced>:
 8000f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f7c:	4605      	mov	r5, r0
 8000f7e:	2700      	movs	r7, #0
 8000f80:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000f84:	ac03      	add	r4, sp, #12
 8000f86:	1d0e      	adds	r6, r1, #4
 8000f88:	4692      	mov	sl, r2
 8000f8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f9a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000f9e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fa6:	ac02      	add	r4, sp, #8
 8000fa8:	4628      	mov	r0, r5
 8000faa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000fac:	6027      	str	r7, [r4, #0]
 8000fae:	f7ff ff3b 	bl	8000e28 <get_eit_entry>
 8000fb2:	f1ba 0f00 	cmp.w	sl, #0
 8000fb6:	4607      	mov	r7, r0
 8000fb8:	bf14      	ite	ne
 8000fba:	260a      	movne	r6, #10
 8000fbc:	2609      	moveq	r6, #9
 8000fbe:	b17f      	cbz	r7, 8000fe0 <unwind_phase2_forced+0x68>
 8000fc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fc2:	f046 0110 	orr.w	r1, r6, #16
 8000fc6:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000fca:	462a      	mov	r2, r5
 8000fcc:	6463      	str	r3, [r4, #68]	; 0x44
 8000fce:	2001      	movs	r0, #1
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	47c0      	blx	r8
 8000fd4:	bb78      	cbnz	r0, 8001036 <unwind_phase2_forced+0xbe>
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fe2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000fe6:	616b      	str	r3, [r5, #20]
 8000fe8:	4621      	mov	r1, r4
 8000fea:	a87a      	add	r0, sp, #488	; 0x1e8
 8000fec:	f004 fa54 	bl	8005498 <memcpy>
 8000ff0:	692b      	ldr	r3, [r5, #16]
 8000ff2:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	4798      	blx	r3
 8000ffa:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000ffc:	4682      	mov	sl, r0
 8000ffe:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001002:	4631      	mov	r1, r6
 8001004:	6463      	str	r3, [r4, #68]	; 0x44
 8001006:	462a      	mov	r2, r5
 8001008:	462b      	mov	r3, r5
 800100a:	2001      	movs	r0, #1
 800100c:	47c0      	blx	r8
 800100e:	b990      	cbnz	r0, 8001036 <unwind_phase2_forced+0xbe>
 8001010:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001014:	a97a      	add	r1, sp, #488	; 0x1e8
 8001016:	4620      	mov	r0, r4
 8001018:	f004 fa3e 	bl	8005498 <memcpy>
 800101c:	f1ba 0f08 	cmp.w	sl, #8
 8001020:	d106      	bne.n	8001030 <unwind_phase2_forced+0xb8>
 8001022:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001024:	4628      	mov	r0, r5
 8001026:	f7ff feff 	bl	8000e28 <get_eit_entry>
 800102a:	2609      	movs	r6, #9
 800102c:	4607      	mov	r7, r0
 800102e:	e7c6      	b.n	8000fbe <unwind_phase2_forced+0x46>
 8001030:	f1ba 0f07 	cmp.w	sl, #7
 8001034:	d005      	beq.n	8001042 <unwind_phase2_forced+0xca>
 8001036:	2709      	movs	r7, #9
 8001038:	4638      	mov	r0, r7
 800103a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001042:	4638      	mov	r0, r7
 8001044:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001046:	f7ff ff75 	bl	8000f34 <_Unwind_DebugHook>
 800104a:	a803      	add	r0, sp, #12
 800104c:	f000 fb8c 	bl	8001768 <__restore_core_regs>

08001050 <_Unwind_GetCFA>:
 8001050:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001052:	4770      	bx	lr

08001054 <__gnu_Unwind_RaiseException>:
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	f04f 3eff 	mov.w	lr, #4294967295
 800105a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800105c:	b0f9      	sub	sp, #484	; 0x1e4
 800105e:	640b      	str	r3, [r1, #64]	; 0x40
 8001060:	1d0e      	adds	r6, r1, #4
 8001062:	ad01      	add	r5, sp, #4
 8001064:	460f      	mov	r7, r1
 8001066:	4604      	mov	r4, r0
 8001068:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800106e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001070:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001074:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001078:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800107c:	f8cd e000 	str.w	lr, [sp]
 8001080:	e006      	b.n	8001090 <__gnu_Unwind_RaiseException+0x3c>
 8001082:	6923      	ldr	r3, [r4, #16]
 8001084:	466a      	mov	r2, sp
 8001086:	4621      	mov	r1, r4
 8001088:	4798      	blx	r3
 800108a:	2808      	cmp	r0, #8
 800108c:	4605      	mov	r5, r0
 800108e:	d108      	bne.n	80010a2 <__gnu_Unwind_RaiseException+0x4e>
 8001090:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff fec8 	bl	8000e28 <get_eit_entry>
 8001098:	2800      	cmp	r0, #0
 800109a:	d0f2      	beq.n	8001082 <__gnu_Unwind_RaiseException+0x2e>
 800109c:	2009      	movs	r0, #9
 800109e:	b079      	add	sp, #484	; 0x1e4
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	4668      	mov	r0, sp
 80010a4:	f7ff ff12 	bl	8000ecc <restore_non_core_regs>
 80010a8:	2d06      	cmp	r5, #6
 80010aa:	d1f7      	bne.n	800109c <__gnu_Unwind_RaiseException+0x48>
 80010ac:	4639      	mov	r1, r7
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff ff42 	bl	8000f38 <unwind_phase2>

080010b4 <__gnu_Unwind_ForcedUnwind>:
 80010b4:	b430      	push	{r4, r5}
 80010b6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80010b8:	60c1      	str	r1, [r0, #12]
 80010ba:	6182      	str	r2, [r0, #24]
 80010bc:	4619      	mov	r1, r3
 80010be:	641d      	str	r5, [r3, #64]	; 0x40
 80010c0:	2200      	movs	r2, #0
 80010c2:	bc30      	pop	{r4, r5}
 80010c4:	e758      	b.n	8000f78 <unwind_phase2_forced>
 80010c6:	bf00      	nop

080010c8 <__gnu_Unwind_Resume>:
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	6943      	ldr	r3, [r0, #20]
 80010cc:	68c6      	ldr	r6, [r0, #12]
 80010ce:	640b      	str	r3, [r1, #64]	; 0x40
 80010d0:	b126      	cbz	r6, 80010dc <__gnu_Unwind_Resume+0x14>
 80010d2:	2201      	movs	r2, #1
 80010d4:	f7ff ff50 	bl	8000f78 <unwind_phase2_forced>
 80010d8:	f007 f8db 	bl	8008292 <abort>
 80010dc:	6903      	ldr	r3, [r0, #16]
 80010de:	460a      	mov	r2, r1
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
 80010e4:	4601      	mov	r1, r0
 80010e6:	2002      	movs	r0, #2
 80010e8:	4798      	blx	r3
 80010ea:	2807      	cmp	r0, #7
 80010ec:	d007      	beq.n	80010fe <__gnu_Unwind_Resume+0x36>
 80010ee:	2808      	cmp	r0, #8
 80010f0:	d103      	bne.n	80010fa <__gnu_Unwind_Resume+0x32>
 80010f2:	4629      	mov	r1, r5
 80010f4:	4620      	mov	r0, r4
 80010f6:	f7ff ff1f 	bl	8000f38 <unwind_phase2>
 80010fa:	f007 f8ca 	bl	8008292 <abort>
 80010fe:	4630      	mov	r0, r6
 8001100:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001102:	f7ff ff17 	bl	8000f34 <_Unwind_DebugHook>
 8001106:	1d28      	adds	r0, r5, #4
 8001108:	f000 fb2e 	bl	8001768 <__restore_core_regs>

0800110c <__gnu_Unwind_Resume_or_Rethrow>:
 800110c:	68c2      	ldr	r2, [r0, #12]
 800110e:	b12a      	cbz	r2, 800111c <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8001110:	b410      	push	{r4}
 8001112:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001114:	2200      	movs	r2, #0
 8001116:	640c      	str	r4, [r1, #64]	; 0x40
 8001118:	bc10      	pop	{r4}
 800111a:	e72d      	b.n	8000f78 <unwind_phase2_forced>
 800111c:	e79a      	b.n	8001054 <__gnu_Unwind_RaiseException>
 800111e:	bf00      	nop

08001120 <_Unwind_Complete>:
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <_Unwind_DeleteException>:
 8001124:	6883      	ldr	r3, [r0, #8]
 8001126:	b113      	cbz	r3, 800112e <_Unwind_DeleteException+0xa>
 8001128:	4601      	mov	r1, r0
 800112a:	2001      	movs	r0, #1
 800112c:	4718      	bx	r3
 800112e:	4770      	bx	lr

08001130 <_Unwind_VRS_Get>:
 8001130:	b500      	push	{lr}
 8001132:	2904      	cmp	r1, #4
 8001134:	d807      	bhi.n	8001146 <_Unwind_VRS_Get+0x16>
 8001136:	e8df f001 	tbb	[pc, r1]
 800113a:	0903      	.short	0x0903
 800113c:	0906      	.short	0x0906
 800113e:	09          	.byte	0x09
 800113f:	00          	.byte	0x00
 8001140:	b90b      	cbnz	r3, 8001146 <_Unwind_VRS_Get+0x16>
 8001142:	2a0f      	cmp	r2, #15
 8001144:	d905      	bls.n	8001152 <_Unwind_VRS_Get+0x22>
 8001146:	2002      	movs	r0, #2
 8001148:	f85d fb04 	ldr.w	pc, [sp], #4
 800114c:	2001      	movs	r0, #1
 800114e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001152:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001156:	6852      	ldr	r2, [r2, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	9b01      	ldr	r3, [sp, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001162:	bf00      	nop

08001164 <_Unwind_GetGR>:
 8001164:	2300      	movs	r3, #0
 8001166:	b510      	push	{r4, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	ac03      	add	r4, sp, #12
 800116c:	460a      	mov	r2, r1
 800116e:	9400      	str	r4, [sp, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff ffdd 	bl	8001130 <_Unwind_VRS_Get>
 8001176:	9803      	ldr	r0, [sp, #12]
 8001178:	b004      	add	sp, #16
 800117a:	bd10      	pop	{r4, pc}

0800117c <_Unwind_VRS_Set>:
 800117c:	b500      	push	{lr}
 800117e:	2904      	cmp	r1, #4
 8001180:	d807      	bhi.n	8001192 <_Unwind_VRS_Set+0x16>
 8001182:	e8df f001 	tbb	[pc, r1]
 8001186:	0903      	.short	0x0903
 8001188:	0906      	.short	0x0906
 800118a:	09          	.byte	0x09
 800118b:	00          	.byte	0x00
 800118c:	b90b      	cbnz	r3, 8001192 <_Unwind_VRS_Set+0x16>
 800118e:	2a0f      	cmp	r2, #15
 8001190:	d905      	bls.n	800119e <_Unwind_VRS_Set+0x22>
 8001192:	2002      	movs	r0, #2
 8001194:	f85d fb04 	ldr.w	pc, [sp], #4
 8001198:	2001      	movs	r0, #1
 800119a:	f85d fb04 	ldr.w	pc, [sp], #4
 800119e:	9901      	ldr	r1, [sp, #4]
 80011a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80011a4:	6809      	ldr	r1, [r1, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	6051      	str	r1, [r2, #4]
 80011aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ae:	bf00      	nop

080011b0 <_Unwind_SetGR>:
 80011b0:	2300      	movs	r3, #0
 80011b2:	b510      	push	{r4, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	ac04      	add	r4, sp, #16
 80011b8:	f844 2d04 	str.w	r2, [r4, #-4]!
 80011bc:	9400      	str	r4, [sp, #0]
 80011be:	460a      	mov	r2, r1
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff ffdb 	bl	800117c <_Unwind_VRS_Set>
 80011c6:	b004      	add	sp, #16
 80011c8:	bd10      	pop	{r4, pc}
 80011ca:	bf00      	nop

080011cc <__gnu_Unwind_Backtrace>:
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	f04f 3eff 	mov.w	lr, #4294967295
 80011d2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80011d4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	1d15      	adds	r5, r2, #4
 80011dc:	ac17      	add	r4, sp, #92	; 0x5c
 80011de:	4607      	mov	r7, r0
 80011e0:	460e      	mov	r6, r1
 80011e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011f6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80011fa:	e012      	b.n	8001222 <__gnu_Unwind_Backtrace+0x56>
 80011fc:	210c      	movs	r1, #12
 80011fe:	a816      	add	r0, sp, #88	; 0x58
 8001200:	466a      	mov	r2, sp
 8001202:	f7ff ffd5 	bl	80011b0 <_Unwind_SetGR>
 8001206:	4631      	mov	r1, r6
 8001208:	a816      	add	r0, sp, #88	; 0x58
 800120a:	47b8      	blx	r7
 800120c:	b978      	cbnz	r0, 800122e <__gnu_Unwind_Backtrace+0x62>
 800120e:	9b04      	ldr	r3, [sp, #16]
 8001210:	aa16      	add	r2, sp, #88	; 0x58
 8001212:	4669      	mov	r1, sp
 8001214:	2008      	movs	r0, #8
 8001216:	4798      	blx	r3
 8001218:	2805      	cmp	r0, #5
 800121a:	4604      	mov	r4, r0
 800121c:	d008      	beq.n	8001230 <__gnu_Unwind_Backtrace+0x64>
 800121e:	2809      	cmp	r0, #9
 8001220:	d005      	beq.n	800122e <__gnu_Unwind_Backtrace+0x62>
 8001222:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001224:	4668      	mov	r0, sp
 8001226:	f7ff fdff 	bl	8000e28 <get_eit_entry>
 800122a:	2800      	cmp	r0, #0
 800122c:	d0e6      	beq.n	80011fc <__gnu_Unwind_Backtrace+0x30>
 800122e:	2409      	movs	r4, #9
 8001230:	a816      	add	r0, sp, #88	; 0x58
 8001232:	f7ff fe4b 	bl	8000ecc <restore_non_core_regs>
 8001236:	4620      	mov	r0, r4
 8001238:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123e:	bf00      	nop

08001240 <__gnu_unwind_pr_common>:
 8001240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001244:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001246:	4691      	mov	r9, r2
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	b08b      	sub	sp, #44	; 0x2c
 800124c:	3404      	adds	r4, #4
 800124e:	460d      	mov	r5, r1
 8001250:	9207      	str	r2, [sp, #28]
 8001252:	9408      	str	r4, [sp, #32]
 8001254:	f000 0b03 	and.w	fp, r0, #3
 8001258:	461e      	mov	r6, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d160      	bne.n	8001320 <__gnu_unwind_pr_common+0xe0>
 800125e:	2303      	movs	r3, #3
 8001260:	0212      	lsls	r2, r2, #8
 8001262:	9207      	str	r2, [sp, #28]
 8001264:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001268:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800126c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800126e:	f1bb 0f02 	cmp.w	fp, #2
 8001272:	bf08      	it	eq
 8001274:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001276:	f013 0301 	ands.w	r3, r3, #1
 800127a:	d140      	bne.n	80012fe <__gnu_unwind_pr_common+0xbe>
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	f000 0308 	and.w	r3, r0, #8
 8001282:	9303      	str	r3, [sp, #12]
 8001284:	f8d4 8000 	ldr.w	r8, [r4]
 8001288:	f1b8 0f00 	cmp.w	r8, #0
 800128c:	d039      	beq.n	8001302 <__gnu_unwind_pr_common+0xc2>
 800128e:	2e02      	cmp	r6, #2
 8001290:	d043      	beq.n	800131a <__gnu_unwind_pr_common+0xda>
 8001292:	f8b4 8000 	ldrh.w	r8, [r4]
 8001296:	8867      	ldrh	r7, [r4, #2]
 8001298:	3404      	adds	r4, #4
 800129a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800129c:	f027 0a01 	bic.w	sl, r7, #1
 80012a0:	210f      	movs	r1, #15
 80012a2:	4648      	mov	r0, r9
 80012a4:	449a      	add	sl, r3
 80012a6:	f7ff ff5d 	bl	8001164 <_Unwind_GetGR>
 80012aa:	4582      	cmp	sl, r0
 80012ac:	d833      	bhi.n	8001316 <__gnu_unwind_pr_common+0xd6>
 80012ae:	f028 0301 	bic.w	r3, r8, #1
 80012b2:	449a      	add	sl, r3
 80012b4:	4550      	cmp	r0, sl
 80012b6:	bf2c      	ite	cs
 80012b8:	2000      	movcs	r0, #0
 80012ba:	2001      	movcc	r0, #1
 80012bc:	007f      	lsls	r7, r7, #1
 80012be:	f007 0702 	and.w	r7, r7, #2
 80012c2:	f008 0801 	and.w	r8, r8, #1
 80012c6:	ea47 0708 	orr.w	r7, r7, r8
 80012ca:	2f01      	cmp	r7, #1
 80012cc:	d03e      	beq.n	800134c <__gnu_unwind_pr_common+0x10c>
 80012ce:	d335      	bcc.n	800133c <__gnu_unwind_pr_common+0xfc>
 80012d0:	2f02      	cmp	r7, #2
 80012d2:	d11c      	bne.n	800130e <__gnu_unwind_pr_common+0xce>
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	f1bb 0f00 	cmp.w	fp, #0
 80012e0:	d176      	bne.n	80013d0 <__gnu_unwind_pr_common+0x190>
 80012e2:	b128      	cbz	r0, 80012f0 <__gnu_unwind_pr_common+0xb0>
 80012e4:	9903      	ldr	r1, [sp, #12]
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d07e      	beq.n	80013e8 <__gnu_unwind_pr_common+0x1a8>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	f000 80a6 	beq.w	800143c <__gnu_unwind_pr_common+0x1fc>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db77      	blt.n	80013e4 <__gnu_unwind_pr_common+0x1a4>
 80012f4:	9b02      	ldr	r3, [sp, #8]
 80012f6:	3301      	adds	r3, #1
 80012f8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80012fc:	e7c2      	b.n	8001284 <__gnu_unwind_pr_common+0x44>
 80012fe:	2300      	movs	r3, #0
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2e02      	cmp	r6, #2
 8001304:	dd3e      	ble.n	8001384 <__gnu_unwind_pr_common+0x144>
 8001306:	f7ff fe13 	bl	8000f30 <__gnu_unwind_24bit.isra.1>
 800130a:	2800      	cmp	r0, #0
 800130c:	d040      	beq.n	8001390 <__gnu_unwind_pr_common+0x150>
 800130e:	2009      	movs	r0, #9
 8001310:	b00b      	add	sp, #44	; 0x2c
 8001312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001316:	2000      	movs	r0, #0
 8001318:	e7d0      	b.n	80012bc <__gnu_unwind_pr_common+0x7c>
 800131a:	6867      	ldr	r7, [r4, #4]
 800131c:	3408      	adds	r4, #8
 800131e:	e7bc      	b.n	800129a <__gnu_unwind_pr_common+0x5a>
 8001320:	2b02      	cmp	r3, #2
 8001322:	dca3      	bgt.n	800126c <__gnu_unwind_pr_common+0x2c>
 8001324:	2102      	movs	r1, #2
 8001326:	0c13      	lsrs	r3, r2, #16
 8001328:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800132c:	0412      	lsls	r2, r2, #16
 800132e:	b2db      	uxtb	r3, r3
 8001330:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001334:	9207      	str	r2, [sp, #28]
 8001336:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800133a:	e797      	b.n	800126c <__gnu_unwind_pr_common+0x2c>
 800133c:	f1bb 0f00 	cmp.w	fp, #0
 8001340:	d002      	beq.n	8001348 <__gnu_unwind_pr_common+0x108>
 8001342:	2800      	cmp	r0, #0
 8001344:	f040 80bd 	bne.w	80014c2 <__gnu_unwind_pr_common+0x282>
 8001348:	3404      	adds	r4, #4
 800134a:	e79b      	b.n	8001284 <__gnu_unwind_pr_common+0x44>
 800134c:	f1bb 0f00 	cmp.w	fp, #0
 8001350:	d125      	bne.n	800139e <__gnu_unwind_pr_common+0x15e>
 8001352:	b1a8      	cbz	r0, 8001380 <__gnu_unwind_pr_common+0x140>
 8001354:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001358:	1c99      	adds	r1, r3, #2
 800135a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800135e:	d0d6      	beq.n	800130e <__gnu_unwind_pr_common+0xce>
 8001360:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001364:	3301      	adds	r3, #1
 8001366:	9106      	str	r1, [sp, #24]
 8001368:	f000 80a3 	beq.w	80014b2 <__gnu_unwind_pr_common+0x272>
 800136c:	1d20      	adds	r0, r4, #4
 800136e:	f7ff fdd9 	bl	8000f24 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001372:	ab06      	add	r3, sp, #24
 8001374:	4601      	mov	r1, r0
 8001376:	4628      	mov	r0, r5
 8001378:	f3af 8000 	nop.w
 800137c:	2800      	cmp	r0, #0
 800137e:	d177      	bne.n	8001470 <__gnu_unwind_pr_common+0x230>
 8001380:	3408      	adds	r4, #8
 8001382:	e77f      	b.n	8001284 <__gnu_unwind_pr_common+0x44>
 8001384:	a907      	add	r1, sp, #28
 8001386:	4648      	mov	r0, r9
 8001388:	f000 faf0 	bl	800196c <__gnu_unwind_execute>
 800138c:	2800      	cmp	r0, #0
 800138e:	d1be      	bne.n	800130e <__gnu_unwind_pr_common+0xce>
 8001390:	9b01      	ldr	r3, [sp, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d15c      	bne.n	8001450 <__gnu_unwind_pr_common+0x210>
 8001396:	2008      	movs	r0, #8
 8001398:	b00b      	add	sp, #44	; 0x2c
 800139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800139e:	210d      	movs	r1, #13
 80013a0:	4648      	mov	r0, r9
 80013a2:	6a2f      	ldr	r7, [r5, #32]
 80013a4:	f7ff fede 	bl	8001164 <_Unwind_GetGR>
 80013a8:	4287      	cmp	r7, r0
 80013aa:	d1e9      	bne.n	8001380 <__gnu_unwind_pr_common+0x140>
 80013ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d1e6      	bne.n	8001380 <__gnu_unwind_pr_common+0x140>
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff fcea 	bl	8000d8c <selfrel_offset31>
 80013b8:	210f      	movs	r1, #15
 80013ba:	4602      	mov	r2, r0
 80013bc:	4648      	mov	r0, r9
 80013be:	f7ff fef7 	bl	80011b0 <_Unwind_SetGR>
 80013c2:	4648      	mov	r0, r9
 80013c4:	462a      	mov	r2, r5
 80013c6:	2100      	movs	r1, #0
 80013c8:	f7ff fef2 	bl	80011b0 <_Unwind_SetGR>
 80013cc:	2007      	movs	r0, #7
 80013ce:	e79f      	b.n	8001310 <__gnu_unwind_pr_common+0xd0>
 80013d0:	210d      	movs	r1, #13
 80013d2:	4648      	mov	r0, r9
 80013d4:	6a2f      	ldr	r7, [r5, #32]
 80013d6:	f7ff fec5 	bl	8001164 <_Unwind_GetGR>
 80013da:	4287      	cmp	r7, r0
 80013dc:	d058      	beq.n	8001490 <__gnu_unwind_pr_common+0x250>
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	da87      	bge.n	80012f4 <__gnu_unwind_pr_common+0xb4>
 80013e4:	3404      	adds	r4, #4
 80013e6:	e785      	b.n	80012f4 <__gnu_unwind_pr_common+0xb4>
 80013e8:	9b02      	ldr	r3, [sp, #8]
 80013ea:	b33b      	cbz	r3, 800143c <__gnu_unwind_pr_common+0x1fc>
 80013ec:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80013f0:	1d27      	adds	r7, r4, #4
 80013f2:	f8cd b010 	str.w	fp, [sp, #16]
 80013f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80013fa:	46a3      	mov	fp, r4
 80013fc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001400:	461c      	mov	r4, r3
 8001402:	9605      	str	r6, [sp, #20]
 8001404:	e002      	b.n	800140c <__gnu_unwind_pr_common+0x1cc>
 8001406:	45b2      	cmp	sl, r6
 8001408:	46b0      	mov	r8, r6
 800140a:	d016      	beq.n	800143a <__gnu_unwind_pr_common+0x1fa>
 800140c:	4638      	mov	r0, r7
 800140e:	9406      	str	r4, [sp, #24]
 8001410:	f7ff fd88 	bl	8000f24 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001414:	ab06      	add	r3, sp, #24
 8001416:	4601      	mov	r1, r0
 8001418:	2200      	movs	r2, #0
 800141a:	4628      	mov	r0, r5
 800141c:	f3af 8000 	nop.w
 8001420:	f108 0601 	add.w	r6, r8, #1
 8001424:	3704      	adds	r7, #4
 8001426:	2800      	cmp	r0, #0
 8001428:	d0ed      	beq.n	8001406 <__gnu_unwind_pr_common+0x1c6>
 800142a:	9b02      	ldr	r3, [sp, #8]
 800142c:	465c      	mov	r4, fp
 800142e:	4543      	cmp	r3, r8
 8001430:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001434:	9e05      	ldr	r6, [sp, #20]
 8001436:	d1d2      	bne.n	80013de <__gnu_unwind_pr_common+0x19e>
 8001438:	e000      	b.n	800143c <__gnu_unwind_pr_common+0x1fc>
 800143a:	465c      	mov	r4, fp
 800143c:	4648      	mov	r0, r9
 800143e:	210d      	movs	r1, #13
 8001440:	f7ff fe90 	bl	8001164 <_Unwind_GetGR>
 8001444:	9b06      	ldr	r3, [sp, #24]
 8001446:	6228      	str	r0, [r5, #32]
 8001448:	62ac      	str	r4, [r5, #40]	; 0x28
 800144a:	626b      	str	r3, [r5, #36]	; 0x24
 800144c:	2006      	movs	r0, #6
 800144e:	e75f      	b.n	8001310 <__gnu_unwind_pr_common+0xd0>
 8001450:	210f      	movs	r1, #15
 8001452:	4648      	mov	r0, r9
 8001454:	f7ff fe86 	bl	8001164 <_Unwind_GetGR>
 8001458:	210e      	movs	r1, #14
 800145a:	4602      	mov	r2, r0
 800145c:	4648      	mov	r0, r9
 800145e:	f7ff fea7 	bl	80011b0 <_Unwind_SetGR>
 8001462:	4648      	mov	r0, r9
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <__gnu_unwind_pr_common+0x2cc>)
 8001466:	210f      	movs	r1, #15
 8001468:	f7ff fea2 	bl	80011b0 <_Unwind_SetGR>
 800146c:	2007      	movs	r0, #7
 800146e:	e74f      	b.n	8001310 <__gnu_unwind_pr_common+0xd0>
 8001470:	4607      	mov	r7, r0
 8001472:	210d      	movs	r1, #13
 8001474:	4648      	mov	r0, r9
 8001476:	f7ff fe75 	bl	8001164 <_Unwind_GetGR>
 800147a:	2f02      	cmp	r7, #2
 800147c:	6228      	str	r0, [r5, #32]
 800147e:	d11d      	bne.n	80014bc <__gnu_unwind_pr_common+0x27c>
 8001480:	462b      	mov	r3, r5
 8001482:	9a06      	ldr	r2, [sp, #24]
 8001484:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001488:	626b      	str	r3, [r5, #36]	; 0x24
 800148a:	62ac      	str	r4, [r5, #40]	; 0x28
 800148c:	2006      	movs	r0, #6
 800148e:	e73f      	b.n	8001310 <__gnu_unwind_pr_common+0xd0>
 8001490:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001492:	429c      	cmp	r4, r3
 8001494:	d1a3      	bne.n	80013de <__gnu_unwind_pr_common+0x19e>
 8001496:	2204      	movs	r2, #4
 8001498:	2700      	movs	r7, #0
 800149a:	9902      	ldr	r1, [sp, #8]
 800149c:	18a3      	adds	r3, r4, r2
 800149e:	62a9      	str	r1, [r5, #40]	; 0x28
 80014a0:	62ef      	str	r7, [r5, #44]	; 0x2c
 80014a2:	632a      	str	r2, [r5, #48]	; 0x30
 80014a4:	636b      	str	r3, [r5, #52]	; 0x34
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	42bb      	cmp	r3, r7
 80014aa:	db1d      	blt.n	80014e8 <__gnu_unwind_pr_common+0x2a8>
 80014ac:	2301      	movs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	e720      	b.n	80012f4 <__gnu_unwind_pr_common+0xb4>
 80014b2:	4648      	mov	r0, r9
 80014b4:	210d      	movs	r1, #13
 80014b6:	f7ff fe55 	bl	8001164 <_Unwind_GetGR>
 80014ba:	6228      	str	r0, [r5, #32]
 80014bc:	9b06      	ldr	r3, [sp, #24]
 80014be:	626b      	str	r3, [r5, #36]	; 0x24
 80014c0:	e7e3      	b.n	800148a <__gnu_unwind_pr_common+0x24a>
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff fc62 	bl	8000d8c <selfrel_offset31>
 80014c8:	3404      	adds	r4, #4
 80014ca:	4606      	mov	r6, r0
 80014cc:	63ac      	str	r4, [r5, #56]	; 0x38
 80014ce:	4628      	mov	r0, r5
 80014d0:	f3af 8000 	nop.w
 80014d4:	2800      	cmp	r0, #0
 80014d6:	f43f af1a 	beq.w	800130e <__gnu_unwind_pr_common+0xce>
 80014da:	4648      	mov	r0, r9
 80014dc:	4632      	mov	r2, r6
 80014de:	210f      	movs	r1, #15
 80014e0:	f7ff fe66 	bl	80011b0 <_Unwind_SetGR>
 80014e4:	2007      	movs	r0, #7
 80014e6:	e713      	b.n	8001310 <__gnu_unwind_pr_common+0xd0>
 80014e8:	4608      	mov	r0, r1
 80014ea:	3001      	adds	r0, #1
 80014ec:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80014f0:	f7ff fc4c 	bl	8000d8c <selfrel_offset31>
 80014f4:	210f      	movs	r1, #15
 80014f6:	4602      	mov	r2, r0
 80014f8:	4648      	mov	r0, r9
 80014fa:	f7ff fe59 	bl	80011b0 <_Unwind_SetGR>
 80014fe:	4648      	mov	r0, r9
 8001500:	462a      	mov	r2, r5
 8001502:	4639      	mov	r1, r7
 8001504:	f7ff fe54 	bl	80011b0 <_Unwind_SetGR>
 8001508:	2007      	movs	r0, #7
 800150a:	e701      	b.n	8001310 <__gnu_unwind_pr_common+0xd0>
 800150c:	00000000 	.word	0x00000000

08001510 <__aeabi_unwind_cpp_pr0>:
 8001510:	2300      	movs	r3, #0
 8001512:	e695      	b.n	8001240 <__gnu_unwind_pr_common>

08001514 <__aeabi_unwind_cpp_pr1>:
 8001514:	2301      	movs	r3, #1
 8001516:	e693      	b.n	8001240 <__gnu_unwind_pr_common>

08001518 <__aeabi_unwind_cpp_pr2>:
 8001518:	2302      	movs	r3, #2
 800151a:	e691      	b.n	8001240 <__gnu_unwind_pr_common>

0800151c <_Unwind_VRS_Pop>:
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	4604      	mov	r4, r0
 8001520:	b0c5      	sub	sp, #276	; 0x114
 8001522:	2904      	cmp	r1, #4
 8001524:	d80d      	bhi.n	8001542 <_Unwind_VRS_Pop+0x26>
 8001526:	e8df f001 	tbb	[pc, r1]
 800152a:	0355      	.short	0x0355
 800152c:	310c      	.short	0x310c
 800152e:	0f          	.byte	0x0f
 800152f:	00          	.byte	0x00
 8001530:	2b01      	cmp	r3, #1
 8001532:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8001536:	b295      	uxth	r5, r2
 8001538:	d164      	bne.n	8001604 <_Unwind_VRS_Pop+0xe8>
 800153a:	1972      	adds	r2, r6, r5
 800153c:	2a10      	cmp	r2, #16
 800153e:	f240 809d 	bls.w	800167c <_Unwind_VRS_Pop+0x160>
 8001542:	2002      	movs	r0, #2
 8001544:	b045      	add	sp, #276	; 0x114
 8001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1fa      	bne.n	8001542 <_Unwind_VRS_Pop+0x26>
 800154c:	2a10      	cmp	r2, #16
 800154e:	d8f8      	bhi.n	8001542 <_Unwind_VRS_Pop+0x26>
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	06d8      	lsls	r0, r3, #27
 8001554:	f100 80c8 	bmi.w	80016e8 <_Unwind_VRS_Pop+0x1cc>
 8001558:	ae22      	add	r6, sp, #136	; 0x88
 800155a:	4630      	mov	r0, r6
 800155c:	9201      	str	r2, [sp, #4]
 800155e:	2501      	movs	r5, #1
 8001560:	f000 f974 	bl	800184c <__gnu_Unwind_Save_WMMXC>
 8001564:	2300      	movs	r3, #0
 8001566:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001568:	9a01      	ldr	r2, [sp, #4]
 800156a:	fa05 f103 	lsl.w	r1, r5, r3
 800156e:	4211      	tst	r1, r2
 8001570:	d003      	beq.n	800157a <_Unwind_VRS_Pop+0x5e>
 8001572:	6801      	ldr	r1, [r0, #0]
 8001574:	3004      	adds	r0, #4
 8001576:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800157a:	3301      	adds	r3, #1
 800157c:	2b04      	cmp	r3, #4
 800157e:	d1f4      	bne.n	800156a <_Unwind_VRS_Pop+0x4e>
 8001580:	63a0      	str	r0, [r4, #56]	; 0x38
 8001582:	4630      	mov	r0, r6
 8001584:	f000 f958 	bl	8001838 <__gnu_Unwind_Restore_WMMXC>
 8001588:	2000      	movs	r0, #0
 800158a:	e7db      	b.n	8001544 <_Unwind_VRS_Pop+0x28>
 800158c:	2b03      	cmp	r3, #3
 800158e:	d1d8      	bne.n	8001542 <_Unwind_VRS_Pop+0x26>
 8001590:	0c15      	lsrs	r5, r2, #16
 8001592:	b297      	uxth	r7, r2
 8001594:	19eb      	adds	r3, r5, r7
 8001596:	2b10      	cmp	r3, #16
 8001598:	d8d3      	bhi.n	8001542 <_Unwind_VRS_Pop+0x26>
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	071e      	lsls	r6, r3, #28
 800159e:	f100 80b7 	bmi.w	8001710 <_Unwind_VRS_Pop+0x1f4>
 80015a2:	ae22      	add	r6, sp, #136	; 0x88
 80015a4:	4630      	mov	r0, r6
 80015a6:	f000 f925 	bl	80017f4 <__gnu_Unwind_Save_WMMXD>
 80015aa:	00ed      	lsls	r5, r5, #3
 80015ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015ae:	b15f      	cbz	r7, 80015c8 <_Unwind_VRS_Pop+0xac>
 80015b0:	3d04      	subs	r5, #4
 80015b2:	4603      	mov	r3, r0
 80015b4:	1971      	adds	r1, r6, r5
 80015b6:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80015ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80015be:	4283      	cmp	r3, r0
 80015c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80015c4:	d1f9      	bne.n	80015ba <_Unwind_VRS_Pop+0x9e>
 80015c6:	4618      	mov	r0, r3
 80015c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80015ca:	4630      	mov	r0, r6
 80015cc:	f000 f8f0 	bl	80017b0 <__gnu_Unwind_Restore_WMMXD>
 80015d0:	2000      	movs	r0, #0
 80015d2:	e7b7      	b.n	8001544 <_Unwind_VRS_Pop+0x28>
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1b4      	bne.n	8001542 <_Unwind_VRS_Pop+0x26>
 80015d8:	2701      	movs	r7, #1
 80015da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80015dc:	b296      	uxth	r6, r2
 80015de:	1d20      	adds	r0, r4, #4
 80015e0:	fa07 f103 	lsl.w	r1, r7, r3
 80015e4:	4231      	tst	r1, r6
 80015e6:	f103 0301 	add.w	r3, r3, #1
 80015ea:	d002      	beq.n	80015f2 <_Unwind_VRS_Pop+0xd6>
 80015ec:	6829      	ldr	r1, [r5, #0]
 80015ee:	3504      	adds	r5, #4
 80015f0:	6001      	str	r1, [r0, #0]
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	f100 0004 	add.w	r0, r0, #4
 80015f8:	d1f2      	bne.n	80015e0 <_Unwind_VRS_Pop+0xc4>
 80015fa:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80015fe:	d13b      	bne.n	8001678 <_Unwind_VRS_Pop+0x15c>
 8001600:	63a5      	str	r5, [r4, #56]	; 0x38
 8001602:	e79f      	b.n	8001544 <_Unwind_VRS_Pop+0x28>
 8001604:	2b05      	cmp	r3, #5
 8001606:	d19c      	bne.n	8001542 <_Unwind_VRS_Pop+0x26>
 8001608:	1977      	adds	r7, r6, r5
 800160a:	2f20      	cmp	r7, #32
 800160c:	d899      	bhi.n	8001542 <_Unwind_VRS_Pop+0x26>
 800160e:	2e0f      	cmp	r6, #15
 8001610:	d966      	bls.n	80016e0 <_Unwind_VRS_Pop+0x1c4>
 8001612:	462f      	mov	r7, r5
 8001614:	2d00      	cmp	r5, #0
 8001616:	d13a      	bne.n	800168e <_Unwind_VRS_Pop+0x172>
 8001618:	462a      	mov	r2, r5
 800161a:	2700      	movs	r7, #0
 800161c:	2a00      	cmp	r2, #0
 800161e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001620:	dd72      	ble.n	8001708 <_Unwind_VRS_Pop+0x1ec>
 8001622:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001626:	4601      	mov	r1, r0
 8001628:	a844      	add	r0, sp, #272	; 0x110
 800162a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800162e:	388c      	subs	r0, #140	; 0x8c
 8001630:	f851 5b04 	ldr.w	r5, [r1], #4
 8001634:	4291      	cmp	r1, r2
 8001636:	f840 5f04 	str.w	r5, [r0, #4]!
 800163a:	d1f9      	bne.n	8001630 <_Unwind_VRS_Pop+0x114>
 800163c:	4608      	mov	r0, r1
 800163e:	b197      	cbz	r7, 8001666 <_Unwind_VRS_Pop+0x14a>
 8001640:	2e10      	cmp	r6, #16
 8001642:	4632      	mov	r2, r6
 8001644:	bf38      	it	cc
 8001646:	2210      	movcc	r2, #16
 8001648:	a944      	add	r1, sp, #272	; 0x110
 800164a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800164e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001652:	0079      	lsls	r1, r7, #1
 8001654:	3a04      	subs	r2, #4
 8001656:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800165a:	f850 5b04 	ldr.w	r5, [r0], #4
 800165e:	4288      	cmp	r0, r1
 8001660:	f842 5f04 	str.w	r5, [r2, #4]!
 8001664:	d1f9      	bne.n	800165a <_Unwind_VRS_Pop+0x13e>
 8001666:	2b01      	cmp	r3, #1
 8001668:	d048      	beq.n	80016fc <_Unwind_VRS_Pop+0x1e0>
 800166a:	2e0f      	cmp	r6, #15
 800166c:	63a1      	str	r1, [r4, #56]	; 0x38
 800166e:	d933      	bls.n	80016d8 <_Unwind_VRS_Pop+0x1bc>
 8001670:	b117      	cbz	r7, 8001678 <_Unwind_VRS_Pop+0x15c>
 8001672:	a802      	add	r0, sp, #8
 8001674:	f000 f894 	bl	80017a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001678:	2000      	movs	r0, #0
 800167a:	e763      	b.n	8001544 <_Unwind_VRS_Pop+0x28>
 800167c:	2e0f      	cmp	r6, #15
 800167e:	f63f af60 	bhi.w	8001542 <_Unwind_VRS_Pop+0x26>
 8001682:	2700      	movs	r7, #0
 8001684:	6822      	ldr	r2, [r4, #0]
 8001686:	07d1      	lsls	r1, r2, #31
 8001688:	d417      	bmi.n	80016ba <_Unwind_VRS_Pop+0x19e>
 800168a:	2f00      	cmp	r7, #0
 800168c:	d060      	beq.n	8001750 <_Unwind_VRS_Pop+0x234>
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	0751      	lsls	r1, r2, #29
 8001692:	d445      	bmi.n	8001720 <_Unwind_VRS_Pop+0x204>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d04d      	beq.n	8001734 <_Unwind_VRS_Pop+0x218>
 8001698:	2e0f      	cmp	r6, #15
 800169a:	d806      	bhi.n	80016aa <_Unwind_VRS_Pop+0x18e>
 800169c:	a822      	add	r0, sp, #136	; 0x88
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	f000 f87a 	bl	8001798 <__gnu_Unwind_Save_VFP_D>
 80016a4:	9b01      	ldr	r3, [sp, #4]
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	d0b6      	beq.n	8001618 <_Unwind_VRS_Pop+0xfc>
 80016aa:	a802      	add	r0, sp, #8
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	f000 f87b 	bl	80017a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	f1c6 0210 	rsb	r2, r6, #16
 80016b8:	e7b0      	b.n	800161c <_Unwind_VRS_Pop+0x100>
 80016ba:	f022 0101 	bic.w	r1, r2, #1
 80016be:	2b05      	cmp	r3, #5
 80016c0:	6021      	str	r1, [r4, #0]
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	4620      	mov	r0, r4
 80016c6:	d03b      	beq.n	8001740 <_Unwind_VRS_Pop+0x224>
 80016c8:	f022 0203 	bic.w	r2, r2, #3
 80016cc:	f840 2b48 	str.w	r2, [r0], #72
 80016d0:	f000 f85a 	bl	8001788 <__gnu_Unwind_Save_VFP>
 80016d4:	9b01      	ldr	r3, [sp, #4]
 80016d6:	e7d8      	b.n	800168a <_Unwind_VRS_Pop+0x16e>
 80016d8:	a822      	add	r0, sp, #136	; 0x88
 80016da:	f000 f859 	bl	8001790 <__gnu_Unwind_Restore_VFP_D>
 80016de:	e7c7      	b.n	8001670 <_Unwind_VRS_Pop+0x154>
 80016e0:	2f10      	cmp	r7, #16
 80016e2:	d9ce      	bls.n	8001682 <_Unwind_VRS_Pop+0x166>
 80016e4:	3f10      	subs	r7, #16
 80016e6:	e7cd      	b.n	8001684 <_Unwind_VRS_Pop+0x168>
 80016e8:	f023 0310 	bic.w	r3, r3, #16
 80016ec:	6023      	str	r3, [r4, #0]
 80016ee:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80016f2:	9201      	str	r2, [sp, #4]
 80016f4:	f000 f8aa 	bl	800184c <__gnu_Unwind_Save_WMMXC>
 80016f8:	9a01      	ldr	r2, [sp, #4]
 80016fa:	e72d      	b.n	8001558 <_Unwind_VRS_Pop+0x3c>
 80016fc:	3104      	adds	r1, #4
 80016fe:	63a1      	str	r1, [r4, #56]	; 0x38
 8001700:	a822      	add	r0, sp, #136	; 0x88
 8001702:	f000 f83d 	bl	8001780 <__gnu_Unwind_Restore_VFP>
 8001706:	e7b7      	b.n	8001678 <_Unwind_VRS_Pop+0x15c>
 8001708:	2f00      	cmp	r7, #0
 800170a:	d199      	bne.n	8001640 <_Unwind_VRS_Pop+0x124>
 800170c:	4601      	mov	r1, r0
 800170e:	e7aa      	b.n	8001666 <_Unwind_VRS_Pop+0x14a>
 8001710:	f023 0308 	bic.w	r3, r3, #8
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800171a:	f000 f86b 	bl	80017f4 <__gnu_Unwind_Save_WMMXD>
 800171e:	e740      	b.n	80015a2 <_Unwind_VRS_Pop+0x86>
 8001720:	4620      	mov	r0, r4
 8001722:	f022 0204 	bic.w	r2, r2, #4
 8001726:	f840 2bd0 	str.w	r2, [r0], #208
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	f000 f83c 	bl	80017a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001730:	9b01      	ldr	r3, [sp, #4]
 8001732:	e7af      	b.n	8001694 <_Unwind_VRS_Pop+0x178>
 8001734:	a822      	add	r0, sp, #136	; 0x88
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	f000 f826 	bl	8001788 <__gnu_Unwind_Save_VFP>
 800173c:	9b01      	ldr	r3, [sp, #4]
 800173e:	e7b9      	b.n	80016b4 <_Unwind_VRS_Pop+0x198>
 8001740:	f041 0102 	orr.w	r1, r1, #2
 8001744:	f840 1b48 	str.w	r1, [r0], #72
 8001748:	f000 f826 	bl	8001798 <__gnu_Unwind_Save_VFP_D>
 800174c:	9b01      	ldr	r3, [sp, #4]
 800174e:	e79c      	b.n	800168a <_Unwind_VRS_Pop+0x16e>
 8001750:	2b01      	cmp	r3, #1
 8001752:	d003      	beq.n	800175c <_Unwind_VRS_Pop+0x240>
 8001754:	2e0f      	cmp	r6, #15
 8001756:	f63f af5f 	bhi.w	8001618 <_Unwind_VRS_Pop+0xfc>
 800175a:	e79f      	b.n	800169c <_Unwind_VRS_Pop+0x180>
 800175c:	a822      	add	r0, sp, #136	; 0x88
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	f000 f812 	bl	8001788 <__gnu_Unwind_Save_VFP>
 8001764:	9b01      	ldr	r3, [sp, #4]
 8001766:	e757      	b.n	8001618 <_Unwind_VRS_Pop+0xfc>

08001768 <__restore_core_regs>:
 8001768:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800176c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001770:	469c      	mov	ip, r3
 8001772:	46a6      	mov	lr, r4
 8001774:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001778:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800177c:	46e5      	mov	sp, ip
 800177e:	bd00      	pop	{pc}

08001780 <__gnu_Unwind_Restore_VFP>:
 8001780:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <__gnu_Unwind_Save_VFP>:
 8001788:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <__gnu_Unwind_Restore_VFP_D>:
 8001790:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <__gnu_Unwind_Save_VFP_D>:
 8001798:	ec80 0b20 	vstmia	r0, {d0-d15}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80017a0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80017a8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <__gnu_Unwind_Restore_WMMXD>:
 80017b0:	ecf0 0102 	ldfe	f0, [r0], #8
 80017b4:	ecf0 1102 	ldfe	f1, [r0], #8
 80017b8:	ecf0 2102 	ldfe	f2, [r0], #8
 80017bc:	ecf0 3102 	ldfe	f3, [r0], #8
 80017c0:	ecf0 4102 	ldfe	f4, [r0], #8
 80017c4:	ecf0 5102 	ldfe	f5, [r0], #8
 80017c8:	ecf0 6102 	ldfe	f6, [r0], #8
 80017cc:	ecf0 7102 	ldfe	f7, [r0], #8
 80017d0:	ecf0 8102 	ldfp	f0, [r0], #8
 80017d4:	ecf0 9102 	ldfp	f1, [r0], #8
 80017d8:	ecf0 a102 	ldfp	f2, [r0], #8
 80017dc:	ecf0 b102 	ldfp	f3, [r0], #8
 80017e0:	ecf0 c102 	ldfp	f4, [r0], #8
 80017e4:	ecf0 d102 	ldfp	f5, [r0], #8
 80017e8:	ecf0 e102 	ldfp	f6, [r0], #8
 80017ec:	ecf0 f102 	ldfp	f7, [r0], #8
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <__gnu_Unwind_Save_WMMXD>:
 80017f4:	ece0 0102 	stfe	f0, [r0], #8
 80017f8:	ece0 1102 	stfe	f1, [r0], #8
 80017fc:	ece0 2102 	stfe	f2, [r0], #8
 8001800:	ece0 3102 	stfe	f3, [r0], #8
 8001804:	ece0 4102 	stfe	f4, [r0], #8
 8001808:	ece0 5102 	stfe	f5, [r0], #8
 800180c:	ece0 6102 	stfe	f6, [r0], #8
 8001810:	ece0 7102 	stfe	f7, [r0], #8
 8001814:	ece0 8102 	stfp	f0, [r0], #8
 8001818:	ece0 9102 	stfp	f1, [r0], #8
 800181c:	ece0 a102 	stfp	f2, [r0], #8
 8001820:	ece0 b102 	stfp	f3, [r0], #8
 8001824:	ece0 c102 	stfp	f4, [r0], #8
 8001828:	ece0 d102 	stfp	f5, [r0], #8
 800182c:	ece0 e102 	stfp	f6, [r0], #8
 8001830:	ece0 f102 	stfp	f7, [r0], #8
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <__gnu_Unwind_Restore_WMMXC>:
 8001838:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800183c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001840:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001844:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop

0800184c <__gnu_Unwind_Save_WMMXC>:
 800184c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001850:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001854:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001858:	fca0 b101 	stc2	1, cr11, [r0], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <_Unwind_RaiseException>:
 8001860:	46ec      	mov	ip, sp
 8001862:	b500      	push	{lr}
 8001864:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001868:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001874:	a901      	add	r1, sp, #4
 8001876:	f7ff fbed 	bl	8001054 <__gnu_Unwind_RaiseException>
 800187a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800187e:	b012      	add	sp, #72	; 0x48
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <_Unwind_Resume>:
 8001884:	46ec      	mov	ip, sp
 8001886:	b500      	push	{lr}
 8001888:	e92d 5000 	stmdb	sp!, {ip, lr}
 800188c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001898:	a901      	add	r1, sp, #4
 800189a:	f7ff fc15 	bl	80010c8 <__gnu_Unwind_Resume>
 800189e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018a2:	b012      	add	sp, #72	; 0x48
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <_Unwind_Resume_or_Rethrow>:
 80018a8:	46ec      	mov	ip, sp
 80018aa:	b500      	push	{lr}
 80018ac:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018bc:	a901      	add	r1, sp, #4
 80018be:	f7ff fc25 	bl	800110c <__gnu_Unwind_Resume_or_Rethrow>
 80018c2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018c6:	b012      	add	sp, #72	; 0x48
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop

080018cc <_Unwind_ForcedUnwind>:
 80018cc:	46ec      	mov	ip, sp
 80018ce:	b500      	push	{lr}
 80018d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018e0:	ab01      	add	r3, sp, #4
 80018e2:	f7ff fbe7 	bl	80010b4 <__gnu_Unwind_ForcedUnwind>
 80018e6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018ea:	b012      	add	sp, #72	; 0x48
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <_Unwind_Backtrace>:
 80018f0:	46ec      	mov	ip, sp
 80018f2:	b500      	push	{lr}
 80018f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001904:	aa01      	add	r2, sp, #4
 8001906:	f7ff fc61 	bl	80011cc <__gnu_Unwind_Backtrace>
 800190a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800190e:	b012      	add	sp, #72	; 0x48
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <next_unwind_byte>:
 8001914:	7a02      	ldrb	r2, [r0, #8]
 8001916:	b91a      	cbnz	r2, 8001920 <next_unwind_byte+0xc>
 8001918:	7a43      	ldrb	r3, [r0, #9]
 800191a:	b943      	cbnz	r3, 800192e <next_unwind_byte+0x1a>
 800191c:	20b0      	movs	r0, #176	; 0xb0
 800191e:	4770      	bx	lr
 8001920:	6803      	ldr	r3, [r0, #0]
 8001922:	3a01      	subs	r2, #1
 8001924:	7202      	strb	r2, [r0, #8]
 8001926:	021a      	lsls	r2, r3, #8
 8001928:	6002      	str	r2, [r0, #0]
 800192a:	0e18      	lsrs	r0, r3, #24
 800192c:	4770      	bx	lr
 800192e:	2103      	movs	r1, #3
 8001930:	6842      	ldr	r2, [r0, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	b410      	push	{r4}
 8001936:	7243      	strb	r3, [r0, #9]
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	1d14      	adds	r4, r2, #4
 800193c:	7201      	strb	r1, [r0, #8]
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	6044      	str	r4, [r0, #4]
 8001942:	6002      	str	r2, [r0, #0]
 8001944:	bc10      	pop	{r4}
 8001946:	0e18      	lsrs	r0, r3, #24
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <_Unwind_GetGR.constprop.0>:
 800194c:	2300      	movs	r3, #0
 800194e:	b500      	push	{lr}
 8001950:	b085      	sub	sp, #20
 8001952:	aa03      	add	r2, sp, #12
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	220c      	movs	r2, #12
 800195a:	f7ff fbe9 	bl	8001130 <_Unwind_VRS_Get>
 800195e:	9803      	ldr	r0, [sp, #12]
 8001960:	b005      	add	sp, #20
 8001962:	f85d fb04 	ldr.w	pc, [sp], #4
 8001966:	bf00      	nop

08001968 <unwind_UCB_from_context>:
 8001968:	e7f0      	b.n	800194c <_Unwind_GetGR.constprop.0>
 800196a:	bf00      	nop

0800196c <__gnu_unwind_execute>:
 800196c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001970:	4606      	mov	r6, r0
 8001972:	460f      	mov	r7, r1
 8001974:	f04f 0800 	mov.w	r8, #0
 8001978:	b085      	sub	sp, #20
 800197a:	4638      	mov	r0, r7
 800197c:	f7ff ffca 	bl	8001914 <next_unwind_byte>
 8001980:	28b0      	cmp	r0, #176	; 0xb0
 8001982:	4604      	mov	r4, r0
 8001984:	d023      	beq.n	80019ce <__gnu_unwind_execute+0x62>
 8001986:	0605      	lsls	r5, r0, #24
 8001988:	d427      	bmi.n	80019da <__gnu_unwind_execute+0x6e>
 800198a:	2300      	movs	r3, #0
 800198c:	f10d 090c 	add.w	r9, sp, #12
 8001990:	4619      	mov	r1, r3
 8001992:	0085      	lsls	r5, r0, #2
 8001994:	220d      	movs	r2, #13
 8001996:	f8cd 9000 	str.w	r9, [sp]
 800199a:	4630      	mov	r0, r6
 800199c:	f7ff fbc8 	bl	8001130 <_Unwind_VRS_Get>
 80019a0:	b2ed      	uxtb	r5, r5
 80019a2:	9b03      	ldr	r3, [sp, #12]
 80019a4:	0660      	lsls	r0, r4, #25
 80019a6:	f105 0504 	add.w	r5, r5, #4
 80019aa:	bf4c      	ite	mi
 80019ac:	1b5d      	submi	r5, r3, r5
 80019ae:	18ed      	addpl	r5, r5, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	220d      	movs	r2, #13
 80019b4:	4619      	mov	r1, r3
 80019b6:	f8cd 9000 	str.w	r9, [sp]
 80019ba:	4630      	mov	r0, r6
 80019bc:	9503      	str	r5, [sp, #12]
 80019be:	f7ff fbdd 	bl	800117c <_Unwind_VRS_Set>
 80019c2:	4638      	mov	r0, r7
 80019c4:	f7ff ffa6 	bl	8001914 <next_unwind_byte>
 80019c8:	28b0      	cmp	r0, #176	; 0xb0
 80019ca:	4604      	mov	r4, r0
 80019cc:	d1db      	bne.n	8001986 <__gnu_unwind_execute+0x1a>
 80019ce:	f1b8 0f00 	cmp.w	r8, #0
 80019d2:	f000 8094 	beq.w	8001afe <__gnu_unwind_execute+0x192>
 80019d6:	2000      	movs	r0, #0
 80019d8:	e01c      	b.n	8001a14 <__gnu_unwind_execute+0xa8>
 80019da:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80019de:	2b80      	cmp	r3, #128	; 0x80
 80019e0:	d05c      	beq.n	8001a9c <__gnu_unwind_execute+0x130>
 80019e2:	2b90      	cmp	r3, #144	; 0x90
 80019e4:	d019      	beq.n	8001a1a <__gnu_unwind_execute+0xae>
 80019e6:	2ba0      	cmp	r3, #160	; 0xa0
 80019e8:	d02c      	beq.n	8001a44 <__gnu_unwind_execute+0xd8>
 80019ea:	2bb0      	cmp	r3, #176	; 0xb0
 80019ec:	d03e      	beq.n	8001a6c <__gnu_unwind_execute+0x100>
 80019ee:	2bc0      	cmp	r3, #192	; 0xc0
 80019f0:	d06b      	beq.n	8001aca <__gnu_unwind_execute+0x15e>
 80019f2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80019f6:	2bd0      	cmp	r3, #208	; 0xd0
 80019f8:	d10b      	bne.n	8001a12 <__gnu_unwind_execute+0xa6>
 80019fa:	f000 0207 	and.w	r2, r0, #7
 80019fe:	3201      	adds	r2, #1
 8001a00:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a04:	2305      	movs	r3, #5
 8001a06:	2101      	movs	r1, #1
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f7ff fd87 	bl	800151c <_Unwind_VRS_Pop>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d0b3      	beq.n	800197a <__gnu_unwind_execute+0xe>
 8001a12:	2009      	movs	r0, #9
 8001a14:	b005      	add	sp, #20
 8001a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a1a:	f000 030d 	and.w	r3, r0, #13
 8001a1e:	2b0d      	cmp	r3, #13
 8001a20:	d0f7      	beq.n	8001a12 <__gnu_unwind_execute+0xa6>
 8001a22:	2300      	movs	r3, #0
 8001a24:	ad03      	add	r5, sp, #12
 8001a26:	f000 020f 	and.w	r2, r0, #15
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	9500      	str	r5, [sp, #0]
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f7ff fb7e 	bl	8001130 <_Unwind_VRS_Get>
 8001a34:	2300      	movs	r3, #0
 8001a36:	9500      	str	r5, [sp, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	220d      	movs	r2, #13
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f7ff fb9d 	bl	800117c <_Unwind_VRS_Set>
 8001a42:	e79a      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001a44:	43c3      	mvns	r3, r0
 8001a46:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	411a      	asrs	r2, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	0701      	lsls	r1, r0, #28
 8001a54:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001a58:	bf48      	it	mi
 8001a5a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4630      	mov	r0, r6
 8001a62:	f7ff fd5b 	bl	800151c <_Unwind_VRS_Pop>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d1d3      	bne.n	8001a12 <__gnu_unwind_execute+0xa6>
 8001a6a:	e786      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001a6c:	28b1      	cmp	r0, #177	; 0xb1
 8001a6e:	d057      	beq.n	8001b20 <__gnu_unwind_execute+0x1b4>
 8001a70:	28b2      	cmp	r0, #178	; 0xb2
 8001a72:	d068      	beq.n	8001b46 <__gnu_unwind_execute+0x1da>
 8001a74:	28b3      	cmp	r0, #179	; 0xb3
 8001a76:	f000 8095 	beq.w	8001ba4 <__gnu_unwind_execute+0x238>
 8001a7a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001a7e:	2bb4      	cmp	r3, #180	; 0xb4
 8001a80:	d0c7      	beq.n	8001a12 <__gnu_unwind_execute+0xa6>
 8001a82:	2301      	movs	r3, #1
 8001a84:	f000 0207 	and.w	r2, r0, #7
 8001a88:	441a      	add	r2, r3
 8001a8a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4630      	mov	r0, r6
 8001a92:	f7ff fd43 	bl	800151c <_Unwind_VRS_Pop>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d1bb      	bne.n	8001a12 <__gnu_unwind_execute+0xa6>
 8001a9a:	e76e      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	f7ff ff39 	bl	8001914 <next_unwind_byte>
 8001aa2:	0224      	lsls	r4, r4, #8
 8001aa4:	4304      	orrs	r4, r0
 8001aa6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001aaa:	d0b2      	beq.n	8001a12 <__gnu_unwind_execute+0xa6>
 8001aac:	2300      	movs	r3, #0
 8001aae:	0124      	lsls	r4, r4, #4
 8001ab0:	b2a2      	uxth	r2, r4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	f7ff fd31 	bl	800151c <_Unwind_VRS_Pop>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d1a9      	bne.n	8001a12 <__gnu_unwind_execute+0xa6>
 8001abe:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001ac2:	bf18      	it	ne
 8001ac4:	f04f 0801 	movne.w	r8, #1
 8001ac8:	e757      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001aca:	28c6      	cmp	r0, #198	; 0xc6
 8001acc:	d07d      	beq.n	8001bca <__gnu_unwind_execute+0x25e>
 8001ace:	28c7      	cmp	r0, #199	; 0xc7
 8001ad0:	f000 8086 	beq.w	8001be0 <__gnu_unwind_execute+0x274>
 8001ad4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001ad8:	2bc0      	cmp	r3, #192	; 0xc0
 8001ada:	f000 8094 	beq.w	8001c06 <__gnu_unwind_execute+0x29a>
 8001ade:	28c8      	cmp	r0, #200	; 0xc8
 8001ae0:	f000 809f 	beq.w	8001c22 <__gnu_unwind_execute+0x2b6>
 8001ae4:	28c9      	cmp	r0, #201	; 0xc9
 8001ae6:	d194      	bne.n	8001a12 <__gnu_unwind_execute+0xa6>
 8001ae8:	4638      	mov	r0, r7
 8001aea:	f7ff ff13 	bl	8001914 <next_unwind_byte>
 8001aee:	0302      	lsls	r2, r0, #12
 8001af0:	f000 000f 	and.w	r0, r0, #15
 8001af4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001af8:	3001      	adds	r0, #1
 8001afa:	4302      	orrs	r2, r0
 8001afc:	e782      	b.n	8001a04 <__gnu_unwind_execute+0x98>
 8001afe:	ac03      	add	r4, sp, #12
 8001b00:	4643      	mov	r3, r8
 8001b02:	220e      	movs	r2, #14
 8001b04:	4641      	mov	r1, r8
 8001b06:	9400      	str	r4, [sp, #0]
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f7ff fb11 	bl	8001130 <_Unwind_VRS_Get>
 8001b0e:	9400      	str	r4, [sp, #0]
 8001b10:	4630      	mov	r0, r6
 8001b12:	4643      	mov	r3, r8
 8001b14:	220f      	movs	r2, #15
 8001b16:	4641      	mov	r1, r8
 8001b18:	f7ff fb30 	bl	800117c <_Unwind_VRS_Set>
 8001b1c:	4640      	mov	r0, r8
 8001b1e:	e779      	b.n	8001a14 <__gnu_unwind_execute+0xa8>
 8001b20:	4638      	mov	r0, r7
 8001b22:	f7ff fef7 	bl	8001914 <next_unwind_byte>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	f43f af73 	beq.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001b2c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001b30:	f47f af6f 	bne.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4619      	mov	r1, r3
 8001b38:	4630      	mov	r0, r6
 8001b3a:	f7ff fcef 	bl	800151c <_Unwind_VRS_Pop>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	f47f af67 	bne.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001b44:	e719      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001b46:	2300      	movs	r3, #0
 8001b48:	f10d 090c 	add.w	r9, sp, #12
 8001b4c:	220d      	movs	r2, #13
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f8cd 9000 	str.w	r9, [sp]
 8001b54:	4630      	mov	r0, r6
 8001b56:	f7ff faeb 	bl	8001130 <_Unwind_VRS_Get>
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f7ff feda 	bl	8001914 <next_unwind_byte>
 8001b60:	0602      	lsls	r2, r0, #24
 8001b62:	f04f 0402 	mov.w	r4, #2
 8001b66:	d50c      	bpl.n	8001b82 <__gnu_unwind_execute+0x216>
 8001b68:	9b03      	ldr	r3, [sp, #12]
 8001b6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001b6e:	40a0      	lsls	r0, r4
 8001b70:	4403      	add	r3, r0
 8001b72:	4638      	mov	r0, r7
 8001b74:	9303      	str	r3, [sp, #12]
 8001b76:	f7ff fecd 	bl	8001914 <next_unwind_byte>
 8001b7a:	0603      	lsls	r3, r0, #24
 8001b7c:	f104 0407 	add.w	r4, r4, #7
 8001b80:	d4f2      	bmi.n	8001b68 <__gnu_unwind_execute+0x1fc>
 8001b82:	2300      	movs	r3, #0
 8001b84:	9903      	ldr	r1, [sp, #12]
 8001b86:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001b8a:	40a2      	lsls	r2, r4
 8001b8c:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001b90:	188c      	adds	r4, r1, r2
 8001b92:	f8cd 9000 	str.w	r9, [sp]
 8001b96:	4619      	mov	r1, r3
 8001b98:	220d      	movs	r2, #13
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	9403      	str	r4, [sp, #12]
 8001b9e:	f7ff faed 	bl	800117c <_Unwind_VRS_Set>
 8001ba2:	e6ea      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001ba4:	4638      	mov	r0, r7
 8001ba6:	f7ff feb5 	bl	8001914 <next_unwind_byte>
 8001baa:	2301      	movs	r3, #1
 8001bac:	0301      	lsls	r1, r0, #12
 8001bae:	f000 000f 	and.w	r0, r0, #15
 8001bb2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001bb6:	18c2      	adds	r2, r0, r3
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	4630      	mov	r0, r6
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7ff fcad 	bl	800151c <_Unwind_VRS_Pop>
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	f47f af25 	bne.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001bc8:	e6d7      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001bca:	4638      	mov	r0, r7
 8001bcc:	f7ff fea2 	bl	8001914 <next_unwind_byte>
 8001bd0:	0301      	lsls	r1, r0, #12
 8001bd2:	f000 000f 	and.w	r0, r0, #15
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001bdc:	1c42      	adds	r2, r0, #1
 8001bde:	e7eb      	b.n	8001bb8 <__gnu_unwind_execute+0x24c>
 8001be0:	4638      	mov	r0, r7
 8001be2:	f7ff fe97 	bl	8001914 <next_unwind_byte>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	f43f af13 	beq.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001bec:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001bf0:	f47f af0f 	bne.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f7ff fc8f 	bl	800151c <_Unwind_VRS_Pop>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	f47f af07 	bne.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001c04:	e6b9      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001c06:	2303      	movs	r3, #3
 8001c08:	f000 020f 	and.w	r2, r0, #15
 8001c0c:	3201      	adds	r2, #1
 8001c0e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001c12:	4619      	mov	r1, r3
 8001c14:	4630      	mov	r0, r6
 8001c16:	f7ff fc81 	bl	800151c <_Unwind_VRS_Pop>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	f47f aef9 	bne.w	8001a12 <__gnu_unwind_execute+0xa6>
 8001c20:	e6ab      	b.n	800197a <__gnu_unwind_execute+0xe>
 8001c22:	4638      	mov	r0, r7
 8001c24:	f7ff fe76 	bl	8001914 <next_unwind_byte>
 8001c28:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001c2c:	f000 030f 	and.w	r3, r0, #15
 8001c30:	3210      	adds	r2, #16
 8001c32:	3301      	adds	r3, #1
 8001c34:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001c38:	e6e4      	b.n	8001a04 <__gnu_unwind_execute+0x98>
 8001c3a:	bf00      	nop

08001c3c <__gnu_unwind_frame>:
 8001c3c:	b530      	push	{r4, r5, lr}
 8001c3e:	2403      	movs	r4, #3
 8001c40:	460d      	mov	r5, r1
 8001c42:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001c44:	b085      	sub	sp, #20
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	f88d 400c 	strb.w	r4, [sp, #12]
 8001c4c:	79dc      	ldrb	r4, [r3, #7]
 8001c4e:	0212      	lsls	r2, r2, #8
 8001c50:	3308      	adds	r3, #8
 8001c52:	a901      	add	r1, sp, #4
 8001c54:	4628      	mov	r0, r5
 8001c56:	9201      	str	r2, [sp, #4]
 8001c58:	f88d 400d 	strb.w	r4, [sp, #13]
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	f7ff fe85 	bl	800196c <__gnu_unwind_execute>
 8001c62:	b005      	add	sp, #20
 8001c64:	bd30      	pop	{r4, r5, pc}
 8001c66:	bf00      	nop

08001c68 <_Unwind_GetRegionStart>:
 8001c68:	b508      	push	{r3, lr}
 8001c6a:	f7ff fe7d 	bl	8001968 <unwind_UCB_from_context>
 8001c6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001c70:	bd08      	pop	{r3, pc}
 8001c72:	bf00      	nop

08001c74 <_Unwind_GetLanguageSpecificData>:
 8001c74:	b508      	push	{r3, lr}
 8001c76:	f7ff fe77 	bl	8001968 <unwind_UCB_from_context>
 8001c7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001c7c:	79c3      	ldrb	r3, [r0, #7]
 8001c7e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001c82:	3008      	adds	r0, #8
 8001c84:	bd08      	pop	{r3, pc}
 8001c86:	bf00      	nop

08001c88 <_Unwind_GetTextRelBase>:
 8001c88:	b508      	push	{r3, lr}
 8001c8a:	f006 fb02 	bl	8008292 <abort>
 8001c8e:	bf00      	nop

08001c90 <_Unwind_GetDataRelBase>:
 8001c90:	b508      	push	{r3, lr}
 8001c92:	f7ff fff9 	bl	8001c88 <_Unwind_GetTextRelBase>
 8001c96:	bf00      	nop

08001c98 <__aeabi_idiv0>:
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop

08001c9c <_ZN4RF243csnE13GPIO_PinState>:
#include "RF24.h"
extern UART_HandleTypeDef huart1;
/****************************************************************************/

void RF24::csn(GPIO_PinState mode)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(csn_pin_port, csn_pin, mode);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6898      	ldr	r0, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	899b      	ldrh	r3, [r3, #12]
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f001 fade 	bl	8003274 <HAL_GPIO_WritePin>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZN4RF242ceE13GPIO_PinState>:

/****************************************************************************/

void RF24::ce(GPIO_PinState level)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ce_pin_port, ce_pin, level);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	889b      	ldrh	r3, [r3, #4]
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f001 facc 	bl	8003274 <HAL_GPIO_WritePin>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN4RF2416beginTransactionEv>:

/****************************************************************************/

inline void RF24::beginTransaction()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	//_SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	csn(LOW);
 8001cec:	2100      	movs	r1, #0
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffd4 	bl	8001c9c <_ZN4RF243csnE13GPIO_PinState>

}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZN4RF2414endTransactionEv>:

/****************************************************************************/

inline void RF24::endTransaction()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

	csn(HIGH);
 8001d04:	2101      	movs	r1, #1
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffc8 	bl	8001c9c <_ZN4RF243csnE13GPIO_PinState>
	//_SPI.endTransaction();
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
	uint8_t result;
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	73bb      	strb	r3, [r7, #14]
	beginTransaction();
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffda 	bl	8001ce4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6918      	ldr	r0, [r3, #16]
 8001d34:	f107 010e 	add.w	r1, r7, #14
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f001 fed3 	bl	8003ae8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6918      	ldr	r0, [r3, #16]
 8001d46:	f107 010f 	add.w	r1, r7, #15
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f002 f805 	bl	8003d5e <HAL_SPI_Receive>
	endTransaction();
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffd1 	bl	8001cfc <_ZN4RF2414endTransactionEv>

	return result;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	460b      	mov	r3, r1
 8001d72:	72fb      	strb	r3, [r7, #11]
 8001d74:	4613      	mov	r3, r2
 8001d76:	72bb      	strb	r3, [r7, #10]
	uint8_t status;
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8001d78:	7afb      	ldrb	r3, [r7, #11]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	75bb      	strb	r3, [r7, #22]
	beginTransaction();
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff ffab 	bl	8001ce4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6918      	ldr	r0, [r3, #16]
 8001d92:	f107 0217 	add.w	r2, r7, #23
 8001d96:	f107 0116 	add.w	r1, r7, #22
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2301      	movs	r3, #1
 8001da2:	f002 f8ea 	bl	8003f7a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, (uint8_t *) buf, len, HAL_MAX_DELAY);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6918      	ldr	r0, [r3, #16]
 8001daa:	7abb      	ldrb	r3, [r7, #10]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f001 fe98 	bl	8003ae8 <HAL_SPI_Transmit>
	endTransaction();
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff ff9f 	bl	8001cfc <_ZN4RF2414endTransactionEv>

	return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b09e      	sub	sp, #120	; 0x78
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	70bb      	strb	r3, [r7, #2]
	uint8_t status;
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
#ifdef SERIAL_DEBUG
	char buffer[100];
	sprintf(buffer, PSTR("write_register(%02x,%02x)\r\n"),reg,value);
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	78bb      	ldrb	r3, [r7, #2]
 8001dee:	f107 0008 	add.w	r0, r7, #8
 8001df2:	4918      	ldr	r1, [pc, #96]	; (8001e54 <_ZN4RF2414write_registerEhh+0x8c>)
 8001df4:	f003 fb64 	bl	80054c0 <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe f9a7 	bl	8000150 <strlen>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f107 0108 	add.w	r1, r7, #8
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	4812      	ldr	r0, [pc, #72]	; (8001e58 <_ZN4RF2414write_registerEhh+0x90>)
 8001e10:	f002 fec2 	bl	8004b98 <HAL_UART_Transmit>
#endif
	beginTransaction();
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff65 	bl	8001ce4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6918      	ldr	r0, [r3, #16]
 8001e1e:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 8001e22:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f002 f8a4 	bl	8003f7a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6918      	ldr	r0, [r3, #16]
 8001e36:	1cb9      	adds	r1, r7, #2
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f001 fe53 	bl	8003ae8 <HAL_SPI_Transmit>
	endTransaction();
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff5a 	bl	8001cfc <_ZN4RF2414endTransactionEv>

	return status;
 8001e48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3770      	adds	r7, #112	; 0x70
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08008340 	.word	0x08008340
 8001e58:	20000734 	.word	0x20000734

08001e5c <_ZN4RF2412read_payloadEPvh>:
}

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0a2      	sub	sp, #136	; 0x88
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	4613      	mov	r3, r2
 8001e68:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t* current = reinterpret_cast<uint8_t*>(buf);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t temp = R_RX_PAYLOAD;
 8001e6e:	2361      	movs	r3, #97	; 0x61
 8001e70:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	if (data_len > payload_size)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	7dd2      	ldrb	r2, [r2, #23]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	dd02      	ble.n	8001e84 <_ZN4RF2412read_payloadEPvh+0x28>
		data_len = payload_size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	7ddb      	ldrb	r3, [r3, #23]
 8001e82:	71fb      	strb	r3, [r7, #7]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <_ZN4RF2412read_payloadEPvh+0x34>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e004      	b.n	8001e9a <_ZN4RF2412read_payloadEPvh+0x3e>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	7dda      	ldrb	r2, [r3, #23]
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	//printf("[Reading %u bytes %u blanks]",data_len,blank_len);
#ifdef SERIAL_DEBUG
	char buffer[100];
	sprintf(buffer, "[Reading %u bytes %u blanks]\n",data_len,blank_len);
 8001e9e:	79fa      	ldrb	r2, [r7, #7]
 8001ea0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ea4:	f107 0010 	add.w	r0, r7, #16
 8001ea8:	4925      	ldr	r1, [pc, #148]	; (8001f40 <_ZN4RF2412read_payloadEPvh+0xe4>)
 8001eaa:	f003 fb09 	bl	80054c0 <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe f94c 	bl	8000150 <strlen>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f107 0110 	add.w	r1, r7, #16
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	481f      	ldr	r0, [pc, #124]	; (8001f44 <_ZN4RF2412read_payloadEPvh+0xe8>)
 8001ec6:	f002 fe67 	bl	8004b98 <HAL_UART_Transmit>
#endif
	beginTransaction();
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff ff0a 	bl	8001ce4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6918      	ldr	r0, [r3, #16]
 8001ed4:	f107 0277 	add.w	r2, r7, #119	; 0x77
 8001ed8:	f107 0176 	add.w	r1, r7, #118	; 0x76
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f002 f849 	bl	8003f7a <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(hspix, current, data_len, HAL_MAX_DELAY);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6918      	ldr	r0, [r3, #16]
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ef6:	f001 ff32 	bl	8003d5e <HAL_SPI_Receive>
	temp = HIGH;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	while (blank_len--)
 8001f00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <_ZN4RF2412read_payloadEPvh+0xd0>
	{
		HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6918      	ldr	r0, [r3, #16]
 8001f1c:	f107 0176 	add.w	r1, r7, #118	; 0x76
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	2201      	movs	r2, #1
 8001f26:	f001 fddf 	bl	8003ae8 <HAL_SPI_Transmit>
	while (blank_len--)
 8001f2a:	e7e9      	b.n	8001f00 <_ZN4RF2412read_payloadEPvh+0xa4>
	}
	endTransaction();
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fee5 	bl	8001cfc <_ZN4RF2414endTransactionEv>

	return status;
 8001f32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3780      	adds	r7, #128	; 0x80
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	0800837c 	.word	0x0800837c
 8001f44:	20000734 	.word	0x20000734

08001f48 <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	return spiTrans( FLUSH_RX);
 8001f50:	21e2      	movs	r1, #226	; 0xe2
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f812 	bl	8001f7c <_ZN4RF248spiTransEh>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
	return spiTrans( FLUSH_TX);
 8001f6a:	21e1      	movs	r1, #225	; 0xe1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f805 	bl	8001f7c <_ZN4RF248spiTransEh>
 8001f72:	4603      	mov	r3, r0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_ZN4RF248spiTransEh>:

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]

	uint8_t status;

	beginTransaction();
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff feab 	bl	8001ce4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6918      	ldr	r0, [r3, #16]
 8001f92:	f107 020f 	add.w	r2, r7, #15
 8001f96:	1cf9      	adds	r1, r7, #3
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f001 ffeb 	bl	8003f7a <HAL_SPI_TransmitReceive>
	endTransaction();
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fea9 	bl	8001cfc <_ZN4RF2414endTransactionEv>

	return status;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	return spiTrans(RF24_NOP);
 8001fbc:	21ff      	movs	r1, #255	; 0xff
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffdc 	bl	8001f7c <_ZN4RF248spiTransEh>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_ZN4RF24C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>:
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer2,strlen(buffer2),HAL_MAX_DELAY);
}
#endif
/****************************************************************************/

RF24::RF24(GPIO_TypeDef * _cepin_port, uint16_t _cepin, GPIO_TypeDef * _cspin_port, uint16_t _cspin, SPI_HandleTypeDef * _hspix) :
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
		ce_pin_port(_cepin_port), ce_pin(_cepin), csn_pin_port(_cspin_port), csn_pin(_cspin), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(
				5)  //,pipe0_reading_addressHAL_MAX_DELAY
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	809a      	strh	r2, [r3, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8b3a      	ldrh	r2, [r7, #24]
 8001ff4:	819a      	strh	r2, [r3, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	759a      	strb	r2, [r3, #22]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	75da      	strb	r2, [r3, #23]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	761a      	strb	r2, [r3, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2205      	movs	r2, #5
 8002012:	779a      	strb	r2, [r3, #30]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2205      	movs	r2, #5
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
{
	pipe0_reading_address[0] = 0;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	765a      	strb	r2, [r3, #25]
}
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
	const uint8_t max_channel = 125;
 8002038:	237d      	movs	r3, #125	; 0x7d
 800203a:	73fb      	strb	r3, [r7, #15]
	write_register(RF_CH, rf24_min(channel, max_channel));
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7c      	cmp	r3, #124	; 0x7c
 8002040:	dc02      	bgt.n	8002048 <_ZN4RF2410setChannelEh+0x1c>
 8002042:	1cfb      	adds	r3, r7, #3
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	e000      	b.n	800204a <_ZN4RF2410setChannelEh+0x1e>
 8002048:	237d      	movs	r3, #125	; 0x7d
 800204a:	461a      	mov	r2, r3
 800204c:	2105      	movs	r1, #5
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff feba 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

	uint8_t setup = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
//      if (ce_pin != csn_pin)
//    #endif
//        pinMode(csn_pin,OUTPUT);
//
	//_SPI.begin();
	ce(LOW);
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe28 	bl	8001cc0 <_ZN4RF242ceE13GPIO_PinState>
	csn(HIGH);
 8002070:	2101      	movs	r1, #1
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe12 	bl	8001c9c <_ZN4RF243csnE13GPIO_PinState>
	// This is actually only required following power up but some settling time also appears to
	// be required after resets too. For full coverage, we'll always assume the worst.
	// Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
	// Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
	// WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
	HAL_Delay(5);
 8002078:	2005      	movs	r0, #5
 800207a:	f000 fdf7 	bl	8002c6c <HAL_Delay>

	// Reset NRF_CONFIG and enable 16-bit CRC.
	write_register( NRF_CONFIG, 0x0C);
 800207e:	220c      	movs	r2, #12
 8002080:	2100      	movs	r1, #0
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fea0 	bl	8001dc8 <_ZN4RF2414write_registerEhh>

	// Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
	// WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
	// sizes must never be used. See documentation for a more complete explanation.
	setRetries(5, 15);
 8002088:	220f      	movs	r2, #15
 800208a:	2105      	movs	r1, #5
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f9e9 	bl	8002464 <_ZN4RF2410setRetriesEhh>
	// Reset value is MAX
	//setPALevel( RF24_PA_MAX ) ;

	// check for connected module and if this is a p nRF24l01 variant
	//
	if (setDataRate(RF24_250KBPS))
 8002092:	2102      	movs	r1, #2
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f99f 	bl	80023d8 <_ZN4RF2411setDataRateE15rf24_datarate_e>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <_ZN4RF245beginEv+0x4a>
	{
		p_variant = true;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	759a      	strb	r2, [r3, #22]
	}
	setup = read_register(RF_SETUP);
 80020a6:	2106      	movs	r1, #6
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fe33 	bl	8001d14 <_ZN4RF2413read_registerEh>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73fb      	strb	r3, [r7, #15]
	 p_variant = true ;
	 }*/

	// Then set the data rate to the slowest (and most reliable) speed supported by all
	// hardware.
	setDataRate(RF24_1MBPS);
 80020b2:	2100      	movs	r1, #0
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f98f 	bl	80023d8 <_ZN4RF2411setDataRateE15rf24_datarate_e>

	// Initialize CRC and request 2-byte (16bit) CRC
	//setCRCLength( RF24_CRC_16 ) ;

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f968 	bl	8002390 <_ZN4RF2415toggle_featuresEv>
	write_register(FEATURE, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	211d      	movs	r1, #29
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fe7f 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
	write_register(DYNPD, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	211c      	movs	r1, #28
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fe7a 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
	dynamic_payloads_enabled = false;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	761a      	strb	r2, [r3, #24]

	// Reset current status
	// Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 80020da:	2270      	movs	r2, #112	; 0x70
 80020dc:	2107      	movs	r1, #7
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fe72 	bl	8001dc8 <_ZN4RF2414write_registerEhh>

	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	setChannel(76);
 80020e4:	214c      	movs	r1, #76	; 0x4c
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffa0 	bl	800202c <_ZN4RF2410setChannelEh>

	// Flush buffers
	flush_rx();
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff2b 	bl	8001f48 <_ZN4RF248flush_rxEv>
	flush_tx();
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff35 	bl	8001f62 <_ZN4RF248flush_txEv>

	powerUp(); //Power up by default when begin() is called
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f85e 	bl	80021ba <_ZN4RF247powerUpEv>

	// Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
	// PTX should use only 22uA of power
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
 80020fe:	2100      	movs	r1, #0
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fe07 	bl	8001d14 <_ZN4RF2413read_registerEh>
 8002106:	4603      	mov	r3, r0
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	2100      	movs	r1, #0
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fe58 	bl	8001dc8 <_ZN4RF2414write_registerEhh>

	// if setup is 0 or ff then there was no response from module
	return (setup != 0 && setup != 0xff);
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <_ZN4RF245beginEv+0xcc>
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2bff      	cmp	r3, #255	; 0xff
 8002122:	d001      	beq.n	8002128 <_ZN4RF245beginEv+0xcc>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <_ZN4RF245beginEv+0xce>
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	powerUp();
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f83d 	bl	80021ba <_ZN4RF247powerUpEv>
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fde6 	bl	8001d14 <_ZN4RF2413read_registerEh>
 8002148:	4603      	mov	r3, r0
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fe37 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
	write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 800215a:	2270      	movs	r2, #112	; 0x70
 800215c:	2107      	movs	r1, #7
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fe32 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
	ce(HIGH);
 8002164:	2101      	movs	r1, #1
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fdaa 	bl	8001cc0 <_ZN4RF242ceE13GPIO_PinState>
	// Restore the pipe0 adddress, if exists
	if (pipe0_reading_address[0] > 0)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e5b      	ldrb	r3, [r3, #25]
 8002170:	2b00      	cmp	r3, #0
 8002172:	dd09      	ble.n	8002188 <_ZN4RF2414startListeningEv+0x56>
	{
		write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0219 	add.w	r2, r3, #25
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7f9b      	ldrb	r3, [r3, #30]
 800217e:	210a      	movs	r1, #10
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fdef 	bl	8001d64 <_ZN4RF2414write_registerEhPKhh>
 8002186:	e003      	b.n	8002190 <_ZN4RF2414startListeningEv+0x5e>
	}
	else
	{
		closeReadingPipe(0);
 8002188:	2100      	movs	r1, #0
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8dc 	bl	8002348 <_ZN4RF2416closeReadingPipeEh>
	}

	// Flush buffers
	//flush_rx();
	if (read_register(FEATURE) & _BV(EN_ACK_PAY))
 8002190:	211d      	movs	r1, #29
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fdbe 	bl	8001d14 <_ZN4RF2413read_registerEh>
 8002198:	4603      	mov	r3, r0
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <_ZN4RF2414startListeningEv+0x80>
	{
		flush_tx();
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fed8 	bl	8001f62 <_ZN4RF248flush_txEv>
	}

	// Go!
	//HAL_DelayHAL_MAX_DELAY;//us
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	uint8_t cfg = read_register(NRF_CONFIG);
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fda5 	bl	8001d14 <_ZN4RF2413read_registerEh>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]

	// if not powered up then power up and wait for the radio to initialize
	if (!(cfg & _BV(PWR_UP)))
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10b      	bne.n	80021f0 <_ZN4RF247powerUpEv+0x36>
	{
		write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fdef 	bl	8001dc8 <_ZN4RF2414write_registerEhh>

		// For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
		// There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
		// the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
		HAL_Delay(5);
 80021ea:	2005      	movs	r0, #5
 80021ec:	f000 fd3e 	bl	8002c6c <HAL_Delay>
	}
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZN4RF249availableEv>:
}

/****************************************************************************/

bool RF24::available(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	return available(NULL);
 8002200:	2100      	movs	r1, #0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f805 	bl	8002212 <_ZN4RF249availableEPh>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZN4RF249availableEPh>:

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
	if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY)))
 800221c:	2117      	movs	r1, #23
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fd78 	bl	8001d14 <_ZN4RF2413read_registerEh>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d011      	beq.n	800225c <_ZN4RF249availableEPh+0x4a>
	{

		// If the caller wants the pipe number, include that
		if (pipe_num)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <_ZN4RF249availableEPh+0x46>
		{
			uint8_t status = get_status();
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff feb8 	bl	8001fb4 <_ZN4RF2410get_statusEv>
 8002244:	4603      	mov	r3, r0
 8002246:	73fb      	strb	r3, [r7, #15]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	105b      	asrs	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	b2da      	uxtb	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <_ZN4RF249availableEPh+0x4c>
	}

	return 0;
 800225c:	2300      	movs	r3, #0

}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	4613      	mov	r3, r2
 8002272:	71fb      	strb	r3, [r7, #7]

	// Fetch the payload
	read_payload(buf, len);
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	461a      	mov	r2, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff fdee 	bl	8001e5c <_ZN4RF2412read_payloadEPvh>

	//Clear the two possible interrupt flags with one command
	write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
 8002280:	2270      	movs	r2, #112	; 0x70
 8002282:	2107      	movs	r1, #7
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff fd9f 	bl	8001dc8 <_ZN4RF2414write_registerEhh>

}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <_ZN4RF2415openReadingPipeEhy>:
static const uint8_t child_payload_size[] =
{
RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5 };

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	e9c7 2300 	strd	r2, r3, [r7]
 80022a0:	460b      	mov	r3, r1
 80022a2:	72fb      	strb	r3, [r7, #11]
	// If this is pipe 0, cache the address.  This is needed because
	// openWritingPipe() will overwrite the pipe 0 address, so
	// startListening() will have to restore it.
	if (child == 0)
 80022a4:	7afb      	ldrb	r3, [r7, #11]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <_ZN4RF2415openReadingPipeEhy+0x2a>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f103 0019 	add.w	r0, r3, #25
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	7f9b      	ldrb	r3, [r3, #30]
 80022b4:	461a      	mov	r2, r3
 80022b6:	463b      	mov	r3, r7
 80022b8:	4619      	mov	r1, r3
 80022ba:	f003 f8ed 	bl	8005498 <memcpy>
	}

	if (child <= 6)
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	dc36      	bgt.n	8002332 <_ZN4RF2415openReadingPipeEhy+0x9e>
	{
		// For pipes 2-5, only write the LSB
		if (child < 2)
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	dc0a      	bgt.n	80022e0 <_ZN4RF2415openReadingPipeEhy+0x4c>
			write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <_ZN4RF2415openReadingPipeEhy+0xa8>)
 80022ce:	4413      	add	r3, r2
 80022d0:	7819      	ldrb	r1, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	7f9b      	ldrb	r3, [r3, #30]
 80022d6:	463a      	mov	r2, r7
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fd43 	bl	8001d64 <_ZN4RF2414write_registerEhPKhh>
 80022de:	e008      	b.n	80022f2 <_ZN4RF2415openReadingPipeEhy+0x5e>
		else
			write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	4a16      	ldr	r2, [pc, #88]	; (800233c <_ZN4RF2415openReadingPipeEhy+0xa8>)
 80022e4:	4413      	add	r3, r2
 80022e6:	7819      	ldrb	r1, [r3, #0]
 80022e8:	463a      	mov	r2, r7
 80022ea:	2301      	movs	r3, #1
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fd39 	bl	8001d64 <_ZN4RF2414write_registerEhPKhh>

		write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <_ZN4RF2415openReadingPipeEhy+0xac>)
 80022f6:	4413      	add	r3, r2
 80022f8:	7819      	ldrb	r1, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	7ddb      	ldrb	r3, [r3, #23]
 80022fe:	461a      	mov	r2, r3
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fd61 	bl	8001dc8 <_ZN4RF2414write_registerEhh>

		// Note it would be more efficient to set all of the bits for all open
		// pipes at once.  However, I thought it would make the calling code
		// more simple to do it this way.
		write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
 8002306:	2102      	movs	r1, #2
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff fd03 	bl	8001d14 <_ZN4RF2413read_registerEh>
 800230e:	4603      	mov	r3, r0
 8002310:	b25a      	sxtb	r2, r3
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	490b      	ldr	r1, [pc, #44]	; (8002344 <_ZN4RF2415openReadingPipeEhy+0xb0>)
 8002316:	440b      	add	r3, r1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	2301      	movs	r3, #1
 800231e:	408b      	lsls	r3, r1
 8002320:	b25b      	sxtb	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b25b      	sxtb	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	2102      	movs	r1, #2
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fd4b 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
	}
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	080085e8 	.word	0x080085e8
 8002340:	080085f0 	.word	0x080085f0
 8002344:	0800858c 	.word	0x0800858c

08002348 <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
 8002354:	2102      	movs	r1, #2
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fcdc 	bl	8001d14 <_ZN4RF2413read_registerEh>
 800235c:	4603      	mov	r3, r0
 800235e:	b25a      	sxtb	r2, r3
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	490a      	ldr	r1, [pc, #40]	; (800238c <_ZN4RF2416closeReadingPipeEh+0x44>)
 8002364:	440b      	add	r3, r1
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	2301      	movs	r3, #1
 800236c:	408b      	lsls	r3, r1
 800236e:	b25b      	sxtb	r3, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	b25b      	sxtb	r3, r3
 8002374:	4013      	ands	r3, r2
 8002376:	b25b      	sxtb	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	2102      	movs	r1, #2
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fd22 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	0800858c 	.word	0x0800858c

08002390 <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	uint8_t temp = ACTIVATE;
 8002398:	2350      	movs	r3, #80	; 0x50
 800239a:	73fb      	strb	r3, [r7, #15]
	beginTransaction();
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fca1 	bl	8001ce4 <_ZN4RF2416beginTransactionEv>
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6918      	ldr	r0, [r3, #16]
 80023a6:	f107 010f 	add.w	r1, r7, #15
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	2201      	movs	r2, #1
 80023b0:	f001 fb9a 	bl	8003ae8 <HAL_SPI_Transmit>
	temp = 0x73;
 80023b4:	2373      	movs	r3, #115	; 0x73
 80023b6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6918      	ldr	r0, [r3, #16]
 80023bc:	f107 010f 	add.w	r1, r7, #15
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	2201      	movs	r2, #1
 80023c6:	f001 fb8f 	bl	8003ae8 <HAL_SPI_Transmit>
	endTransaction();
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fc96 	bl	8001cfc <_ZN4RF2414endTransactionEv>
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
	bool result = false;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 80023e8:	2106      	movs	r1, #6
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fc92 	bl	8001d14 <_ZN4RF2413read_registerEh>
 80023f0:	4603      	mov	r3, r0
 80023f2:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80023fa:	73bb      	strb	r3, [r7, #14]

#if !defined(F_CPU) || F_CPU > 20000000
	txDelay = 250;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	22fa      	movs	r2, #250	; 0xfa
 8002400:	621a      	str	r2, [r3, #32]
#else //16Mhz Arduino
	txDelay=85;
#endif
	if (speed == RF24_250KBPS)
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d108      	bne.n	800241a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x42>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		setup |= _BV(RF_DR_LOW);
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	f043 0320 	orr.w	r3, r3, #32
 800240e:	73bb      	strb	r3, [r7, #14]
#if !defined(F_CPU) || F_CPU > 20000000
		txDelay = 450;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002416:	621a      	str	r2, [r3, #32]
 8002418:	e009      	b.n	800242e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS)
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
		{
			setup |= _BV(RF_DR_HIGH);
 8002420:	7bbb      	ldrb	r3, [r7, #14]
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	73bb      	strb	r3, [r7, #14]
#if !defined(F_CPU) || F_CPU > 20000000
			txDelay = 190;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	22be      	movs	r2, #190	; 0xbe
 800242c:	621a      	str	r2, [r3, #32]
#else //16Mhz Arduino
			txDelay=65;
#endif
		}
	}
	write_register(RF_SETUP, setup);
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	461a      	mov	r2, r3
 8002432:	2106      	movs	r1, #6
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fcc7 	bl	8001dc8 <_ZN4RF2414write_registerEhh>

	// Verify our result
	if (read_register(RF_SETUP) == setup)
 800243a:	2106      	movs	r1, #6
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fc69 	bl	8001d14 <_ZN4RF2413read_registerEh>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	4293      	cmp	r3, r2
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x82>
	{
		result = true;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_ZN4RF2410setRetriesEhh>:
	write_register( NRF_CONFIG, disable);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
 8002470:	4613      	mov	r3, r2
 8002472:	70bb      	strb	r3, [r7, #2]
	write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	b25a      	sxtb	r2, r3
 800247a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b25b      	sxtb	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b25b      	sxtb	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	2104      	movs	r1, #4
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fc9a 	bl	8001dc8 <_ZN4RF2414write_registerEhh>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	0000      	movs	r0, r0
	...

080024a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b08f      	sub	sp, #60	; 0x3c
 80024a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80024a6:	f000 fb7f 	bl	8002ba8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80024aa:	f000 f84f 	bl	800254c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80024ae:	f000 f961 	bl	8002774 <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 80024b2:	f000 f89b 	bl	80025ec <_ZL12MX_SPI1_Initv>
	MX_TIM2_Init();
 80024b6:	f000 f8d5 	bl	8002664 <_ZL12MX_TIM2_Initv>
	MX_USART1_UART_Init();
 80024ba:	f000 f92d 	bl	8002718 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	RF24 radio(CE_GPIO_Port, CE_Pin, CSN_GPIO_Port, CSN_Pin, &hspi1);
 80024be:	4638      	mov	r0, r7
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <main+0x98>)
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2310      	movs	r3, #16
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <main+0x9c>)
 80024ca:	2208      	movs	r2, #8
 80024cc:	491b      	ldr	r1, [pc, #108]	; (800253c <main+0x9c>)
 80024ce:	f7ff fd7e 	bl	8001fce <_ZN4RF24C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>
	const uint64_t pipe = 0xE8E8F0F0E1LL;
 80024d2:	a417      	add	r4, pc, #92	; (adr r4, 8002530 <main+0x90>)
 80024d4:	cc18      	ldmia	r4, {r3, r4}
 80024d6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	radio.begin();
 80024da:	463b      	mov	r3, r7
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fdbd 	bl	800205c <_ZN4RF245beginEv>
//	radio.openWritingPipe(pipe);
	radio.openReadingPipe(1, pipe);
 80024e2:	4638      	mov	r0, r7
 80024e4:	a312      	add	r3, pc, #72	; (adr r3, 8002530 <main+0x90>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	2101      	movs	r1, #1
 80024ec:	f7ff fed2 	bl	8002294 <_ZN4RF2415openReadingPipeEhy>
	radio.startListening();
 80024f0:	463b      	mov	r3, r7
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe1d 	bl	8002132 <_ZN4RF2414startListeningEv>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (radio.available())
 80024f8:	463b      	mov	r3, r7
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fe7c 	bl	80021f8 <_ZN4RF249availableEv>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f8      	beq.n	80024f8 <main+0x58>
		{
			radio.read(data, 1);
 8002506:	463b      	mov	r3, r7
 8002508:	2201      	movs	r2, #1
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <main+0xa0>)
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff feaa 	bl	8002266 <_ZN4RF244readEPvh>
			HAL_UART_Transmit(&huart1,data,1,HAL_MAX_DELAY);
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	2201      	movs	r2, #1
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <main+0xa0>)
 800251a:	480a      	ldr	r0, [pc, #40]	; (8002544 <main+0xa4>)
 800251c:	f002 fb3c 	bl	8004b98 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)"\n",1,HAL_MAX_DELAY);
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	2201      	movs	r2, #1
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <main+0xa8>)
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <main+0xa4>)
 800252a:	f002 fb35 	bl	8004b98 <HAL_UART_Transmit>
		if (radio.available())
 800252e:	e7e3      	b.n	80024f8 <main+0x58>
 8002530:	e8f0f0e1 	.word	0xe8f0f0e1
 8002534:	000000e8 	.word	0x000000e8
 8002538:	2000069c 	.word	0x2000069c
 800253c:	40010800 	.word	0x40010800
 8002540:	20000000 	.word	0x20000000
 8002544:	20000734 	.word	0x20000734
 8002548:	08008608 	.word	0x08008608

0800254c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b090      	sub	sp, #64	; 0x40
 8002550:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
	{ 0 };
 8002552:	f107 0318 	add.w	r3, r7, #24
 8002556:	2228      	movs	r2, #40	; 0x28
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f002 ffa7 	bl	80054ae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
	{ 0 };
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002576:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257e:	2301      	movs	r3, #1
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002582:	2302      	movs	r3, #2
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800258c:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002592:	f107 0318 	add.w	r3, r7, #24
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fe84 	bl	80032a4 <HAL_RCC_OscConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <_Z18SystemClock_Configv+0x64>
	{
		Error_Handler();
 80025ac:	f000 f942 	bl	8002834 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025b0:	230f      	movs	r3, #15
 80025b2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b4:	2302      	movs	r3, #2
 80025b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2102      	movs	r1, #2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 f8ce 	bl	800376c <HAL_RCC_ClockConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <_Z18SystemClock_Configv+0x98>
	{
		Error_Handler();
 80025e0:	f000 f928 	bl	8002834 <Error_Handler>
	}
}
 80025e4:	bf00      	nop
 80025e6:	3740      	adds	r7, #64	; 0x40
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 80025f2:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <_ZL12MX_SPI1_Initv+0x74>)
 80025f4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 80025f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025fc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002620:	2208      	movs	r2, #8
 8002622:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002626:	2200      	movs	r2, #0
 8002628:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 800262c:	2200      	movs	r2, #0
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 8002638:	220a      	movs	r2, #10
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <_ZL12MX_SPI1_Initv+0x70>)
 800263e:	f001 ffa5 	bl	800458c <HAL_SPI_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <_ZL12MX_SPI1_Initv+0x6a>
	{
		Error_Handler();
 8002652:	f000 f8ef 	bl	8002834 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000069c 	.word	0x2000069c
 8002660:	40013000 	.word	0x40013000

08002664 <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
	{ 0 };
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig =
	{ 0 };
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 8002682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002686:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026a6:	481b      	ldr	r0, [pc, #108]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 80026a8:	f001 ffd4 	bl	8004654 <HAL_TIM_Base_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <_ZL12MX_TIM2_Initv+0x5c>
	{
		Error_Handler();
 80026bc:	f000 f8ba 	bl	8002834 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	4619      	mov	r1, r3
 80026cc:	4811      	ldr	r0, [pc, #68]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 80026ce:	f001 ffec 	bl	80046aa <HAL_TIM_ConfigClockSource>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <_ZL12MX_TIM2_Initv+0x82>
	{
		Error_Handler();
 80026e2:	f000 f8a7 	bl	8002834 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ee:	463b      	mov	r3, r7
 80026f0:	4619      	mov	r1, r3
 80026f2:	4808      	ldr	r0, [pc, #32]	; (8002714 <_ZL12MX_TIM2_Initv+0xb0>)
 80026f4:	f002 f9bf 	bl	8004a76 <HAL_TIMEx_MasterConfigSynchronization>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <_ZL12MX_TIM2_Initv+0xa8>
	{
		Error_Handler();
 8002708:	f000 f894 	bl	8002834 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200006f4 	.word	0x200006f4

08002718 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002720:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002728:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 800273e:	220c      	movs	r2, #12
 8002740:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002750:	f002 f9d5 	bl	8004afe <HAL_UART_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf14      	ite	ne
 800275a:	2301      	movne	r3, #1
 800275c:	2300      	moveq	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <_ZL19MX_USART1_UART_Initv+0x50>
	{
		Error_Handler();
 8002764:	f000 f866 	bl	8002834 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000734 	.word	0x20000734
 8002770:	40013800 	.word	0x40013800

08002774 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
	{ 0 };
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80027a0:	4a21      	ldr	r2, [pc, #132]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f043 0320 	orr.w	r3, r3, #32
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <_ZL12MX_GPIO_Initv+0xb4>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027d6:	4815      	ldr	r0, [pc, #84]	; (800282c <_ZL12MX_GPIO_Initv+0xb8>)
 80027d8:	f000 fd4c 	bl	8003274 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CE_Pin | CSN_Pin, GPIO_PIN_RESET);
 80027dc:	2200      	movs	r2, #0
 80027de:	2118      	movs	r1, #24
 80027e0:	4813      	ldr	r0, [pc, #76]	; (8002830 <_ZL12MX_GPIO_Initv+0xbc>)
 80027e2:	f000 fd47 	bl	8003274 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80027e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2302      	movs	r3, #2
 80027f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	4619      	mov	r1, r3
 80027fe:	480b      	ldr	r0, [pc, #44]	; (800282c <_ZL12MX_GPIO_Initv+0xb8>)
 8002800:	f000 fbda 	bl	8002fb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ce_Pin csn_Pin */
	GPIO_InitStruct.Pin = CE_Pin | CSN_Pin;
 8002804:	2318      	movs	r3, #24
 8002806:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2302      	movs	r3, #2
 8002812:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4619      	mov	r1, r3
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <_ZL12MX_GPIO_Initv+0xbc>)
 800281c:	f000 fbcc 	bl	8002fb8 <HAL_GPIO_Init>

}
 8002820:	bf00      	nop
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000
 800282c:	40011000 	.word	0x40011000
 8002830:	40010800 	.word	0x40010800

08002834 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <HAL_MspInit+0x5c>)
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_MspInit+0x5c>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6193      	str	r3, [r2, #24]
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_MspInit+0x5c>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_MspInit+0x5c>)
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_MspInit+0x5c>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	61d3      	str	r3, [r2, #28]
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <HAL_MspInit+0x5c>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_MspInit+0x60>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_MspInit+0x60>)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010000 	.word	0x40010000

080028a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_SPI_MspInit+0x98>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d137      	bne.n	8002934 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_SPI_MspInit+0x9c>)
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_SPI_MspInit+0x9c>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_SPI_MspInit+0x9c>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028dc:	4a18      	ldr	r2, [pc, #96]	; (8002940 <HAL_SPI_MspInit+0x9c>)
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_SPI_MspInit+0x9c>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_SPI_MspInit+0x9c>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80028f4:	23a0      	movs	r3, #160	; 0xa0
 80028f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	4619      	mov	r1, r3
 8002906:	480f      	ldr	r0, [pc, #60]	; (8002944 <HAL_SPI_MspInit+0xa0>)
 8002908:	f000 fb56 	bl	8002fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4619      	mov	r1, r3
 800291e:	4809      	ldr	r0, [pc, #36]	; (8002944 <HAL_SPI_MspInit+0xa0>)
 8002920:	f000 fb4a 	bl	8002fb8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2023      	movs	r0, #35	; 0x23
 800292a:	f000 fa92 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800292e:	2023      	movs	r0, #35	; 0x23
 8002930:	f000 faab 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002934:	bf00      	nop
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40013000 	.word	0x40013000
 8002940:	40021000 	.word	0x40021000
 8002944:	40010800 	.word	0x40010800

08002948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d10b      	bne.n	8002972 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_TIM_Base_MspInit+0x34>)
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_TIM_Base_MspInit+0x34>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	61d3      	str	r3, [r2, #28]
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_TIM_Base_MspInit+0x34>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <HAL_UART_MspInit+0x9c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d139      	bne.n	8002a14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_UART_MspInit+0xa0>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4619      	mov	r1, r3
 80029e4:	480f      	ldr	r0, [pc, #60]	; (8002a24 <HAL_UART_MspInit+0xa4>)
 80029e6:	f000 fae7 	bl	8002fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4619      	mov	r1, r3
 80029fe:	4809      	ldr	r0, [pc, #36]	; (8002a24 <HAL_UART_MspInit+0xa4>)
 8002a00:	f000 fada 	bl	8002fb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2025      	movs	r0, #37	; 0x25
 8002a0a:	f000 fa22 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a0e:	2025      	movs	r0, #37	; 0x25
 8002a10:	f000 fa3b 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010800 	.word	0x40010800

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <HardFault_Handler+0x4>

08002a3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <MemManage_Handler+0x4>

08002a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <BusFault_Handler+0x4>

08002a46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <UsageFault_Handler+0x4>

08002a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a74:	f000 f8de 	bl	8002c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <SPI1_IRQHandler+0x10>)
 8002a82:	f001 fc19 	bl	80042b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000069c 	.word	0x2000069c

08002a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <USART1_IRQHandler+0x10>)
 8002a96:	f002 f917 	bl	8004cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000734 	.word	0x20000734

08002aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
	return 1;
 8002aa8:	2301      	movs	r3, #1
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <_kill>:

int _kill(int pid, int sig)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002abc:	f002 fcc2 	bl	8005444 <__errno>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	2316      	movs	r3, #22
 8002ac4:	6013      	str	r3, [r2, #0]
	return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_exit>:

void _exit (int status)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ada:	f04f 31ff 	mov.w	r1, #4294967295
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffe7 	bl	8002ab2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ae4:	e7fe      	b.n	8002ae4 <_exit+0x12>
	...

08002ae8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <_sbrk+0x50>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <_sbrk+0x16>
		heap_end = &end;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <_sbrk+0x50>)
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <_sbrk+0x54>)
 8002afc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <_sbrk+0x50>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <_sbrk+0x50>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	466a      	mov	r2, sp
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d907      	bls.n	8002b22 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002b12:	f002 fc97 	bl	8005444 <__errno>
 8002b16:	4602      	mov	r2, r0
 8002b18:	230c      	movs	r3, #12
 8002b1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e006      	b.n	8002b30 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <_sbrk+0x50>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	4a03      	ldr	r2, [pc, #12]	; (8002b38 <_sbrk+0x50>)
 8002b2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000774 	.word	0x20000774
 8002b3c:	200007c0 	.word	0x200007c0

08002b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <SystemInit+0x5c>)
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <SystemInit+0x5c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002b50:	4912      	ldr	r1, [pc, #72]	; (8002b9c <SystemInit+0x5c>)
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <SystemInit+0x5c>)
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <SystemInit+0x60>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002b5c:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <SystemInit+0x5c>)
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <SystemInit+0x5c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <SystemInit+0x5c>)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <SystemInit+0x5c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <SystemInit+0x5c>)
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <SystemInit+0x5c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <SystemInit+0x5c>)
 8002b86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SystemInit+0x64>)
 8002b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b92:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	f8ff0000 	.word	0xf8ff0000
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bac:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_Init+0x28>)
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_Init+0x28>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f043 0310 	orr.w	r3, r3, #16
 8002bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f000 f93f 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 f808 	bl	8002bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc4:	f7ff fe3c 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000

08002bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_InitTick+0x54>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_InitTick+0x58>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	4619      	mov	r1, r3
 8002be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f957 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00e      	b.n	8002c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d80a      	bhi.n	8002c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f000 f91f 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c14:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <HAL_InitTick+0x5c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000004 	.word	0x20000004
 8002c2c:	2000000c 	.word	0x2000000c
 8002c30:	20000008 	.word	0x20000008

08002c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_IncTick+0x1c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_IncTick+0x20>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	4a03      	ldr	r2, [pc, #12]	; (8002c54 <HAL_IncTick+0x20>)
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	200007ac 	.word	0x200007ac

08002c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <HAL_GetTick+0x10>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	200007ac 	.word	0x200007ac

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_Delay+0x40>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffe0 	bl	8002c58 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad2      	subs	r2, r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3f7      	bcc.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000000c 	.word	0x2000000c

08002cb0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <NVIC_SetPriorityGrouping+0x44>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60d3      	str	r3, [r2, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <NVIC_EnableIRQ+0x2c>)
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	79fa      	ldrb	r2, [r7, #7]
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da0b      	bge.n	8002d70 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	490d      	ldr	r1, [pc, #52]	; (8002d90 <NVIC_SetPriority+0x4c>)
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	3b04      	subs	r3, #4
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d6e:	e009      	b.n	8002d84 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	4908      	ldr	r1, [pc, #32]	; (8002d94 <NVIC_SetPriority+0x50>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	1e5a      	subs	r2, r3, #1
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	401a      	ands	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dde:	2101      	movs	r1, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff92 	bl	8002d44 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff33 	bl	8002cb0 <NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff48 	bl	8002cf8 <NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff92 	bl	8002d98 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff61 	bl	8002d44 <NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff3b 	bl	8002d14 <NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d005      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e057      	b.n	8002f92 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	f022 020e 	bic.w	r2, r2, #14
 8002ef0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f02:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <HAL_DMA_Abort_IT+0xdc>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_DMA_Abort_IT+0xe0>)
 8002f0c:	4299      	cmp	r1, r3
 8002f0e:	d02e      	beq.n	8002f6e <HAL_DMA_Abort_IT+0xae>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4619      	mov	r1, r3
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <HAL_DMA_Abort_IT+0xe4>)
 8002f18:	4299      	cmp	r1, r3
 8002f1a:	d026      	beq.n	8002f6a <HAL_DMA_Abort_IT+0xaa>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_DMA_Abort_IT+0xe8>)
 8002f24:	4299      	cmp	r1, r3
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xa4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_DMA_Abort_IT+0xec>)
 8002f30:	4299      	cmp	r1, r3
 8002f32:	d014      	beq.n	8002f5e <HAL_DMA_Abort_IT+0x9e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_DMA_Abort_IT+0xf0>)
 8002f3c:	4299      	cmp	r1, r3
 8002f3e:	d00b      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x98>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_DMA_Abort_IT+0xf4>)
 8002f48:	4299      	cmp	r1, r3
 8002f4a:	d102      	bne.n	8002f52 <HAL_DMA_Abort_IT+0x92>
 8002f4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f50:	e00e      	b.n	8002f70 <HAL_DMA_Abort_IT+0xb0>
 8002f52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f56:	e00b      	b.n	8002f70 <HAL_DMA_Abort_IT+0xb0>
 8002f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f5c:	e008      	b.n	8002f70 <HAL_DMA_Abort_IT+0xb0>
 8002f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f62:	e005      	b.n	8002f70 <HAL_DMA_Abort_IT+0xb0>
 8002f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f68:	e002      	b.n	8002f70 <HAL_DMA_Abort_IT+0xb0>
 8002f6a:	2310      	movs	r3, #16
 8002f6c:	e000      	b.n	8002f70 <HAL_DMA_Abort_IT+0xb0>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
    } 
  }
  return status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020008 	.word	0x40020008
 8002fa4:	4002001c 	.word	0x4002001c
 8002fa8:	40020030 	.word	0x40020030
 8002fac:	40020044 	.word	0x40020044
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	4002006c 	.word	0x4002006c

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b08b      	sub	sp, #44	; 0x2c
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	e127      	b.n	800322c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8116 	bne.w	8003226 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b12      	cmp	r3, #18
 8003000:	d034      	beq.n	800306c <HAL_GPIO_Init+0xb4>
 8003002:	2b12      	cmp	r3, #18
 8003004:	d80d      	bhi.n	8003022 <HAL_GPIO_Init+0x6a>
 8003006:	2b02      	cmp	r3, #2
 8003008:	d02b      	beq.n	8003062 <HAL_GPIO_Init+0xaa>
 800300a:	2b02      	cmp	r3, #2
 800300c:	d804      	bhi.n	8003018 <HAL_GPIO_Init+0x60>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d031      	beq.n	8003076 <HAL_GPIO_Init+0xbe>
 8003012:	2b01      	cmp	r3, #1
 8003014:	d01c      	beq.n	8003050 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003016:	e048      	b.n	80030aa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003018:	2b03      	cmp	r3, #3
 800301a:	d043      	beq.n	80030a4 <HAL_GPIO_Init+0xec>
 800301c:	2b11      	cmp	r3, #17
 800301e:	d01b      	beq.n	8003058 <HAL_GPIO_Init+0xa0>
          break;
 8003020:	e043      	b.n	80030aa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003022:	4a87      	ldr	r2, [pc, #540]	; (8003240 <HAL_GPIO_Init+0x288>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d026      	beq.n	8003076 <HAL_GPIO_Init+0xbe>
 8003028:	4a85      	ldr	r2, [pc, #532]	; (8003240 <HAL_GPIO_Init+0x288>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d806      	bhi.n	800303c <HAL_GPIO_Init+0x84>
 800302e:	4a85      	ldr	r2, [pc, #532]	; (8003244 <HAL_GPIO_Init+0x28c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d020      	beq.n	8003076 <HAL_GPIO_Init+0xbe>
 8003034:	4a84      	ldr	r2, [pc, #528]	; (8003248 <HAL_GPIO_Init+0x290>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_GPIO_Init+0xbe>
          break;
 800303a:	e036      	b.n	80030aa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800303c:	4a83      	ldr	r2, [pc, #524]	; (800324c <HAL_GPIO_Init+0x294>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0xbe>
 8003042:	4a83      	ldr	r2, [pc, #524]	; (8003250 <HAL_GPIO_Init+0x298>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d016      	beq.n	8003076 <HAL_GPIO_Init+0xbe>
 8003048:	4a82      	ldr	r2, [pc, #520]	; (8003254 <HAL_GPIO_Init+0x29c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_GPIO_Init+0xbe>
          break;
 800304e:	e02c      	b.n	80030aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	623b      	str	r3, [r7, #32]
          break;
 8003056:	e028      	b.n	80030aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	3304      	adds	r3, #4
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	e023      	b.n	80030aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	3308      	adds	r3, #8
 8003068:	623b      	str	r3, [r7, #32]
          break;
 800306a:	e01e      	b.n	80030aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	330c      	adds	r3, #12
 8003072:	623b      	str	r3, [r7, #32]
          break;
 8003074:	e019      	b.n	80030aa <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800307e:	2304      	movs	r3, #4
 8003080:	623b      	str	r3, [r7, #32]
          break;
 8003082:	e012      	b.n	80030aa <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800308c:	2308      	movs	r3, #8
 800308e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	611a      	str	r2, [r3, #16]
          break;
 8003096:	e008      	b.n	80030aa <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003098:	2308      	movs	r3, #8
 800309a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	615a      	str	r2, [r3, #20]
          break;
 80030a2:	e002      	b.n	80030aa <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
          break;
 80030a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d801      	bhi.n	80030b4 <HAL_GPIO_Init+0xfc>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	e001      	b.n	80030b8 <HAL_GPIO_Init+0x100>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2bff      	cmp	r3, #255	; 0xff
 80030be:	d802      	bhi.n	80030c6 <HAL_GPIO_Init+0x10e>
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_Init+0x114>
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	3b08      	subs	r3, #8
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	210f      	movs	r1, #15
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	401a      	ands	r2, r3
 80030de:	6a39      	ldr	r1, [r7, #32]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8096 	beq.w	8003226 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030fa:	4a57      	ldr	r2, [pc, #348]	; (8003258 <HAL_GPIO_Init+0x2a0>)
 80030fc:	4b56      	ldr	r3, [pc, #344]	; (8003258 <HAL_GPIO_Init+0x2a0>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6193      	str	r3, [r2, #24]
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <HAL_GPIO_Init+0x2a0>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003112:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_GPIO_Init+0x2a4>)
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4013      	ands	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a49      	ldr	r2, [pc, #292]	; (8003260 <HAL_GPIO_Init+0x2a8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_Init+0x1ae>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a48      	ldr	r2, [pc, #288]	; (8003264 <HAL_GPIO_Init+0x2ac>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_Init+0x1aa>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a47      	ldr	r2, [pc, #284]	; (8003268 <HAL_GPIO_Init+0x2b0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_Init+0x1a6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a46      	ldr	r2, [pc, #280]	; (800326c <HAL_GPIO_Init+0x2b4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_Init+0x1a2>
 8003156:	2303      	movs	r3, #3
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x1b0>
 800315a:	2304      	movs	r3, #4
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x1b0>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x1b0>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x1b0>
 8003166:	2300      	movs	r3, #0
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8003178:	4938      	ldr	r1, [pc, #224]	; (800325c <HAL_GPIO_Init+0x2a4>)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003192:	4937      	ldr	r1, [pc, #220]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
 800319e:	e006      	b.n	80031ae <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031a0:	4933      	ldr	r1, [pc, #204]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031a2:	4b33      	ldr	r3, [pc, #204]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	4013      	ands	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031ba:	492d      	ldr	r1, [pc, #180]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031bc:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
 80031c6:	e006      	b.n	80031d6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031c8:	4929      	ldr	r1, [pc, #164]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4013      	ands	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031e2:	4923      	ldr	r1, [pc, #140]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
 80031ee:	e006      	b.n	80031fe <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031f0:	491f      	ldr	r1, [pc, #124]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	4013      	ands	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800320a:	4919      	ldr	r1, [pc, #100]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]
 8003216:	e006      	b.n	8003226 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003218:	4915      	ldr	r1, [pc, #84]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	43db      	mvns	r3, r3
 8003222:	4013      	ands	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	3301      	adds	r3, #1
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	2b0f      	cmp	r3, #15
 8003230:	f67f aed4 	bls.w	8002fdc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8003234:	bf00      	nop
 8003236:	372c      	adds	r7, #44	; 0x2c
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	10210000 	.word	0x10210000
 8003244:	10110000 	.word	0x10110000
 8003248:	10120000 	.word	0x10120000
 800324c:	10310000 	.word	0x10310000
 8003250:	10320000 	.word	0x10320000
 8003254:	10220000 	.word	0x10220000
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000
 8003260:	40010800 	.word	0x40010800
 8003264:	40010c00 	.word	0x40010c00
 8003268:	40011000 	.word	0x40011000
 800326c:	40011400 	.word	0x40011400
 8003270:	40010400 	.word	0x40010400

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8087 	beq.w	80033cc <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032be:	4b92      	ldr	r3, [pc, #584]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032ca:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_OscConfig+0x58>
 80032d6:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d06c      	beq.n	80033ca <HAL_RCC_OscConfig+0x126>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d168      	bne.n	80033ca <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e22d      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x70>
 8003306:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003308:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e02e      	b.n	8003372 <HAL_RCC_OscConfig+0xce>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x92>
 800331c:	4a7a      	ldr	r2, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4a77      	ldr	r2, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800332a:	4b77      	ldr	r3, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e01d      	b.n	8003372 <HAL_RCC_OscConfig+0xce>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0xb6>
 8003340:	4a71      	ldr	r2, [pc, #452]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003342:	4b71      	ldr	r3, [pc, #452]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4a6e      	ldr	r2, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800334e:	4b6e      	ldr	r3, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0xce>
 800335a:	4a6b      	ldr	r2, [pc, #428]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800335c:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4a68      	ldr	r2, [pc, #416]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003368:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7ff fc6d 	bl	8002c58 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003382:	f7ff fc69 	bl	8002c58 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b64      	cmp	r3, #100	; 0x64
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1e1      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003394:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0xde>
 80033a0:	e014      	b.n	80033cc <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7ff fc59 	bl	8002c58 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033aa:	f7ff fc55 	bl	8002c58 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	; 0x64
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1cd      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x106>
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d063      	beq.n	80034a0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033d8:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033e4:	4b48      	ldr	r3, [pc, #288]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11c      	bne.n	800342a <HAL_RCC_OscConfig+0x186>
 80033f0:	4b45      	ldr	r3, [pc, #276]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d116      	bne.n	800342a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x170>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e1a1      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	493c      	ldr	r1, [pc, #240]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003428:	e03a      	b.n	80034a0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x268>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7ff fc0e 	bl	8002c58 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003440:	f7ff fc0a 	bl	8002c58 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e182      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	492a      	ldr	r1, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
 8003472:	e015      	b.n	80034a0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <HAL_RCC_OscConfig+0x268>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7ff fbed 	bl	8002c58 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003482:	f7ff fbe9 	bl	8002c58 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e161      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d039      	beq.n	8003520 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d019      	beq.n	80034e8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7ff fbcd 	bl	8002c58 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c2:	f7ff fbc9 	bl	8002c58 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e141      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x264>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f000 fae3 	bl	8003aac <RCC_Delay>
 80034e6:	e01b      	b.n	8003520 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ee:	f7ff fbb3 	bl	8002c58 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	e00e      	b.n	8003514 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f6:	f7ff fbaf 	bl	8002c58 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d907      	bls.n	8003514 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e127      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
 8003508:	40021000 	.word	0x40021000
 800350c:	42420000 	.word	0x42420000
 8003510:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	4b92      	ldr	r3, [pc, #584]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ea      	bne.n	80034f6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a6 	beq.w	800367a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003532:	4b8b      	ldr	r3, [pc, #556]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10d      	bne.n	800355a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	4a88      	ldr	r2, [pc, #544]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003540:	4b87      	ldr	r3, [pc, #540]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	61d3      	str	r3, [r2, #28]
 800354a:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b82      	ldr	r3, [pc, #520]	; (8003764 <HAL_RCC_OscConfig+0x4c0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4a7f      	ldr	r2, [pc, #508]	; (8003764 <HAL_RCC_OscConfig+0x4c0>)
 8003568:	4b7e      	ldr	r3, [pc, #504]	; (8003764 <HAL_RCC_OscConfig+0x4c0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7ff fb71 	bl	8002c58 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7ff fb6d 	bl	8002c58 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0e5      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b75      	ldr	r3, [pc, #468]	; (8003764 <HAL_RCC_OscConfig+0x4c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x30a>
 80035a0:	4a6f      	ldr	r2, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035a2:	4b6f      	ldr	r3, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	e02d      	b.n	800360a <HAL_RCC_OscConfig+0x366>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x32c>
 80035b6:	4a6a      	ldr	r2, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035b8:	4b69      	ldr	r3, [pc, #420]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6213      	str	r3, [r2, #32]
 80035c2:	4a67      	ldr	r2, [pc, #412]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	e01c      	b.n	800360a <HAL_RCC_OscConfig+0x366>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCC_OscConfig+0x34e>
 80035d8:	4a61      	ldr	r2, [pc, #388]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035da:	4b61      	ldr	r3, [pc, #388]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6213      	str	r3, [r2, #32]
 80035e4:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035e6:	4b5e      	ldr	r3, [pc, #376]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6213      	str	r3, [r2, #32]
 80035f0:	e00b      	b.n	800360a <HAL_RCC_OscConfig+0x366>
 80035f2:	4a5b      	ldr	r2, [pc, #364]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035f4:	4b5a      	ldr	r3, [pc, #360]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003600:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d015      	beq.n	800363e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7ff fb21 	bl	8002c58 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7ff fb1d 	bl	8002c58 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e093      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ee      	beq.n	800361a <HAL_RCC_OscConfig+0x376>
 800363c:	e014      	b.n	8003668 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7ff fb0b 	bl	8002c58 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7ff fb07 	bl	8002c58 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e07d      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ee      	bne.n	8003646 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4a3c      	ldr	r2, [pc, #240]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d069      	beq.n	8003756 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d061      	beq.n	8003752 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d146      	bne.n	8003724 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7ff fadc 	bl	8002c58 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7ff fad8 	bl	8002c58 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e050      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ca:	d108      	bne.n	80036de <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036cc:	4924      	ldr	r1, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036de:	4820      	ldr	r0, [pc, #128]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a19      	ldr	r1, [r3, #32]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	430b      	orrs	r3, r1
 80036f2:	4313      	orrs	r3, r2
 80036f4:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff faac 	bl	8002c58 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7ff faa8 	bl	8002c58 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e020      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x460>
 8003722:	e018      	b.n	8003756 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7ff fa95 	bl	8002c58 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7ff fa91 	bl	8002c58 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e009      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_OscConfig+0x4bc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x48e>
 8003750:	e001      	b.n	8003756 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	40007000 	.word	0x40007000
 8003768:	42420060 	.word	0x42420060

0800376c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800377a:	4b7e      	ldr	r3, [pc, #504]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0207 	and.w	r2, r3, #7
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d210      	bcs.n	80037aa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003788:	497a      	ldr	r1, [pc, #488]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 800378a:	4b7a      	ldr	r3, [pc, #488]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 0207 	bic.w	r2, r3, #7
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003798:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0207 	and.w	r2, r3, #7
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0e0      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d020      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c2:	4a6d      	ldr	r2, [pc, #436]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80037c4:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037cc:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037da:	4a67      	ldr	r2, [pc, #412]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037e4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e6:	4964      	ldr	r1, [pc, #400]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80037e8:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d06a      	beq.n	80038da <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380c:	4b5a      	ldr	r3, [pc, #360]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d115      	bne.n	8003844 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0a7      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d107      	bne.n	8003834 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	4b54      	ldr	r3, [pc, #336]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e09b      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e093      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003844:	494c      	ldr	r1, [pc, #304]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003846:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003856:	f7ff f9ff 	bl	8002c58 <HAL_GetTick>
 800385a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d112      	bne.n	800388a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003864:	e00a      	b.n	800387c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003866:	f7ff f9f7 	bl	8002c58 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e077      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800387c:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b04      	cmp	r3, #4
 8003886:	d1ee      	bne.n	8003866 <HAL_RCC_ClockConfig+0xfa>
 8003888:	e027      	b.n	80038da <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11d      	bne.n	80038ce <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7ff f9e0 	bl	8002c58 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e060      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038aa:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d1ee      	bne.n	8003894 <HAL_RCC_ClockConfig+0x128>
 80038b6:	e010      	b.n	80038da <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7ff f9ce 	bl	8002c58 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04e      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ee      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0207 	and.w	r2, r3, #7
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d910      	bls.n	800390a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e8:	4922      	ldr	r1, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 0207 	bic.w	r2, r3, #7
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038f8:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <HAL_RCC_ClockConfig+0x208>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0207 	and.w	r2, r3, #7
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d001      	beq.n	800390a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e030      	b.n	800396c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003916:	4918      	ldr	r1, [pc, #96]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003934:	4910      	ldr	r1, [pc, #64]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003948:	f000 f81c 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 800394c:	4601      	mov	r1, r0
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x20c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_RCC_ClockConfig+0x210>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
 8003960:	4a07      	ldr	r2, [pc, #28]	; (8003980 <HAL_RCC_ClockConfig+0x214>)
 8003962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003964:	2000      	movs	r0, #0
 8003966:	f7ff f935 	bl	8002bd4 <HAL_InitTick>
  
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40022000 	.word	0x40022000
 8003978:	40021000 	.word	0x40021000
 800397c:	08008620 	.word	0x08008620
 8003980:	20000004 	.word	0x20000004

08003984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	b490      	push	{r4, r7}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xb0>)
 800398c:	1d3c      	adds	r4, r7, #4
 800398e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003990:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x40>
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x46>
 80039c2:	e02d      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039c6:	623b      	str	r3, [r7, #32]
      break;
 80039c8:	e02d      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	0c9b      	lsrs	r3, r3, #18
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039d6:	4413      	add	r3, r2
 80039d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039e8:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	0c5b      	lsrs	r3, r3, #17
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039f6:	4413      	add	r3, r2
 80039f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039fc:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a02:	fb02 f203 	mul.w	r2, r2, r3
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e004      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	623b      	str	r3, [r7, #32]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a22:	623b      	str	r3, [r7, #32]
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	6a3b      	ldr	r3, [r7, #32]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc90      	pop	{r4, r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	0800860c 	.word	0x0800860c
 8003a38:	0800861c 	.word	0x0800861c
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	003d0900 	.word	0x003d0900

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000004 	.word	0x20000004

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a60:	f7ff fff2 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a64:	4601      	mov	r1, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4a03      	ldr	r2, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	08008630 	.word	0x08008630

08003a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a88:	f7ff ffde 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	0adb      	lsrs	r3, r3, #11
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4a03      	ldr	r2, [pc, #12]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08008630 	.word	0x08008630

08003aac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <RCC_Delay+0x34>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <RCC_Delay+0x38>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003ac8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e5a      	subs	r2, r3, #1
 8003ace:	60fa      	str	r2, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f9      	bne.n	8003ac8 <RCC_Delay+0x1c>
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	10624dd3 	.word	0x10624dd3

08003ae8 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_SPI_Transmit+0x26>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e123      	b.n	8003d56 <HAL_SPI_Transmit+0x26e>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b16:	f7ff f89f 	bl	8002c58 <HAL_GetTick>
 8003b1a:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b2c:	e10a      	b.n	8003d44 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Transmit+0x52>
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b3e:	e101      	b.n	8003d44 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2203      	movs	r2, #3
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b86:	d107      	bne.n	8003b98 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d007      	beq.n	8003bb6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbe:	d147      	bne.n	8003c50 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_SPI_Transmit+0xea>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d138      	bne.n	8003c44 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3302      	adds	r3, #2
 8003be0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bf0:	e028      	b.n	8003c44 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d10f      	bne.n	8003c20 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	8812      	ldrh	r2, [r2, #0]
 8003c08:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c1e:	e011      	b.n	8003c44 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_SPI_Transmit+0x156>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d00a      	beq.n	8003c44 <HAL_SPI_Transmit+0x15c>
 8003c2e:	f7ff f813 	bl	8002c58 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c42:	e07f      	b.n	8003d44 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1d1      	bne.n	8003bf2 <HAL_SPI_Transmit+0x10a>
 8003c4e:	e048      	b.n	8003ce2 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <HAL_SPI_Transmit+0x17a>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d13a      	bne.n	8003cd8 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	7812      	ldrb	r2, [r2, #0]
 8003c6c:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c82:	e029      	b.n	8003cd8 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d110      	bne.n	8003cb4 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cb2:	e011      	b.n	8003cd8 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_SPI_Transmit+0x1ea>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_SPI_Transmit+0x1f0>
 8003cc2:	f7fe ffc9 	bl	8002c58 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cd6:	e035      	b.n	8003d44 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1d0      	bne.n	8003c84 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	2102      	movs	r1, #2
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fbc6 	bl	800447e <SPI_WaitFlagStateUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cfc:	e022      	b.n	8003d44 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fc24 	bl	8004550 <SPI_CheckFlag_BSY>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d18:	e014      	b.n	8003d44 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b088      	sub	sp, #32
 8003d62:	af02      	add	r7, sp, #8
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7e:	d112      	bne.n	8003da6 <HAL_SPI_Receive+0x48>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10e      	bne.n	8003da6 <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8003d90:	88fa      	ldrh	r2, [r7, #6]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f8ec 	bl	8003f7a <HAL_SPI_TransmitReceive>
 8003da2:	4603      	mov	r3, r0
 8003da4:	e0e5      	b.n	8003f72 <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_SPI_Receive+0x56>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e0de      	b.n	8003f72 <HAL_SPI_Receive+0x214>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dbc:	f7fe ff4c 	bl	8002c58 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dd2:	e0c5      	b.n	8003f60 <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Receive+0x82>
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003de4:	e0bc      	b.n	8003f60 <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2204      	movs	r2, #4
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2c:	d107      	bne.n	8003e3e <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d007      	beq.n	8003e5c <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5a:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d15b      	bne.n	8003f1c <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8003e64:	e02a      	b.n	8003ebc <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d111      	bne.n	8003e98 <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	3301      	adds	r3, #1
 8003e86:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e96:	e011      	b.n	8003ebc <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_SPI_Receive+0x158>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d00a      	beq.n	8003ebc <HAL_SPI_Receive+0x15e>
 8003ea6:	f7fe fed7 	bl	8002c58 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad2      	subs	r2, r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eba:	e051      	b.n	8003f60 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1cf      	bne.n	8003e66 <HAL_SPI_Receive+0x108>
 8003ec6:	e02e      	b.n	8003f26 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d110      	bne.n	8003ef8 <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef6:	e011      	b.n	8003f1c <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_SPI_Receive+0x1b8>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d00a      	beq.n	8003f1c <HAL_SPI_Receive+0x1be>
 8003f06:	f7fe fea7 	bl	8002c58 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f1a:	e021      	b.n	8003f60 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1d0      	bne.n	8003ec8 <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2e:	d111      	bne.n	8003f54 <HAL_SPI_Receive+0x1f6>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f38:	d004      	beq.n	8003f44 <HAL_SPI_Receive+0x1e6>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d107      	bne.n	8003f54 <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f52:	601a      	str	r2, [r3, #0]
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b08c      	sub	sp, #48	; 0x30
 8003f7e:	af02      	add	r7, sp, #8
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8003f94:	2301      	movs	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x32>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e181      	b.n	80042b0 <HAL_SPI_TransmitReceive+0x336>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb4:	f7fe fe50 	bl	8002c58 <HAL_GetTick>
 8003fb8:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d00e      	beq.n	8003fee <HAL_SPI_TransmitReceive+0x74>
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd6:	d106      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x6c>
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d003      	beq.n	8003fee <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fec:	e156      	b.n	800429c <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x86>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x86>
 8003ffa:	887b      	ldrh	r3, [r7, #2]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004006:	e149      	b.n	800429c <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d103      	bne.n	800401c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2205      	movs	r2, #5
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	887a      	ldrh	r2, [r7, #2]
 800402c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	887a      	ldrh	r2, [r7, #2]
 8004032:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	887a      	ldrh	r2, [r7, #2]
 800403e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d007      	beq.n	8004070 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004078:	d171      	bne.n	800415e <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <HAL_SPI_TransmitReceive+0x112>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d15d      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3302      	adds	r3, #2
 800409a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040aa:	e04d      	b.n	8004148 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01c      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x172>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d017      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x172>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d110      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3302      	adds	r3, #2
 80040d8:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x1ae>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d111      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3302      	adds	r3, #2
 8004114:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8004124:	2301      	movs	r3, #1
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d00b      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x1ce>
 8004130:	f7fe fd92 	bl	8002c58 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	429a      	cmp	r2, r3
 800413e:	d303      	bcc.n	8004148 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004146:	e0a9      	b.n	800429c <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ac      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x132>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1a7      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x132>
 800415c:	e071      	b.n	8004242 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d004      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x1f6>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d15e      	bne.n	800422e <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	3301      	adds	r3, #1
 8004180:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004190:	e04d      	b.n	800422e <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01d      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x25a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x25a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d111      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f103 020c 	add.w	r2, r3, #12
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1c59      	adds	r1, r3, #1
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d017      	beq.n	800420e <HAL_SPI_TransmitReceive+0x294>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d110      	bne.n	800420e <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800420a:	2301      	movs	r3, #1
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d00b      	beq.n	800422e <HAL_SPI_TransmitReceive+0x2b4>
 8004216:	f7fe fd1f 	bl	8002c58 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1ad2      	subs	r2, r2, r3
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	429a      	cmp	r2, r3
 8004224:	d303      	bcc.n	800422e <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800422c:	e036      	b.n	800429c <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ac      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x218>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1a7      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	2201      	movs	r2, #1
 800424a:	2102      	movs	r1, #2
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f916 	bl	800447e <SPI_WaitFlagStateUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800425e:	e01d      	b.n	800429c <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f973 	bl	8004550 <SPI_CheckFlag_BSY>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800427c:	e00e      	b.n	800429c <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
    return;
 80042f6:	e09f      	b.n	8004438 <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_SPI_IRQHandler+0x5e>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
    return;
 8004314:	e090      	b.n	8004438 <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 808b 	beq.w	8004438 <HAL_SPI_IRQHandler+0x180>
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8085 	beq.w	8004438 <HAL_SPI_IRQHandler+0x180>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d023      	beq.n	8004380 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b03      	cmp	r3, #3
 8004342:	d011      	beq.n	8004368 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	e00b      	b.n	8004380 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]
        return;
 800437e:	e05b      	b.n	8004438 <HAL_SPI_IRQHandler+0x180>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d014      	beq.n	80043b4 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d03c      	beq.n	8004436 <HAL_SPI_IRQHandler+0x17e>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	6852      	ldr	r2, [r2, #4]
 80043c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <HAL_SPI_IRQHandler+0x130>
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d022      	beq.n	800442e <HAL_SPI_IRQHandler+0x176>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	6852      	ldr	r2, [r2, #4]
 80043f2:	f022 0203 	bic.w	r2, r2, #3
 80043f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_SPI_IRQHandler+0x15a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <HAL_SPI_IRQHandler+0x188>)
 8004406:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fd57 	bl	8002ec0 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_SPI_IRQHandler+0x17c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <HAL_SPI_IRQHandler+0x188>)
 8004420:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fd4a 	bl	8002ec0 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 800442c:	e002      	b.n	8004434 <HAL_SPI_IRQHandler+0x17c>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f808 	bl	8004444 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8004434:	bf00      	nop
 8004436:	bf00      	nop
  }
}
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08004457 	.word	0x08004457

08004444 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff ffe7 	bl	8004444 <HAL_SPI_ErrorCallback>
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800448c:	e04d      	b.n	800452a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d049      	beq.n	800452a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <SPI_WaitFlagStateUntilTimeout+0x2e>
 800449c:	f7fe fbdc 	bl	8002c58 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	1ad2      	subs	r2, r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d33e      	bcc.n	800452a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	6852      	ldr	r2, [r2, #4]
 80044b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044ba:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c4:	d111      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0x6c>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ce:	d004      	beq.n	80044da <SPI_WaitFlagStateUntilTimeout+0x5c>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d8:	d107      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f2:	d110      	bne.n	8004516 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004502:	400b      	ands	r3, r1
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004514:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e00e      	b.n	8004548 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	401a      	ands	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d101      	bne.n	800453e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800453a:	2201      	movs	r2, #1
 800453c:	e000      	b.n	8004540 <SPI_WaitFlagStateUntilTimeout+0xc2>
 800453e:	2200      	movs	r2, #0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d1a3      	bne.n	800448e <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff ff89 	bl	800447e <SPI_WaitFlagStateUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e000      	b.n	8004584 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e056      	b.n	800464c <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fe f977 	bl	80028a4 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6851      	ldr	r1, [r2, #4]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6892      	ldr	r2, [r2, #8]
 80045da:	4311      	orrs	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68d2      	ldr	r2, [r2, #12]
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6912      	ldr	r2, [r2, #16]
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6952      	ldr	r2, [r2, #20]
 80045ec:	4311      	orrs	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6992      	ldr	r2, [r2, #24]
 80045f2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80045f6:	4311      	orrs	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	69d2      	ldr	r2, [r2, #28]
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6a12      	ldr	r2, [r2, #32]
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6992      	ldr	r2, [r2, #24]
 8004614:	0c12      	lsrs	r2, r2, #16
 8004616:	f002 0104 	and.w	r1, r2, #4
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800462a:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	69d2      	ldr	r2, [r2, #28]
 8004636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800463a:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e01d      	b.n	80046a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fe f964 	bl	8002948 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f000 f8e4 	bl	8004860 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_ConfigClockSource+0x1c>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e0c8      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x1ae>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d077      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x144>
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d80e      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x76>
 8004702:	2b10      	cmp	r3, #16
 8004704:	f000 808a 	beq.w	800481c <HAL_TIM_ConfigClockSource+0x172>
 8004708:	2b10      	cmp	r3, #16
 800470a:	d802      	bhi.n	8004712 <HAL_TIM_ConfigClockSource+0x68>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d07e      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8004710:	e099      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8004712:	2b20      	cmp	r3, #32
 8004714:	f000 8089 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x180>
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	f000 808d 	beq.w	8004838 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 800471e:	e092      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d016      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xa8>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d804      	bhi.n	8004732 <HAL_TIM_ConfigClockSource+0x88>
 8004728:	2b50      	cmp	r3, #80	; 0x50
 800472a:	d040      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x104>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d04e      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x124>
    break;
 8004730:	e089      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d003      	beq.n	8004740 <HAL_TIM_ConfigClockSource+0x96>
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473c:	d024      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0xde>
    break;
 800473e:	e082      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	6892      	ldr	r2, [r2, #8]
 800474a:	f022 0207 	bic.w	r2, r2, #7
 800474e:	609a      	str	r2, [r3, #8]
    break;
 8004750:	e079      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f000 f967 	bl	8004a34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004774:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800477c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	609a      	str	r2, [r3, #8]
    break;
 8004786:	e05e      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f000 f94c 	bl	8004a34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047aa:	609a      	str	r2, [r3, #8]
    break;
 80047ac:	e04b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 f8b6 	bl	800492c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2150      	movs	r1, #80	; 0x50
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f915 	bl	80049f6 <TIM_ITRx_SetConfig>
    break;
 80047cc:	e03b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 f8d8 	bl	8004990 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2160      	movs	r1, #96	; 0x60
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f905 	bl	80049f6 <TIM_ITRx_SetConfig>
    break;
 80047ec:	e02b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 f896 	bl	800492c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f8f5 	bl	80049f6 <TIM_ITRx_SetConfig>
    break;
 800480c:	e01b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f8ee 	bl	80049f6 <TIM_ITRx_SetConfig>
    break;
 800481a:	e014      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2110      	movs	r1, #16
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f8e7 	bl	80049f6 <TIM_ITRx_SetConfig>
    break;
 8004828:	e00d      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2120      	movs	r1, #32
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f8e0 	bl	80049f6 <TIM_ITRx_SetConfig>
    break;
 8004836:	e006      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2130      	movs	r1, #48	; 0x30
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f8d9 	bl	80049f6 <TIM_ITRx_SetConfig>
    break;
 8004844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <TIM_Base_SetConfig+0xc0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_Base_SetConfig+0x34>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004882:	d007      	beq.n	8004894 <TIM_Base_SetConfig+0x34>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_Base_SetConfig+0xc4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0x34>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_Base_SetConfig+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d108      	bne.n	80048a6 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <TIM_Base_SetConfig+0xc0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_Base_SetConfig+0x66>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d007      	beq.n	80048c6 <TIM_Base_SetConfig+0x66>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <TIM_Base_SetConfig+0xc4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_Base_SetConfig+0x66>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <TIM_Base_SetConfig+0xc8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d108      	bne.n	80048d8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048de:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a07      	ldr	r2, [pc, #28]	; (8004920 <TIM_Base_SetConfig+0xc0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d103      	bne.n	8004910 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	615a      	str	r2, [r3, #20]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800

0800492c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f023 030a 	bic.w	r3, r3, #10
 8004970:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 0210 	bic.w	r2, r3, #16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	031b      	lsls	r3, r3, #12
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	f043 0307 	orr.w	r3, r3, #7
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	609a      	str	r2, [r3, #8]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	021a      	lsls	r2, r3, #8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e032      	b.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	6852      	ldr	r2, [r2, #4]
 8004aa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004aac:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	6851      	ldr	r1, [r2, #4]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ace:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	6891      	ldr	r1, [r2, #8]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	6852      	ldr	r2, [r2, #4]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e03f      	b.n	8004b90 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd ff2b 	bl	8002980 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2224      	movs	r2, #36	; 0x24
 8004b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	68d2      	ldr	r2, [r2, #12]
 8004b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b40:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fb40 	bl	80051c8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	6912      	ldr	r2, [r2, #16]
 8004b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	6952      	ldr	r2, [r2, #20]
 8004b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b66:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b76:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	f040 8082 	bne.w	8004cbe <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_UART_Transmit+0x2e>
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07a      	b.n	8004cc0 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_UART_Transmit+0x40>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e073      	b.n	8004cc0 <HAL_UART_Transmit+0x128>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2221      	movs	r2, #33	; 0x21
 8004bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bee:	f7fe f833 	bl	8002c58 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004c00:	e041      	b.n	8004c86 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d121      	bne.n	8004c5e <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f966 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e045      	b.n	8004cc0 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	8812      	ldrh	r2, [r2, #0]
 8004c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c44:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3302      	adds	r3, #2
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	e017      	b.n	8004c86 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	e013      	b.n	8004c86 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f944 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e023      	b.n	8004cc0 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1b8      	bne.n	8004c02 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f92b 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e00a      	b.n	8004cc0 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e000      	b.n	8004cc0 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8004cbe:	2302      	movs	r3, #2
  }
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_UART_IRQHandler+0x52>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9d6 	bl	80050c4 <UART_Receive_IT>
      return;
 8004d18:	e0cc      	b.n	8004eb4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80ab 	beq.w	8004e78 <HAL_UART_IRQHandler+0x1b0>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <HAL_UART_IRQHandler+0x70>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80a0 	beq.w	8004e78 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_UART_IRQHandler+0x90>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	f043 0201 	orr.w	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_UART_IRQHandler+0xb0>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	f043 0202 	orr.w	r2, r3, #2
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_UART_IRQHandler+0xd0>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	f043 0204 	orr.w	r2, r3, #4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_UART_IRQHandler+0xf0>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	f043 0208 	orr.w	r2, r3, #8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d078      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_UART_IRQHandler+0x112>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f975 	bl	80050c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_UART_IRQHandler+0x13a>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d031      	beq.n	8004e66 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8c1 	bl	8004f8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d023      	beq.n	8004e5e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	6952      	ldr	r2, [r2, #20]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d013      	beq.n	8004e56 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_UART_IRQHandler+0x1f4>)
 8004e34:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe f840 	bl	8002ec0 <HAL_DMA_Abort_IT>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e50:	4610      	mov	r0, r2
 8004e52:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	e00e      	b.n	8004e74 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f844 	bl	8004ee4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	e00a      	b.n	8004e74 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f840 	bl	8004ee4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e64:	e006      	b.n	8004e74 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f83c 	bl	8004ee4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004e72:	e01e      	b.n	8004eb2 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e74:	bf00      	nop
    return;
 8004e76:	e01c      	b.n	8004eb2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_UART_IRQHandler+0x1cc>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8ad 	bl	8004fec <UART_Transmit_IT>
    return;
 8004e92:	e00f      	b.n	8004eb4 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x1ec>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f8f3 	bl	8005094 <UART_EndTransmit_IT>
    return;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004eb2:	bf00      	nop
  }
}
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	08004fc5 	.word	0x08004fc5

08004ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004f06:	e02c      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d028      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f16:	f7fd fe9f 	bl	8002c58 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d91d      	bls.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	68d2      	ldr	r2, [r2, #12]
 8004f30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	6952      	ldr	r2, [r2, #20]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e00f      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d0c3      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	68d2      	ldr	r2, [r2, #12]
 8004f9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fa0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	6952      	ldr	r2, [r2, #20]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff ff80 	bl	8004ee4 <HAL_UART_ErrorCallback>
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b21      	cmp	r3, #33	; 0x21
 8004ffe:	d143      	bne.n	8005088 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005008:	d119      	bne.n	800503e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	8812      	ldrh	r2, [r2, #0]
 8005018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d105      	bne.n	8005032 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	621a      	str	r2, [r3, #32]
 8005030:	e00e      	b.n	8005050 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]
 800503c:	e008      	b.n	8005050 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	1c58      	adds	r0, r3, #1
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	6208      	str	r0, [r1, #32]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4619      	mov	r1, r3
 800505e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10f      	bne.n	8005084 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	68d2      	ldr	r2, [r2, #12]
 800506e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	68d2      	ldr	r2, [r2, #12]
 800507e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	68d2      	ldr	r2, [r2, #12]
 80050a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050aa:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff03 	bl	8004ec0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b22      	cmp	r3, #34	; 0x22
 80050d6:	d171      	bne.n	80051bc <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e0:	d123      	bne.n	800512a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10e      	bne.n	800510e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	1c9a      	adds	r2, r3, #2
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	; 0x28
 800510c:	e029      	b.n	8005162 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	b29b      	uxth	r3, r3
 8005116:	b2db      	uxtb	r3, r3
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
 8005128:	e01b      	b.n	8005162 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6291      	str	r1, [r2, #40]	; 0x28
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	6852      	ldr	r2, [r2, #4]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e00c      	b.n	8005162 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	1c59      	adds	r1, r3, #1
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6291      	str	r1, [r2, #40]	; 0x28
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	6852      	ldr	r2, [r2, #4]
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29b      	uxth	r3, r3
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	4619      	mov	r1, r3
 8005170:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005172:	2b00      	cmp	r3, #0
 8005174:	d120      	bne.n	80051b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	68d2      	ldr	r2, [r2, #12]
 8005180:	f022 0220 	bic.w	r2, r2, #32
 8005184:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	68d2      	ldr	r2, [r2, #12]
 8005190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005194:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	6952      	ldr	r2, [r2, #20]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fe8f 	bl	8004ed2 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e002      	b.n	80051be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	6912      	ldr	r2, [r2, #16]
 80051de:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800520e:	f023 030c 	bic.w	r3, r3, #12
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	430b      	orrs	r3, r1
 8005216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	6952      	ldr	r2, [r2, #20]
 8005222:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6992      	ldr	r2, [r2, #24]
 800522a:	430a      	orrs	r2, r1
 800522c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a6f      	ldr	r2, [pc, #444]	; (80053f0 <UART_SetConfig+0x228>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d16b      	bne.n	8005310 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681c      	ldr	r4, [r3, #0]
 800523c:	f7fe fc22 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8005240:	4602      	mov	r2, r0
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009a      	lsls	r2, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	fbb2 f3f3 	udiv	r3, r2, r3
 8005256:	4a67      	ldr	r2, [pc, #412]	; (80053f4 <UART_SetConfig+0x22c>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	011d      	lsls	r5, r3, #4
 8005260:	f7fe fc10 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8005264:	4602      	mov	r2, r0
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009a      	lsls	r2, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	fbb2 f6f3 	udiv	r6, r2, r3
 800527a:	f7fe fc03 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 800527e:	4602      	mov	r2, r0
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009a      	lsls	r2, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	4a57      	ldr	r2, [pc, #348]	; (80053f4 <UART_SetConfig+0x22c>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2264      	movs	r2, #100	; 0x64
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	1af3      	subs	r3, r6, r3
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	3332      	adds	r3, #50	; 0x32
 80052a8:	4a52      	ldr	r2, [pc, #328]	; (80053f4 <UART_SetConfig+0x22c>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052b4:	441d      	add	r5, r3
 80052b6:	f7fe fbe5 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009a      	lsls	r2, r3, #2
 80052c4:	441a      	add	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80052d0:	f7fe fbd8 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009a      	lsls	r2, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	4a42      	ldr	r2, [pc, #264]	; (80053f4 <UART_SetConfig+0x22c>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	2264      	movs	r2, #100	; 0x64
 80052f4:	fb02 f303 	mul.w	r3, r2, r3
 80052f8:	1af3      	subs	r3, r6, r3
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	3332      	adds	r3, #50	; 0x32
 80052fe:	4a3d      	ldr	r2, [pc, #244]	; (80053f4 <UART_SetConfig+0x22c>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	442b      	add	r3, r5
 800530c:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800530e:	e06a      	b.n	80053e6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681c      	ldr	r4, [r3, #0]
 8005314:	f7fe fba2 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005318:	4602      	mov	r2, r0
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009a      	lsls	r2, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	4a31      	ldr	r2, [pc, #196]	; (80053f4 <UART_SetConfig+0x22c>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	011d      	lsls	r5, r3, #4
 8005338:	f7fe fb90 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 800533c:	4602      	mov	r2, r0
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009a      	lsls	r2, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005352:	f7fe fb83 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005356:	4602      	mov	r2, r0
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009a      	lsls	r2, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	4a21      	ldr	r2, [pc, #132]	; (80053f4 <UART_SetConfig+0x22c>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	2264      	movs	r2, #100	; 0x64
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	1af3      	subs	r3, r6, r3
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	3332      	adds	r3, #50	; 0x32
 8005380:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <UART_SetConfig+0x22c>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538c:	441d      	add	r5, r3
 800538e:	f7fe fb65 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005392:	4602      	mov	r2, r0
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009a      	lsls	r2, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80053a8:	f7fe fb58 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009a      	lsls	r2, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <UART_SetConfig+0x22c>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	2264      	movs	r2, #100	; 0x64
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	1af3      	subs	r3, r6, r3
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	3332      	adds	r3, #50	; 0x32
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <UART_SetConfig+0x22c>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	442b      	add	r3, r5
 80053e4:	60a3      	str	r3, [r4, #8]
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40013800 	.word	0x40013800
 80053f4:	51eb851f 	.word	0x51eb851f

080053f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80053f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80053fa:	e003      	b.n	8005404 <LoopCopyDataInit>

080053fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80053fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005400:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005402:	3104      	adds	r1, #4

08005404 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005404:	480a      	ldr	r0, [pc, #40]	; (8005430 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005408:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800540a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800540c:	d3f6      	bcc.n	80053fc <CopyDataInit>
  ldr r2, =_sbss
 800540e:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005410:	e002      	b.n	8005418 <LoopFillZerobss>

08005412 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005412:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005414:	f842 3b04 	str.w	r3, [r2], #4

08005418 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800541a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800541c:	d3f9      	bcc.n	8005412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800541e:	f7fd fb8f 	bl	8002b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005422:	f000 f815 	bl	8005450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005426:	f7fd f83b 	bl	80024a0 <main>
  bx lr
 800542a:	4770      	bx	lr
  ldr r3, =_sidata
 800542c:	08008bd0 	.word	0x08008bd0
  ldr r0, =_sdata
 8005430:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005434:	20000680 	.word	0x20000680
  ldr r2, =_sbss
 8005438:	20000680 	.word	0x20000680
  ldr r3, = _ebss
 800543c:	200007c0 	.word	0x200007c0

08005440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005440:	e7fe      	b.n	8005440 <ADC1_2_IRQHandler>
	...

08005444 <__errno>:
 8005444:	4b01      	ldr	r3, [pc, #4]	; (800544c <__errno+0x8>)
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000010 	.word	0x20000010

08005450 <__libc_init_array>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	2500      	movs	r5, #0
 8005454:	4e0c      	ldr	r6, [pc, #48]	; (8005488 <__libc_init_array+0x38>)
 8005456:	4c0d      	ldr	r4, [pc, #52]	; (800548c <__libc_init_array+0x3c>)
 8005458:	1ba4      	subs	r4, r4, r6
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	42a5      	cmp	r5, r4
 800545e:	d109      	bne.n	8005474 <__libc_init_array+0x24>
 8005460:	f002 ff62 	bl	8008328 <_init>
 8005464:	2500      	movs	r5, #0
 8005466:	4e0a      	ldr	r6, [pc, #40]	; (8005490 <__libc_init_array+0x40>)
 8005468:	4c0a      	ldr	r4, [pc, #40]	; (8005494 <__libc_init_array+0x44>)
 800546a:	1ba4      	subs	r4, r4, r6
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	42a5      	cmp	r5, r4
 8005470:	d105      	bne.n	800547e <__libc_init_array+0x2e>
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005478:	4798      	blx	r3
 800547a:	3501      	adds	r5, #1
 800547c:	e7ee      	b.n	800545c <__libc_init_array+0xc>
 800547e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005482:	4798      	blx	r3
 8005484:	3501      	adds	r5, #1
 8005486:	e7f2      	b.n	800546e <__libc_init_array+0x1e>
 8005488:	08008bc8 	.word	0x08008bc8
 800548c:	08008bc8 	.word	0x08008bc8
 8005490:	08008bc8 	.word	0x08008bc8
 8005494:	08008bcc 	.word	0x08008bcc

08005498 <memcpy>:
 8005498:	b510      	push	{r4, lr}
 800549a:	1e43      	subs	r3, r0, #1
 800549c:	440a      	add	r2, r1
 800549e:	4291      	cmp	r1, r2
 80054a0:	d100      	bne.n	80054a4 <memcpy+0xc>
 80054a2:	bd10      	pop	{r4, pc}
 80054a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ac:	e7f7      	b.n	800549e <memcpy+0x6>

080054ae <memset>:
 80054ae:	4603      	mov	r3, r0
 80054b0:	4402      	add	r2, r0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d100      	bne.n	80054b8 <memset+0xa>
 80054b6:	4770      	bx	lr
 80054b8:	f803 1b01 	strb.w	r1, [r3], #1
 80054bc:	e7f9      	b.n	80054b2 <memset+0x4>
	...

080054c0 <sprintf>:
 80054c0:	b40e      	push	{r1, r2, r3}
 80054c2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80054c6:	b500      	push	{lr}
 80054c8:	b09c      	sub	sp, #112	; 0x70
 80054ca:	f8ad 1014 	strh.w	r1, [sp, #20]
 80054ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d2:	9104      	str	r1, [sp, #16]
 80054d4:	9107      	str	r1, [sp, #28]
 80054d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054da:	ab1d      	add	r3, sp, #116	; 0x74
 80054dc:	9002      	str	r0, [sp, #8]
 80054de:	9006      	str	r0, [sp, #24]
 80054e0:	4808      	ldr	r0, [pc, #32]	; (8005504 <sprintf+0x44>)
 80054e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	a902      	add	r1, sp, #8
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	f000 f80a 	bl	8005508 <_svfprintf_r>
 80054f4:	2200      	movs	r2, #0
 80054f6:	9b02      	ldr	r3, [sp, #8]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	b01c      	add	sp, #112	; 0x70
 80054fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005500:	b003      	add	sp, #12
 8005502:	4770      	bx	lr
 8005504:	20000010 	.word	0x20000010

08005508 <_svfprintf_r>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	b0bf      	sub	sp, #252	; 0xfc
 800550e:	4689      	mov	r9, r1
 8005510:	4615      	mov	r5, r2
 8005512:	461f      	mov	r7, r3
 8005514:	4682      	mov	sl, r0
 8005516:	f001 fe27 	bl	8007168 <_localeconv_r>
 800551a:	6803      	ldr	r3, [r0, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	9311      	str	r3, [sp, #68]	; 0x44
 8005520:	f7fa fe16 	bl	8000150 <strlen>
 8005524:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005528:	900a      	str	r0, [sp, #40]	; 0x28
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	d518      	bpl.n	8005560 <_svfprintf_r+0x58>
 800552e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005532:	b9ab      	cbnz	r3, 8005560 <_svfprintf_r+0x58>
 8005534:	2140      	movs	r1, #64	; 0x40
 8005536:	4650      	mov	r0, sl
 8005538:	f001 fe2c 	bl	8007194 <_malloc_r>
 800553c:	f8c9 0000 	str.w	r0, [r9]
 8005540:	f8c9 0010 	str.w	r0, [r9, #16]
 8005544:	b948      	cbnz	r0, 800555a <_svfprintf_r+0x52>
 8005546:	230c      	movs	r3, #12
 8005548:	f8ca 3000 	str.w	r3, [sl]
 800554c:	f04f 33ff 	mov.w	r3, #4294967295
 8005550:	930b      	str	r3, [sp, #44]	; 0x2c
 8005552:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005554:	b03f      	add	sp, #252	; 0xfc
 8005556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555a:	2340      	movs	r3, #64	; 0x40
 800555c:	f8c9 3014 	str.w	r3, [r9, #20]
 8005560:	2300      	movs	r3, #0
 8005562:	ac2e      	add	r4, sp, #184	; 0xb8
 8005564:	9421      	str	r4, [sp, #132]	; 0x84
 8005566:	9323      	str	r3, [sp, #140]	; 0x8c
 8005568:	9322      	str	r3, [sp, #136]	; 0x88
 800556a:	9509      	str	r5, [sp, #36]	; 0x24
 800556c:	9307      	str	r3, [sp, #28]
 800556e:	930d      	str	r3, [sp, #52]	; 0x34
 8005570:	930e      	str	r3, [sp, #56]	; 0x38
 8005572:	9315      	str	r3, [sp, #84]	; 0x54
 8005574:	9314      	str	r3, [sp, #80]	; 0x50
 8005576:	930b      	str	r3, [sp, #44]	; 0x2c
 8005578:	9312      	str	r3, [sp, #72]	; 0x48
 800557a:	9313      	str	r3, [sp, #76]	; 0x4c
 800557c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800557e:	462b      	mov	r3, r5
 8005580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005584:	b112      	cbz	r2, 800558c <_svfprintf_r+0x84>
 8005586:	2a25      	cmp	r2, #37	; 0x25
 8005588:	f040 8083 	bne.w	8005692 <_svfprintf_r+0x18a>
 800558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558e:	1aee      	subs	r6, r5, r3
 8005590:	d00d      	beq.n	80055ae <_svfprintf_r+0xa6>
 8005592:	e884 0048 	stmia.w	r4, {r3, r6}
 8005596:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005598:	4433      	add	r3, r6
 800559a:	9323      	str	r3, [sp, #140]	; 0x8c
 800559c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559e:	3301      	adds	r3, #1
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	9322      	str	r3, [sp, #136]	; 0x88
 80055a4:	dc77      	bgt.n	8005696 <_svfprintf_r+0x18e>
 80055a6:	3408      	adds	r4, #8
 80055a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055aa:	4433      	add	r3, r6
 80055ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ae:	782b      	ldrb	r3, [r5, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8725 	beq.w	8006400 <_svfprintf_r+0xef8>
 80055b6:	2300      	movs	r3, #0
 80055b8:	1c69      	adds	r1, r5, #1
 80055ba:	461a      	mov	r2, r3
 80055bc:	f04f 3bff 	mov.w	fp, #4294967295
 80055c0:	461d      	mov	r5, r3
 80055c2:	200a      	movs	r0, #10
 80055c4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80055c8:	930c      	str	r3, [sp, #48]	; 0x30
 80055ca:	1c4e      	adds	r6, r1, #1
 80055cc:	7809      	ldrb	r1, [r1, #0]
 80055ce:	9609      	str	r6, [sp, #36]	; 0x24
 80055d0:	9106      	str	r1, [sp, #24]
 80055d2:	9906      	ldr	r1, [sp, #24]
 80055d4:	3920      	subs	r1, #32
 80055d6:	2958      	cmp	r1, #88	; 0x58
 80055d8:	f200 8414 	bhi.w	8005e04 <_svfprintf_r+0x8fc>
 80055dc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80055e0:	041200a5 	.word	0x041200a5
 80055e4:	00aa0412 	.word	0x00aa0412
 80055e8:	04120412 	.word	0x04120412
 80055ec:	04120412 	.word	0x04120412
 80055f0:	04120412 	.word	0x04120412
 80055f4:	006500ad 	.word	0x006500ad
 80055f8:	00b50412 	.word	0x00b50412
 80055fc:	041200b8 	.word	0x041200b8
 8005600:	00d800d5 	.word	0x00d800d5
 8005604:	00d800d8 	.word	0x00d800d8
 8005608:	00d800d8 	.word	0x00d800d8
 800560c:	00d800d8 	.word	0x00d800d8
 8005610:	00d800d8 	.word	0x00d800d8
 8005614:	04120412 	.word	0x04120412
 8005618:	04120412 	.word	0x04120412
 800561c:	04120412 	.word	0x04120412
 8005620:	04120412 	.word	0x04120412
 8005624:	04120412 	.word	0x04120412
 8005628:	0122010c 	.word	0x0122010c
 800562c:	01220412 	.word	0x01220412
 8005630:	04120412 	.word	0x04120412
 8005634:	04120412 	.word	0x04120412
 8005638:	041200eb 	.word	0x041200eb
 800563c:	033c0412 	.word	0x033c0412
 8005640:	04120412 	.word	0x04120412
 8005644:	04120412 	.word	0x04120412
 8005648:	03a40412 	.word	0x03a40412
 800564c:	04120412 	.word	0x04120412
 8005650:	04120085 	.word	0x04120085
 8005654:	04120412 	.word	0x04120412
 8005658:	04120412 	.word	0x04120412
 800565c:	04120412 	.word	0x04120412
 8005660:	04120412 	.word	0x04120412
 8005664:	00fe0412 	.word	0x00fe0412
 8005668:	0122006b 	.word	0x0122006b
 800566c:	01220122 	.word	0x01220122
 8005670:	006b00ee 	.word	0x006b00ee
 8005674:	04120412 	.word	0x04120412
 8005678:	041200f1 	.word	0x041200f1
 800567c:	033e031e 	.word	0x033e031e
 8005680:	00f80372 	.word	0x00f80372
 8005684:	03830412 	.word	0x03830412
 8005688:	03a60412 	.word	0x03a60412
 800568c:	04120412 	.word	0x04120412
 8005690:	03be      	.short	0x03be
 8005692:	461d      	mov	r5, r3
 8005694:	e773      	b.n	800557e <_svfprintf_r+0x76>
 8005696:	aa21      	add	r2, sp, #132	; 0x84
 8005698:	4649      	mov	r1, r9
 800569a:	4650      	mov	r0, sl
 800569c:	f002 fa82 	bl	8007ba4 <__ssprint_r>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f040 868e 	bne.w	80063c2 <_svfprintf_r+0xeba>
 80056a6:	ac2e      	add	r4, sp, #184	; 0xb8
 80056a8:	e77e      	b.n	80055a8 <_svfprintf_r+0xa0>
 80056aa:	2301      	movs	r3, #1
 80056ac:	222b      	movs	r2, #43	; 0x2b
 80056ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056b0:	e78b      	b.n	80055ca <_svfprintf_r+0xc2>
 80056b2:	460f      	mov	r7, r1
 80056b4:	e7fb      	b.n	80056ae <_svfprintf_r+0x1a6>
 80056b6:	b10b      	cbz	r3, 80056bc <_svfprintf_r+0x1b4>
 80056b8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80056bc:	06ae      	lsls	r6, r5, #26
 80056be:	f140 80a1 	bpl.w	8005804 <_svfprintf_r+0x2fc>
 80056c2:	3707      	adds	r7, #7
 80056c4:	f027 0707 	bic.w	r7, r7, #7
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	9308      	str	r3, [sp, #32]
 80056ce:	e9d7 6700 	ldrd	r6, r7, [r7]
 80056d2:	2e00      	cmp	r6, #0
 80056d4:	f177 0300 	sbcs.w	r3, r7, #0
 80056d8:	da05      	bge.n	80056e6 <_svfprintf_r+0x1de>
 80056da:	232d      	movs	r3, #45	; 0x2d
 80056dc:	4276      	negs	r6, r6
 80056de:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80056e2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80056e6:	2301      	movs	r3, #1
 80056e8:	e2c7      	b.n	8005c7a <_svfprintf_r+0x772>
 80056ea:	b10b      	cbz	r3, 80056f0 <_svfprintf_r+0x1e8>
 80056ec:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80056f0:	4ba0      	ldr	r3, [pc, #640]	; (8005974 <_svfprintf_r+0x46c>)
 80056f2:	9315      	str	r3, [sp, #84]	; 0x54
 80056f4:	06ab      	lsls	r3, r5, #26
 80056f6:	f140 8336 	bpl.w	8005d66 <_svfprintf_r+0x85e>
 80056fa:	3707      	adds	r7, #7
 80056fc:	f027 0707 	bic.w	r7, r7, #7
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	9308      	str	r3, [sp, #32]
 8005706:	e9d7 6700 	ldrd	r6, r7, [r7]
 800570a:	07e8      	lsls	r0, r5, #31
 800570c:	d50b      	bpl.n	8005726 <_svfprintf_r+0x21e>
 800570e:	ea56 0307 	orrs.w	r3, r6, r7
 8005712:	d008      	beq.n	8005726 <_svfprintf_r+0x21e>
 8005714:	2330      	movs	r3, #48	; 0x30
 8005716:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800571a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800571e:	f045 0502 	orr.w	r5, r5, #2
 8005722:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8005726:	2302      	movs	r3, #2
 8005728:	e2a4      	b.n	8005c74 <_svfprintf_r+0x76c>
 800572a:	2a00      	cmp	r2, #0
 800572c:	d1bf      	bne.n	80056ae <_svfprintf_r+0x1a6>
 800572e:	2301      	movs	r3, #1
 8005730:	2220      	movs	r2, #32
 8005732:	e7bc      	b.n	80056ae <_svfprintf_r+0x1a6>
 8005734:	f045 0501 	orr.w	r5, r5, #1
 8005738:	e7b9      	b.n	80056ae <_svfprintf_r+0x1a6>
 800573a:	683e      	ldr	r6, [r7, #0]
 800573c:	1d39      	adds	r1, r7, #4
 800573e:	2e00      	cmp	r6, #0
 8005740:	960c      	str	r6, [sp, #48]	; 0x30
 8005742:	dab6      	bge.n	80056b2 <_svfprintf_r+0x1aa>
 8005744:	460f      	mov	r7, r1
 8005746:	4276      	negs	r6, r6
 8005748:	960c      	str	r6, [sp, #48]	; 0x30
 800574a:	f045 0504 	orr.w	r5, r5, #4
 800574e:	e7ae      	b.n	80056ae <_svfprintf_r+0x1a6>
 8005750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005752:	1c4e      	adds	r6, r1, #1
 8005754:	7809      	ldrb	r1, [r1, #0]
 8005756:	292a      	cmp	r1, #42	; 0x2a
 8005758:	9106      	str	r1, [sp, #24]
 800575a:	d010      	beq.n	800577e <_svfprintf_r+0x276>
 800575c:	f04f 0b00 	mov.w	fp, #0
 8005760:	9609      	str	r6, [sp, #36]	; 0x24
 8005762:	9906      	ldr	r1, [sp, #24]
 8005764:	3930      	subs	r1, #48	; 0x30
 8005766:	2909      	cmp	r1, #9
 8005768:	f63f af33 	bhi.w	80055d2 <_svfprintf_r+0xca>
 800576c:	fb00 1b0b 	mla	fp, r0, fp, r1
 8005770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005772:	460e      	mov	r6, r1
 8005774:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005778:	9106      	str	r1, [sp, #24]
 800577a:	9609      	str	r6, [sp, #36]	; 0x24
 800577c:	e7f1      	b.n	8005762 <_svfprintf_r+0x25a>
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	9609      	str	r6, [sp, #36]	; 0x24
 8005782:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8005786:	3704      	adds	r7, #4
 8005788:	e791      	b.n	80056ae <_svfprintf_r+0x1a6>
 800578a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800578e:	e78e      	b.n	80056ae <_svfprintf_r+0x1a6>
 8005790:	2100      	movs	r1, #0
 8005792:	910c      	str	r1, [sp, #48]	; 0x30
 8005794:	9906      	ldr	r1, [sp, #24]
 8005796:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005798:	3930      	subs	r1, #48	; 0x30
 800579a:	fb00 1106 	mla	r1, r0, r6, r1
 800579e:	910c      	str	r1, [sp, #48]	; 0x30
 80057a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057a2:	460e      	mov	r6, r1
 80057a4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80057a8:	9106      	str	r1, [sp, #24]
 80057aa:	9906      	ldr	r1, [sp, #24]
 80057ac:	9609      	str	r6, [sp, #36]	; 0x24
 80057ae:	3930      	subs	r1, #48	; 0x30
 80057b0:	2909      	cmp	r1, #9
 80057b2:	d9ef      	bls.n	8005794 <_svfprintf_r+0x28c>
 80057b4:	e70d      	b.n	80055d2 <_svfprintf_r+0xca>
 80057b6:	f045 0508 	orr.w	r5, r5, #8
 80057ba:	e778      	b.n	80056ae <_svfprintf_r+0x1a6>
 80057bc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80057c0:	e775      	b.n	80056ae <_svfprintf_r+0x1a6>
 80057c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057c4:	7809      	ldrb	r1, [r1, #0]
 80057c6:	296c      	cmp	r1, #108	; 0x6c
 80057c8:	d105      	bne.n	80057d6 <_svfprintf_r+0x2ce>
 80057ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057cc:	3101      	adds	r1, #1
 80057ce:	9109      	str	r1, [sp, #36]	; 0x24
 80057d0:	f045 0520 	orr.w	r5, r5, #32
 80057d4:	e76b      	b.n	80056ae <_svfprintf_r+0x1a6>
 80057d6:	f045 0510 	orr.w	r5, r5, #16
 80057da:	e768      	b.n	80056ae <_svfprintf_r+0x1a6>
 80057dc:	2600      	movs	r6, #0
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	9308      	str	r3, [sp, #32]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80057e8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80057ec:	f04f 0b01 	mov.w	fp, #1
 80057f0:	4637      	mov	r7, r6
 80057f2:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 80057f6:	e11c      	b.n	8005a32 <_svfprintf_r+0x52a>
 80057f8:	b10b      	cbz	r3, 80057fe <_svfprintf_r+0x2f6>
 80057fa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80057fe:	f045 0510 	orr.w	r5, r5, #16
 8005802:	e75b      	b.n	80056bc <_svfprintf_r+0x1b4>
 8005804:	f015 0f10 	tst.w	r5, #16
 8005808:	f107 0304 	add.w	r3, r7, #4
 800580c:	d003      	beq.n	8005816 <_svfprintf_r+0x30e>
 800580e:	683e      	ldr	r6, [r7, #0]
 8005810:	9308      	str	r3, [sp, #32]
 8005812:	17f7      	asrs	r7, r6, #31
 8005814:	e75d      	b.n	80056d2 <_svfprintf_r+0x1ca>
 8005816:	683e      	ldr	r6, [r7, #0]
 8005818:	f015 0f40 	tst.w	r5, #64	; 0x40
 800581c:	9308      	str	r3, [sp, #32]
 800581e:	bf18      	it	ne
 8005820:	b236      	sxthne	r6, r6
 8005822:	e7f6      	b.n	8005812 <_svfprintf_r+0x30a>
 8005824:	b10b      	cbz	r3, 800582a <_svfprintf_r+0x322>
 8005826:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800582a:	3707      	adds	r7, #7
 800582c:	f027 0707 	bic.w	r7, r7, #7
 8005830:	f107 0308 	add.w	r3, r7, #8
 8005834:	9308      	str	r3, [sp, #32]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	930d      	str	r3, [sp, #52]	; 0x34
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005842:	930e      	str	r3, [sp, #56]	; 0x38
 8005844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005846:	4638      	mov	r0, r7
 8005848:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800584c:	4631      	mov	r1, r6
 800584e:	4b4a      	ldr	r3, [pc, #296]	; (8005978 <_svfprintf_r+0x470>)
 8005850:	f7fb f8d8 	bl	8000a04 <__aeabi_dcmpun>
 8005854:	2800      	cmp	r0, #0
 8005856:	f040 85dc 	bne.w	8006412 <_svfprintf_r+0xf0a>
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	4b46      	ldr	r3, [pc, #280]	; (8005978 <_svfprintf_r+0x470>)
 8005860:	4638      	mov	r0, r7
 8005862:	4631      	mov	r1, r6
 8005864:	f7fb f8b0 	bl	80009c8 <__aeabi_dcmple>
 8005868:	2800      	cmp	r0, #0
 800586a:	f040 85d2 	bne.w	8006412 <_svfprintf_r+0xf0a>
 800586e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005872:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005874:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005876:	f7fb f89d 	bl	80009b4 <__aeabi_dcmplt>
 800587a:	b110      	cbz	r0, 8005882 <_svfprintf_r+0x37a>
 800587c:	232d      	movs	r3, #45	; 0x2d
 800587e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005882:	4b3e      	ldr	r3, [pc, #248]	; (800597c <_svfprintf_r+0x474>)
 8005884:	4a3e      	ldr	r2, [pc, #248]	; (8005980 <_svfprintf_r+0x478>)
 8005886:	9906      	ldr	r1, [sp, #24]
 8005888:	f04f 0b03 	mov.w	fp, #3
 800588c:	2947      	cmp	r1, #71	; 0x47
 800588e:	bfcc      	ite	gt
 8005890:	4690      	movgt	r8, r2
 8005892:	4698      	movle	r8, r3
 8005894:	2600      	movs	r6, #0
 8005896:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800589a:	4637      	mov	r7, r6
 800589c:	e0c9      	b.n	8005a32 <_svfprintf_r+0x52a>
 800589e:	f1bb 3fff 	cmp.w	fp, #4294967295
 80058a2:	d026      	beq.n	80058f2 <_svfprintf_r+0x3ea>
 80058a4:	9b06      	ldr	r3, [sp, #24]
 80058a6:	f023 0320 	bic.w	r3, r3, #32
 80058aa:	2b47      	cmp	r3, #71	; 0x47
 80058ac:	d104      	bne.n	80058b8 <_svfprintf_r+0x3b0>
 80058ae:	f1bb 0f00 	cmp.w	fp, #0
 80058b2:	bf08      	it	eq
 80058b4:	f04f 0b01 	moveq.w	fp, #1
 80058b8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80058bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80058be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c0:	1e1f      	subs	r7, r3, #0
 80058c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c4:	bfa8      	it	ge
 80058c6:	9710      	strge	r7, [sp, #64]	; 0x40
 80058c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80058ca:	bfbd      	ittte	lt
 80058cc:	463b      	movlt	r3, r7
 80058ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80058d2:	9310      	strlt	r3, [sp, #64]	; 0x40
 80058d4:	2300      	movge	r3, #0
 80058d6:	bfb8      	it	lt
 80058d8:	232d      	movlt	r3, #45	; 0x2d
 80058da:	9316      	str	r3, [sp, #88]	; 0x58
 80058dc:	9b06      	ldr	r3, [sp, #24]
 80058de:	f023 0720 	bic.w	r7, r3, #32
 80058e2:	2f46      	cmp	r7, #70	; 0x46
 80058e4:	d008      	beq.n	80058f8 <_svfprintf_r+0x3f0>
 80058e6:	2f45      	cmp	r7, #69	; 0x45
 80058e8:	d142      	bne.n	8005970 <_svfprintf_r+0x468>
 80058ea:	f10b 0601 	add.w	r6, fp, #1
 80058ee:	2302      	movs	r3, #2
 80058f0:	e004      	b.n	80058fc <_svfprintf_r+0x3f4>
 80058f2:	f04f 0b06 	mov.w	fp, #6
 80058f6:	e7df      	b.n	80058b8 <_svfprintf_r+0x3b0>
 80058f8:	465e      	mov	r6, fp
 80058fa:	2303      	movs	r3, #3
 80058fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80058fe:	9204      	str	r2, [sp, #16]
 8005900:	aa1c      	add	r2, sp, #112	; 0x70
 8005902:	9203      	str	r2, [sp, #12]
 8005904:	aa1b      	add	r2, sp, #108	; 0x6c
 8005906:	9202      	str	r2, [sp, #8]
 8005908:	e88d 0048 	stmia.w	sp, {r3, r6}
 800590c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800590e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005910:	4650      	mov	r0, sl
 8005912:	f000 fe55 	bl	80065c0 <_dtoa_r>
 8005916:	2f47      	cmp	r7, #71	; 0x47
 8005918:	4680      	mov	r8, r0
 800591a:	d102      	bne.n	8005922 <_svfprintf_r+0x41a>
 800591c:	07e8      	lsls	r0, r5, #31
 800591e:	f140 8585 	bpl.w	800642c <_svfprintf_r+0xf24>
 8005922:	eb08 0306 	add.w	r3, r8, r6
 8005926:	2f46      	cmp	r7, #70	; 0x46
 8005928:	9307      	str	r3, [sp, #28]
 800592a:	d111      	bne.n	8005950 <_svfprintf_r+0x448>
 800592c:	f898 3000 	ldrb.w	r3, [r8]
 8005930:	2b30      	cmp	r3, #48	; 0x30
 8005932:	d109      	bne.n	8005948 <_svfprintf_r+0x440>
 8005934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005938:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800593a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800593c:	f7fb f830 	bl	80009a0 <__aeabi_dcmpeq>
 8005940:	b910      	cbnz	r0, 8005948 <_svfprintf_r+0x440>
 8005942:	f1c6 0601 	rsb	r6, r6, #1
 8005946:	961b      	str	r6, [sp, #108]	; 0x6c
 8005948:	9a07      	ldr	r2, [sp, #28]
 800594a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800594c:	441a      	add	r2, r3
 800594e:	9207      	str	r2, [sp, #28]
 8005950:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005954:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005956:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005958:	f7fb f822 	bl	80009a0 <__aeabi_dcmpeq>
 800595c:	b990      	cbnz	r0, 8005984 <_svfprintf_r+0x47c>
 800595e:	2230      	movs	r2, #48	; 0x30
 8005960:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005962:	9907      	ldr	r1, [sp, #28]
 8005964:	4299      	cmp	r1, r3
 8005966:	d90f      	bls.n	8005988 <_svfprintf_r+0x480>
 8005968:	1c59      	adds	r1, r3, #1
 800596a:	911f      	str	r1, [sp, #124]	; 0x7c
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e7f7      	b.n	8005960 <_svfprintf_r+0x458>
 8005970:	465e      	mov	r6, fp
 8005972:	e7bc      	b.n	80058ee <_svfprintf_r+0x3e6>
 8005974:	08008648 	.word	0x08008648
 8005978:	7fefffff 	.word	0x7fefffff
 800597c:	08008638 	.word	0x08008638
 8005980:	0800863c 	.word	0x0800863c
 8005984:	9b07      	ldr	r3, [sp, #28]
 8005986:	931f      	str	r3, [sp, #124]	; 0x7c
 8005988:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800598a:	2f47      	cmp	r7, #71	; 0x47
 800598c:	eba3 0308 	sub.w	r3, r3, r8
 8005990:	9307      	str	r3, [sp, #28]
 8005992:	f040 8100 	bne.w	8005b96 <_svfprintf_r+0x68e>
 8005996:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005998:	1cd9      	adds	r1, r3, #3
 800599a:	db02      	blt.n	80059a2 <_svfprintf_r+0x49a>
 800599c:	459b      	cmp	fp, r3
 800599e:	f280 8126 	bge.w	8005bee <_svfprintf_r+0x6e6>
 80059a2:	9b06      	ldr	r3, [sp, #24]
 80059a4:	3b02      	subs	r3, #2
 80059a6:	9306      	str	r3, [sp, #24]
 80059a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80059aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80059ae:	1e53      	subs	r3, r2, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bfa8      	it	ge
 80059b4:	222b      	movge	r2, #43	; 0x2b
 80059b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80059b8:	bfbc      	itt	lt
 80059ba:	f1c2 0301 	rsblt	r3, r2, #1
 80059be:	222d      	movlt	r2, #45	; 0x2d
 80059c0:	2b09      	cmp	r3, #9
 80059c2:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 80059c6:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80059ca:	f340 8100 	ble.w	8005bce <_svfprintf_r+0x6c6>
 80059ce:	260a      	movs	r6, #10
 80059d0:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80059d4:	fb93 f0f6 	sdiv	r0, r3, r6
 80059d8:	fb06 3310 	mls	r3, r6, r0, r3
 80059dc:	2809      	cmp	r0, #9
 80059de:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80059e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80059e6:	f102 31ff 	add.w	r1, r2, #4294967295
 80059ea:	4603      	mov	r3, r0
 80059ec:	f300 80e8 	bgt.w	8005bc0 <_svfprintf_r+0x6b8>
 80059f0:	3330      	adds	r3, #48	; 0x30
 80059f2:	f801 3c01 	strb.w	r3, [r1, #-1]
 80059f6:	3a02      	subs	r2, #2
 80059f8:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80059fc:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8005a00:	4282      	cmp	r2, r0
 8005a02:	4619      	mov	r1, r3
 8005a04:	f0c0 80de 	bcc.w	8005bc4 <_svfprintf_r+0x6bc>
 8005a08:	9a07      	ldr	r2, [sp, #28]
 8005a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a0c:	1acb      	subs	r3, r1, r3
 8005a0e:	2a01      	cmp	r2, #1
 8005a10:	9314      	str	r3, [sp, #80]	; 0x50
 8005a12:	eb03 0b02 	add.w	fp, r3, r2
 8005a16:	dc02      	bgt.n	8005a1e <_svfprintf_r+0x516>
 8005a18:	f015 0701 	ands.w	r7, r5, #1
 8005a1c:	d002      	beq.n	8005a24 <_svfprintf_r+0x51c>
 8005a1e:	2700      	movs	r7, #0
 8005a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a22:	449b      	add	fp, r3
 8005a24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a26:	b113      	cbz	r3, 8005a2e <_svfprintf_r+0x526>
 8005a28:	232d      	movs	r3, #45	; 0x2d
 8005a2a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005a2e:	2600      	movs	r6, #0
 8005a30:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005a32:	455e      	cmp	r6, fp
 8005a34:	4633      	mov	r3, r6
 8005a36:	bfb8      	it	lt
 8005a38:	465b      	movlt	r3, fp
 8005a3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a3c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005a40:	b113      	cbz	r3, 8005a48 <_svfprintf_r+0x540>
 8005a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a44:	3301      	adds	r3, #1
 8005a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a48:	f015 0302 	ands.w	r3, r5, #2
 8005a4c:	9316      	str	r3, [sp, #88]	; 0x58
 8005a4e:	bf1e      	ittt	ne
 8005a50:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8005a52:	3302      	addne	r3, #2
 8005a54:	930f      	strne	r3, [sp, #60]	; 0x3c
 8005a56:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005a5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a5c:	d118      	bne.n	8005a90 <_svfprintf_r+0x588>
 8005a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	9310      	str	r3, [sp, #64]	; 0x40
 8005a68:	dd12      	ble.n	8005a90 <_svfprintf_r+0x588>
 8005a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	4bab      	ldr	r3, [pc, #684]	; (8005d1c <_svfprintf_r+0x814>)
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	f300 81d9 	bgt.w	8005e28 <_svfprintf_r+0x920>
 8005a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a7a:	6063      	str	r3, [r4, #4]
 8005a7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a7e:	4413      	add	r3, r2
 8005a80:	9323      	str	r3, [sp, #140]	; 0x8c
 8005a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a84:	3301      	adds	r3, #1
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	9322      	str	r3, [sp, #136]	; 0x88
 8005a8a:	f300 81e6 	bgt.w	8005e5a <_svfprintf_r+0x952>
 8005a8e:	3408      	adds	r4, #8
 8005a90:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005a94:	b173      	cbz	r3, 8005ab4 <_svfprintf_r+0x5ac>
 8005a96:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	6063      	str	r3, [r4, #4]
 8005aa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	9323      	str	r3, [sp, #140]	; 0x8c
 8005aa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	2b07      	cmp	r3, #7
 8005aac:	9322      	str	r3, [sp, #136]	; 0x88
 8005aae:	f300 81de 	bgt.w	8005e6e <_svfprintf_r+0x966>
 8005ab2:	3408      	adds	r4, #8
 8005ab4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ab6:	b16b      	cbz	r3, 8005ad4 <_svfprintf_r+0x5cc>
 8005ab8:	ab1a      	add	r3, sp, #104	; 0x68
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	2302      	movs	r3, #2
 8005abe:	6063      	str	r3, [r4, #4]
 8005ac0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ac6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ac8:	3301      	adds	r3, #1
 8005aca:	2b07      	cmp	r3, #7
 8005acc:	9322      	str	r3, [sp, #136]	; 0x88
 8005ace:	f300 81d8 	bgt.w	8005e82 <_svfprintf_r+0x97a>
 8005ad2:	3408      	adds	r4, #8
 8005ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d118      	bne.n	8005b0c <_svfprintf_r+0x604>
 8005ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005adc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ae4:	dd12      	ble.n	8005b0c <_svfprintf_r+0x604>
 8005ae6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	4b8d      	ldr	r3, [pc, #564]	; (8005d20 <_svfprintf_r+0x818>)
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	f300 81d2 	bgt.w	8005e96 <_svfprintf_r+0x98e>
 8005af2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005af6:	6063      	str	r3, [r4, #4]
 8005af8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005afa:	4413      	add	r3, r2
 8005afc:	9323      	str	r3, [sp, #140]	; 0x8c
 8005afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b00:	3301      	adds	r3, #1
 8005b02:	2b07      	cmp	r3, #7
 8005b04:	9322      	str	r3, [sp, #136]	; 0x88
 8005b06:	f300 81df 	bgt.w	8005ec8 <_svfprintf_r+0x9c0>
 8005b0a:	3408      	adds	r4, #8
 8005b0c:	eba6 060b 	sub.w	r6, r6, fp
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	dd0f      	ble.n	8005b34 <_svfprintf_r+0x62c>
 8005b14:	4b82      	ldr	r3, [pc, #520]	; (8005d20 <_svfprintf_r+0x818>)
 8005b16:	2e10      	cmp	r6, #16
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	f300 81df 	bgt.w	8005edc <_svfprintf_r+0x9d4>
 8005b1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b20:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005b22:	3301      	adds	r3, #1
 8005b24:	6066      	str	r6, [r4, #4]
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	4406      	add	r6, r0
 8005b2a:	9623      	str	r6, [sp, #140]	; 0x8c
 8005b2c:	9322      	str	r3, [sp, #136]	; 0x88
 8005b2e:	f300 81ec 	bgt.w	8005f0a <_svfprintf_r+0xa02>
 8005b32:	3408      	adds	r4, #8
 8005b34:	05eb      	lsls	r3, r5, #23
 8005b36:	f100 81f2 	bmi.w	8005f1e <_svfprintf_r+0xa16>
 8005b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b3c:	e884 0900 	stmia.w	r4, {r8, fp}
 8005b40:	445b      	add	r3, fp
 8005b42:	9323      	str	r3, [sp, #140]	; 0x8c
 8005b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b46:	3301      	adds	r3, #1
 8005b48:	2b07      	cmp	r3, #7
 8005b4a:	9322      	str	r3, [sp, #136]	; 0x88
 8005b4c:	f340 8419 	ble.w	8006382 <_svfprintf_r+0xe7a>
 8005b50:	aa21      	add	r2, sp, #132	; 0x84
 8005b52:	4649      	mov	r1, r9
 8005b54:	4650      	mov	r0, sl
 8005b56:	f002 f825 	bl	8007ba4 <__ssprint_r>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f040 8431 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005b60:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b62:	076b      	lsls	r3, r5, #29
 8005b64:	f100 8410 	bmi.w	8006388 <_svfprintf_r+0xe80>
 8005b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b6e:	428a      	cmp	r2, r1
 8005b70:	bfac      	ite	ge
 8005b72:	189b      	addge	r3, r3, r2
 8005b74:	185b      	addlt	r3, r3, r1
 8005b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b7a:	b13b      	cbz	r3, 8005b8c <_svfprintf_r+0x684>
 8005b7c:	aa21      	add	r2, sp, #132	; 0x84
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4650      	mov	r0, sl
 8005b82:	f002 f80f 	bl	8007ba4 <__ssprint_r>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f040 841b 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9f08      	ldr	r7, [sp, #32]
 8005b90:	9322      	str	r3, [sp, #136]	; 0x88
 8005b92:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b94:	e4f2      	b.n	800557c <_svfprintf_r+0x74>
 8005b96:	9b06      	ldr	r3, [sp, #24]
 8005b98:	2b65      	cmp	r3, #101	; 0x65
 8005b9a:	f77f af05 	ble.w	80059a8 <_svfprintf_r+0x4a0>
 8005b9e:	9b06      	ldr	r3, [sp, #24]
 8005ba0:	2b66      	cmp	r3, #102	; 0x66
 8005ba2:	d124      	bne.n	8005bee <_svfprintf_r+0x6e6>
 8005ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	dd19      	ble.n	8005bde <_svfprintf_r+0x6d6>
 8005baa:	f1bb 0f00 	cmp.w	fp, #0
 8005bae:	d101      	bne.n	8005bb4 <_svfprintf_r+0x6ac>
 8005bb0:	07ea      	lsls	r2, r5, #31
 8005bb2:	d502      	bpl.n	8005bba <_svfprintf_r+0x6b2>
 8005bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bb6:	4413      	add	r3, r2
 8005bb8:	445b      	add	r3, fp
 8005bba:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005bbc:	469b      	mov	fp, r3
 8005bbe:	e731      	b.n	8005a24 <_svfprintf_r+0x51c>
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	e707      	b.n	80059d4 <_svfprintf_r+0x4cc>
 8005bc4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bcc:	e718      	b.n	8005a00 <_svfprintf_r+0x4f8>
 8005bce:	2230      	movs	r2, #48	; 0x30
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8005bd6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8005bda:	a91e      	add	r1, sp, #120	; 0x78
 8005bdc:	e714      	b.n	8005a08 <_svfprintf_r+0x500>
 8005bde:	f1bb 0f00 	cmp.w	fp, #0
 8005be2:	d101      	bne.n	8005be8 <_svfprintf_r+0x6e0>
 8005be4:	07eb      	lsls	r3, r5, #31
 8005be6:	d515      	bpl.n	8005c14 <_svfprintf_r+0x70c>
 8005be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bea:	3301      	adds	r3, #1
 8005bec:	e7e4      	b.n	8005bb8 <_svfprintf_r+0x6b0>
 8005bee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005bf0:	9b07      	ldr	r3, [sp, #28]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	db06      	blt.n	8005c04 <_svfprintf_r+0x6fc>
 8005bf6:	07ef      	lsls	r7, r5, #31
 8005bf8:	d50e      	bpl.n	8005c18 <_svfprintf_r+0x710>
 8005bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfc:	4413      	add	r3, r2
 8005bfe:	2267      	movs	r2, #103	; 0x67
 8005c00:	9206      	str	r2, [sp, #24]
 8005c02:	e7da      	b.n	8005bba <_svfprintf_r+0x6b2>
 8005c04:	9b07      	ldr	r3, [sp, #28]
 8005c06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	440b      	add	r3, r1
 8005c0c:	dcf7      	bgt.n	8005bfe <_svfprintf_r+0x6f6>
 8005c0e:	f1c2 0201 	rsb	r2, r2, #1
 8005c12:	e7f3      	b.n	8005bfc <_svfprintf_r+0x6f4>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e7d0      	b.n	8005bba <_svfprintf_r+0x6b2>
 8005c18:	4613      	mov	r3, r2
 8005c1a:	e7f0      	b.n	8005bfe <_svfprintf_r+0x6f6>
 8005c1c:	b10b      	cbz	r3, 8005c22 <_svfprintf_r+0x71a>
 8005c1e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005c22:	f015 0f20 	tst.w	r5, #32
 8005c26:	f107 0304 	add.w	r3, r7, #4
 8005c2a:	d008      	beq.n	8005c3e <_svfprintf_r+0x736>
 8005c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	17ce      	asrs	r6, r1, #31
 8005c32:	4608      	mov	r0, r1
 8005c34:	4631      	mov	r1, r6
 8005c36:	e9c2 0100 	strd	r0, r1, [r2]
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	e49e      	b.n	800557c <_svfprintf_r+0x74>
 8005c3e:	06ee      	lsls	r6, r5, #27
 8005c40:	d503      	bpl.n	8005c4a <_svfprintf_r+0x742>
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c46:	6011      	str	r1, [r2, #0]
 8005c48:	e7f7      	b.n	8005c3a <_svfprintf_r+0x732>
 8005c4a:	0668      	lsls	r0, r5, #25
 8005c4c:	d5f9      	bpl.n	8005c42 <_svfprintf_r+0x73a>
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005c54:	8011      	strh	r1, [r2, #0]
 8005c56:	e7f0      	b.n	8005c3a <_svfprintf_r+0x732>
 8005c58:	f045 0510 	orr.w	r5, r5, #16
 8005c5c:	f015 0320 	ands.w	r3, r5, #32
 8005c60:	d022      	beq.n	8005ca8 <_svfprintf_r+0x7a0>
 8005c62:	3707      	adds	r7, #7
 8005c64:	f027 0707 	bic.w	r7, r7, #7
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	9308      	str	r3, [sp, #32]
 8005c6e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005c72:	2300      	movs	r3, #0
 8005c74:	2200      	movs	r2, #0
 8005c76:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005c7a:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005c7e:	f000 83db 	beq.w	8006438 <_svfprintf_r+0xf30>
 8005c82:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005c86:	920f      	str	r2, [sp, #60]	; 0x3c
 8005c88:	ea56 0207 	orrs.w	r2, r6, r7
 8005c8c:	f040 83d9 	bne.w	8006442 <_svfprintf_r+0xf3a>
 8005c90:	f1bb 0f00 	cmp.w	fp, #0
 8005c94:	f000 80aa 	beq.w	8005dec <_svfprintf_r+0x8e4>
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d076      	beq.n	8005d8a <_svfprintf_r+0x882>
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	f000 8091 	beq.w	8005dc4 <_svfprintf_r+0x8bc>
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	2700      	movs	r7, #0
 8005ca6:	e3d2      	b.n	800644e <_svfprintf_r+0xf46>
 8005ca8:	1d3a      	adds	r2, r7, #4
 8005caa:	f015 0110 	ands.w	r1, r5, #16
 8005cae:	9208      	str	r2, [sp, #32]
 8005cb0:	d002      	beq.n	8005cb8 <_svfprintf_r+0x7b0>
 8005cb2:	683e      	ldr	r6, [r7, #0]
 8005cb4:	2700      	movs	r7, #0
 8005cb6:	e7dd      	b.n	8005c74 <_svfprintf_r+0x76c>
 8005cb8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005cbc:	d0f9      	beq.n	8005cb2 <_svfprintf_r+0x7aa>
 8005cbe:	883e      	ldrh	r6, [r7, #0]
 8005cc0:	2700      	movs	r7, #0
 8005cc2:	e7d6      	b.n	8005c72 <_svfprintf_r+0x76a>
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	9308      	str	r3, [sp, #32]
 8005cc8:	2330      	movs	r3, #48	; 0x30
 8005cca:	2278      	movs	r2, #120	; 0x78
 8005ccc:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <_svfprintf_r+0x81c>)
 8005cd2:	683e      	ldr	r6, [r7, #0]
 8005cd4:	9315      	str	r3, [sp, #84]	; 0x54
 8005cd6:	2700      	movs	r7, #0
 8005cd8:	f045 0502 	orr.w	r5, r5, #2
 8005cdc:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	9206      	str	r2, [sp, #24]
 8005ce4:	e7c6      	b.n	8005c74 <_svfprintf_r+0x76c>
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005cee:	9308      	str	r3, [sp, #32]
 8005cf0:	f8d7 8000 	ldr.w	r8, [r7]
 8005cf4:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005cf8:	d00a      	beq.n	8005d10 <_svfprintf_r+0x808>
 8005cfa:	465a      	mov	r2, fp
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f001 fc54 	bl	80075ac <memchr>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f000 808d 	beq.w	8005e24 <_svfprintf_r+0x91c>
 8005d0a:	eba0 0b08 	sub.w	fp, r0, r8
 8005d0e:	e5c4      	b.n	800589a <_svfprintf_r+0x392>
 8005d10:	4640      	mov	r0, r8
 8005d12:	f7fa fa1d 	bl	8000150 <strlen>
 8005d16:	4683      	mov	fp, r0
 8005d18:	e5bf      	b.n	800589a <_svfprintf_r+0x392>
 8005d1a:	bf00      	nop
 8005d1c:	0800866c 	.word	0x0800866c
 8005d20:	0800867c 	.word	0x0800867c
 8005d24:	08008659 	.word	0x08008659
 8005d28:	f045 0510 	orr.w	r5, r5, #16
 8005d2c:	06a9      	lsls	r1, r5, #26
 8005d2e:	d509      	bpl.n	8005d44 <_svfprintf_r+0x83c>
 8005d30:	3707      	adds	r7, #7
 8005d32:	f027 0707 	bic.w	r7, r7, #7
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	9308      	str	r3, [sp, #32]
 8005d3c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005d40:	2301      	movs	r3, #1
 8005d42:	e797      	b.n	8005c74 <_svfprintf_r+0x76c>
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	f015 0f10 	tst.w	r5, #16
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	d001      	beq.n	8005d52 <_svfprintf_r+0x84a>
 8005d4e:	683e      	ldr	r6, [r7, #0]
 8005d50:	e002      	b.n	8005d58 <_svfprintf_r+0x850>
 8005d52:	066a      	lsls	r2, r5, #25
 8005d54:	d5fb      	bpl.n	8005d4e <_svfprintf_r+0x846>
 8005d56:	883e      	ldrh	r6, [r7, #0]
 8005d58:	2700      	movs	r7, #0
 8005d5a:	e7f1      	b.n	8005d40 <_svfprintf_r+0x838>
 8005d5c:	b10b      	cbz	r3, 8005d62 <_svfprintf_r+0x85a>
 8005d5e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005d62:	4ba3      	ldr	r3, [pc, #652]	; (8005ff0 <_svfprintf_r+0xae8>)
 8005d64:	e4c5      	b.n	80056f2 <_svfprintf_r+0x1ea>
 8005d66:	1d3b      	adds	r3, r7, #4
 8005d68:	f015 0f10 	tst.w	r5, #16
 8005d6c:	9308      	str	r3, [sp, #32]
 8005d6e:	d001      	beq.n	8005d74 <_svfprintf_r+0x86c>
 8005d70:	683e      	ldr	r6, [r7, #0]
 8005d72:	e002      	b.n	8005d7a <_svfprintf_r+0x872>
 8005d74:	066e      	lsls	r6, r5, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_svfprintf_r+0x868>
 8005d78:	883e      	ldrh	r6, [r7, #0]
 8005d7a:	2700      	movs	r7, #0
 8005d7c:	e4c5      	b.n	800570a <_svfprintf_r+0x202>
 8005d7e:	4643      	mov	r3, r8
 8005d80:	e366      	b.n	8006450 <_svfprintf_r+0xf48>
 8005d82:	2f00      	cmp	r7, #0
 8005d84:	bf08      	it	eq
 8005d86:	2e0a      	cmpeq	r6, #10
 8005d88:	d205      	bcs.n	8005d96 <_svfprintf_r+0x88e>
 8005d8a:	3630      	adds	r6, #48	; 0x30
 8005d8c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005d90:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005d94:	e377      	b.n	8006486 <_svfprintf_r+0xf7e>
 8005d96:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	4639      	mov	r1, r7
 8005d9e:	220a      	movs	r2, #10
 8005da0:	2300      	movs	r3, #0
 8005da2:	f7fa fe6d 	bl	8000a80 <__aeabi_uldivmod>
 8005da6:	3230      	adds	r2, #48	; 0x30
 8005da8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005dac:	2300      	movs	r3, #0
 8005dae:	4630      	mov	r0, r6
 8005db0:	4639      	mov	r1, r7
 8005db2:	220a      	movs	r2, #10
 8005db4:	f7fa fe64 	bl	8000a80 <__aeabi_uldivmod>
 8005db8:	4606      	mov	r6, r0
 8005dba:	460f      	mov	r7, r1
 8005dbc:	ea56 0307 	orrs.w	r3, r6, r7
 8005dc0:	d1eb      	bne.n	8005d9a <_svfprintf_r+0x892>
 8005dc2:	e360      	b.n	8006486 <_svfprintf_r+0xf7e>
 8005dc4:	2600      	movs	r6, #0
 8005dc6:	2700      	movs	r7, #0
 8005dc8:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005dcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005dce:	f006 030f 	and.w	r3, r6, #15
 8005dd2:	5cd3      	ldrb	r3, [r2, r3]
 8005dd4:	093a      	lsrs	r2, r7, #4
 8005dd6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005dda:	0933      	lsrs	r3, r6, #4
 8005ddc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005de0:	461e      	mov	r6, r3
 8005de2:	4617      	mov	r7, r2
 8005de4:	ea56 0307 	orrs.w	r3, r6, r7
 8005de8:	d1f0      	bne.n	8005dcc <_svfprintf_r+0x8c4>
 8005dea:	e34c      	b.n	8006486 <_svfprintf_r+0xf7e>
 8005dec:	b93b      	cbnz	r3, 8005dfe <_svfprintf_r+0x8f6>
 8005dee:	07ea      	lsls	r2, r5, #31
 8005df0:	d505      	bpl.n	8005dfe <_svfprintf_r+0x8f6>
 8005df2:	2330      	movs	r3, #48	; 0x30
 8005df4:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005df8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005dfc:	e343      	b.n	8006486 <_svfprintf_r+0xf7e>
 8005dfe:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005e02:	e340      	b.n	8006486 <_svfprintf_r+0xf7e>
 8005e04:	b10b      	cbz	r3, 8005e0a <_svfprintf_r+0x902>
 8005e06:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 82f7 	beq.w	8006400 <_svfprintf_r+0xef8>
 8005e12:	2600      	movs	r6, #0
 8005e14:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005e18:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005e1c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005e20:	9708      	str	r7, [sp, #32]
 8005e22:	e4e3      	b.n	80057ec <_svfprintf_r+0x2e4>
 8005e24:	4606      	mov	r6, r0
 8005e26:	e538      	b.n	800589a <_svfprintf_r+0x392>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e2e:	3310      	adds	r3, #16
 8005e30:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e34:	3301      	adds	r3, #1
 8005e36:	2b07      	cmp	r3, #7
 8005e38:	9322      	str	r3, [sp, #136]	; 0x88
 8005e3a:	dc04      	bgt.n	8005e46 <_svfprintf_r+0x93e>
 8005e3c:	3408      	adds	r4, #8
 8005e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e40:	3b10      	subs	r3, #16
 8005e42:	9310      	str	r3, [sp, #64]	; 0x40
 8005e44:	e611      	b.n	8005a6a <_svfprintf_r+0x562>
 8005e46:	aa21      	add	r2, sp, #132	; 0x84
 8005e48:	4649      	mov	r1, r9
 8005e4a:	4650      	mov	r0, sl
 8005e4c:	f001 feaa 	bl	8007ba4 <__ssprint_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	f040 82b6 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005e56:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e58:	e7f1      	b.n	8005e3e <_svfprintf_r+0x936>
 8005e5a:	aa21      	add	r2, sp, #132	; 0x84
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4650      	mov	r0, sl
 8005e60:	f001 fea0 	bl	8007ba4 <__ssprint_r>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f040 82ac 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005e6a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e6c:	e610      	b.n	8005a90 <_svfprintf_r+0x588>
 8005e6e:	aa21      	add	r2, sp, #132	; 0x84
 8005e70:	4649      	mov	r1, r9
 8005e72:	4650      	mov	r0, sl
 8005e74:	f001 fe96 	bl	8007ba4 <__ssprint_r>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f040 82a2 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005e7e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e80:	e618      	b.n	8005ab4 <_svfprintf_r+0x5ac>
 8005e82:	aa21      	add	r2, sp, #132	; 0x84
 8005e84:	4649      	mov	r1, r9
 8005e86:	4650      	mov	r0, sl
 8005e88:	f001 fe8c 	bl	8007ba4 <__ssprint_r>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	f040 8298 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005e92:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e94:	e61e      	b.n	8005ad4 <_svfprintf_r+0x5cc>
 8005e96:	2310      	movs	r3, #16
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e9c:	3310      	adds	r3, #16
 8005e9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	9322      	str	r3, [sp, #136]	; 0x88
 8005ea8:	dc04      	bgt.n	8005eb4 <_svfprintf_r+0x9ac>
 8005eaa:	3408      	adds	r4, #8
 8005eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005eae:	3b10      	subs	r3, #16
 8005eb0:	9310      	str	r3, [sp, #64]	; 0x40
 8005eb2:	e618      	b.n	8005ae6 <_svfprintf_r+0x5de>
 8005eb4:	aa21      	add	r2, sp, #132	; 0x84
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4650      	mov	r0, sl
 8005eba:	f001 fe73 	bl	8007ba4 <__ssprint_r>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f040 827f 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005ec4:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ec6:	e7f1      	b.n	8005eac <_svfprintf_r+0x9a4>
 8005ec8:	aa21      	add	r2, sp, #132	; 0x84
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4650      	mov	r0, sl
 8005ece:	f001 fe69 	bl	8007ba4 <__ssprint_r>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	f040 8275 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005ed8:	ac2e      	add	r4, sp, #184	; 0xb8
 8005eda:	e617      	b.n	8005b0c <_svfprintf_r+0x604>
 8005edc:	2310      	movs	r3, #16
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ee2:	3310      	adds	r3, #16
 8005ee4:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ee6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ee8:	3301      	adds	r3, #1
 8005eea:	2b07      	cmp	r3, #7
 8005eec:	9322      	str	r3, [sp, #136]	; 0x88
 8005eee:	dc02      	bgt.n	8005ef6 <_svfprintf_r+0x9ee>
 8005ef0:	3408      	adds	r4, #8
 8005ef2:	3e10      	subs	r6, #16
 8005ef4:	e60e      	b.n	8005b14 <_svfprintf_r+0x60c>
 8005ef6:	aa21      	add	r2, sp, #132	; 0x84
 8005ef8:	4649      	mov	r1, r9
 8005efa:	4650      	mov	r0, sl
 8005efc:	f001 fe52 	bl	8007ba4 <__ssprint_r>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f040 825e 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005f06:	ac2e      	add	r4, sp, #184	; 0xb8
 8005f08:	e7f3      	b.n	8005ef2 <_svfprintf_r+0x9ea>
 8005f0a:	aa21      	add	r2, sp, #132	; 0x84
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	4650      	mov	r0, sl
 8005f10:	f001 fe48 	bl	8007ba4 <__ssprint_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	f040 8254 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005f1a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005f1c:	e60a      	b.n	8005b34 <_svfprintf_r+0x62c>
 8005f1e:	9b06      	ldr	r3, [sp, #24]
 8005f20:	2b65      	cmp	r3, #101	; 0x65
 8005f22:	f340 81a9 	ble.w	8006278 <_svfprintf_r+0xd70>
 8005f26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005f2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f2e:	f7fa fd37 	bl	80009a0 <__aeabi_dcmpeq>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d062      	beq.n	8005ffc <_svfprintf_r+0xaf4>
 8005f36:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <_svfprintf_r+0xaec>)
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f40:	3301      	adds	r3, #1
 8005f42:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f46:	3301      	adds	r3, #1
 8005f48:	2b07      	cmp	r3, #7
 8005f4a:	9322      	str	r3, [sp, #136]	; 0x88
 8005f4c:	dc25      	bgt.n	8005f9a <_svfprintf_r+0xa92>
 8005f4e:	3408      	adds	r4, #8
 8005f50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f52:	9a07      	ldr	r2, [sp, #28]
 8005f54:	4293      	cmp	r3, r2
 8005f56:	db02      	blt.n	8005f5e <_svfprintf_r+0xa56>
 8005f58:	07ee      	lsls	r6, r5, #31
 8005f5a:	f57f ae02 	bpl.w	8005b62 <_svfprintf_r+0x65a>
 8005f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f6a:	4413      	add	r3, r2
 8005f6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f70:	3301      	adds	r3, #1
 8005f72:	2b07      	cmp	r3, #7
 8005f74:	9322      	str	r3, [sp, #136]	; 0x88
 8005f76:	dc1a      	bgt.n	8005fae <_svfprintf_r+0xaa6>
 8005f78:	3408      	adds	r4, #8
 8005f7a:	9b07      	ldr	r3, [sp, #28]
 8005f7c:	1e5e      	subs	r6, r3, #1
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	f77f adef 	ble.w	8005b62 <_svfprintf_r+0x65a>
 8005f84:	f04f 0810 	mov.w	r8, #16
 8005f88:	4f1b      	ldr	r7, [pc, #108]	; (8005ff8 <_svfprintf_r+0xaf0>)
 8005f8a:	2e10      	cmp	r6, #16
 8005f8c:	6027      	str	r7, [r4, #0]
 8005f8e:	dc18      	bgt.n	8005fc2 <_svfprintf_r+0xaba>
 8005f90:	6066      	str	r6, [r4, #4]
 8005f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f94:	441e      	add	r6, r3
 8005f96:	9623      	str	r6, [sp, #140]	; 0x8c
 8005f98:	e5d4      	b.n	8005b44 <_svfprintf_r+0x63c>
 8005f9a:	aa21      	add	r2, sp, #132	; 0x84
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	f001 fe00 	bl	8007ba4 <__ssprint_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f040 820c 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005faa:	ac2e      	add	r4, sp, #184	; 0xb8
 8005fac:	e7d0      	b.n	8005f50 <_svfprintf_r+0xa48>
 8005fae:	aa21      	add	r2, sp, #132	; 0x84
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4650      	mov	r0, sl
 8005fb4:	f001 fdf6 	bl	8007ba4 <__ssprint_r>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	f040 8202 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005fbe:	ac2e      	add	r4, sp, #184	; 0xb8
 8005fc0:	e7db      	b.n	8005f7a <_svfprintf_r+0xa72>
 8005fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fc4:	f8c4 8004 	str.w	r8, [r4, #4]
 8005fc8:	3310      	adds	r3, #16
 8005fca:	9323      	str	r3, [sp, #140]	; 0x8c
 8005fcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fce:	3301      	adds	r3, #1
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	9322      	str	r3, [sp, #136]	; 0x88
 8005fd4:	dc02      	bgt.n	8005fdc <_svfprintf_r+0xad4>
 8005fd6:	3408      	adds	r4, #8
 8005fd8:	3e10      	subs	r6, #16
 8005fda:	e7d6      	b.n	8005f8a <_svfprintf_r+0xa82>
 8005fdc:	aa21      	add	r2, sp, #132	; 0x84
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	f001 fddf 	bl	8007ba4 <__ssprint_r>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f040 81eb 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8005fec:	ac2e      	add	r4, sp, #184	; 0xb8
 8005fee:	e7f3      	b.n	8005fd8 <_svfprintf_r+0xad0>
 8005ff0:	08008659 	.word	0x08008659
 8005ff4:	0800866a 	.word	0x0800866a
 8005ff8:	0800867c 	.word	0x0800867c
 8005ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	dc7a      	bgt.n	80060f8 <_svfprintf_r+0xbf0>
 8006002:	4b9b      	ldr	r3, [pc, #620]	; (8006270 <_svfprintf_r+0xd68>)
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	2301      	movs	r3, #1
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800600c:	3301      	adds	r3, #1
 800600e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006012:	3301      	adds	r3, #1
 8006014:	2b07      	cmp	r3, #7
 8006016:	9322      	str	r3, [sp, #136]	; 0x88
 8006018:	dc44      	bgt.n	80060a4 <_svfprintf_r+0xb9c>
 800601a:	3408      	adds	r4, #8
 800601c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800601e:	b923      	cbnz	r3, 800602a <_svfprintf_r+0xb22>
 8006020:	9b07      	ldr	r3, [sp, #28]
 8006022:	b913      	cbnz	r3, 800602a <_svfprintf_r+0xb22>
 8006024:	07e8      	lsls	r0, r5, #31
 8006026:	f57f ad9c 	bpl.w	8005b62 <_svfprintf_r+0x65a>
 800602a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800602c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006032:	6063      	str	r3, [r4, #4]
 8006034:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006036:	4413      	add	r3, r2
 8006038:	9323      	str	r3, [sp, #140]	; 0x8c
 800603a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800603c:	3301      	adds	r3, #1
 800603e:	2b07      	cmp	r3, #7
 8006040:	9322      	str	r3, [sp, #136]	; 0x88
 8006042:	dc39      	bgt.n	80060b8 <_svfprintf_r+0xbb0>
 8006044:	f104 0308 	add.w	r3, r4, #8
 8006048:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800604a:	2e00      	cmp	r6, #0
 800604c:	da19      	bge.n	8006082 <_svfprintf_r+0xb7a>
 800604e:	2410      	movs	r4, #16
 8006050:	4f88      	ldr	r7, [pc, #544]	; (8006274 <_svfprintf_r+0xd6c>)
 8006052:	4276      	negs	r6, r6
 8006054:	2e10      	cmp	r6, #16
 8006056:	601f      	str	r7, [r3, #0]
 8006058:	dc38      	bgt.n	80060cc <_svfprintf_r+0xbc4>
 800605a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800605c:	605e      	str	r6, [r3, #4]
 800605e:	4416      	add	r6, r2
 8006060:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006062:	9623      	str	r6, [sp, #140]	; 0x8c
 8006064:	3201      	adds	r2, #1
 8006066:	2a07      	cmp	r2, #7
 8006068:	f103 0308 	add.w	r3, r3, #8
 800606c:	9222      	str	r2, [sp, #136]	; 0x88
 800606e:	dd08      	ble.n	8006082 <_svfprintf_r+0xb7a>
 8006070:	aa21      	add	r2, sp, #132	; 0x84
 8006072:	4649      	mov	r1, r9
 8006074:	4650      	mov	r0, sl
 8006076:	f001 fd95 	bl	8007ba4 <__ssprint_r>
 800607a:	2800      	cmp	r0, #0
 800607c:	f040 81a1 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8006080:	ab2e      	add	r3, sp, #184	; 0xb8
 8006082:	9a07      	ldr	r2, [sp, #28]
 8006084:	9907      	ldr	r1, [sp, #28]
 8006086:	605a      	str	r2, [r3, #4]
 8006088:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800608a:	f8c3 8000 	str.w	r8, [r3]
 800608e:	440a      	add	r2, r1
 8006090:	9223      	str	r2, [sp, #140]	; 0x8c
 8006092:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006094:	3201      	adds	r2, #1
 8006096:	2a07      	cmp	r2, #7
 8006098:	9222      	str	r2, [sp, #136]	; 0x88
 800609a:	f73f ad59 	bgt.w	8005b50 <_svfprintf_r+0x648>
 800609e:	f103 0408 	add.w	r4, r3, #8
 80060a2:	e55e      	b.n	8005b62 <_svfprintf_r+0x65a>
 80060a4:	aa21      	add	r2, sp, #132	; 0x84
 80060a6:	4649      	mov	r1, r9
 80060a8:	4650      	mov	r0, sl
 80060aa:	f001 fd7b 	bl	8007ba4 <__ssprint_r>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f040 8187 	bne.w	80063c2 <_svfprintf_r+0xeba>
 80060b4:	ac2e      	add	r4, sp, #184	; 0xb8
 80060b6:	e7b1      	b.n	800601c <_svfprintf_r+0xb14>
 80060b8:	aa21      	add	r2, sp, #132	; 0x84
 80060ba:	4649      	mov	r1, r9
 80060bc:	4650      	mov	r0, sl
 80060be:	f001 fd71 	bl	8007ba4 <__ssprint_r>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f040 817d 	bne.w	80063c2 <_svfprintf_r+0xeba>
 80060c8:	ab2e      	add	r3, sp, #184	; 0xb8
 80060ca:	e7bd      	b.n	8006048 <_svfprintf_r+0xb40>
 80060cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80060ce:	605c      	str	r4, [r3, #4]
 80060d0:	3210      	adds	r2, #16
 80060d2:	9223      	str	r2, [sp, #140]	; 0x8c
 80060d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060d6:	3201      	adds	r2, #1
 80060d8:	2a07      	cmp	r2, #7
 80060da:	9222      	str	r2, [sp, #136]	; 0x88
 80060dc:	dc02      	bgt.n	80060e4 <_svfprintf_r+0xbdc>
 80060de:	3308      	adds	r3, #8
 80060e0:	3e10      	subs	r6, #16
 80060e2:	e7b7      	b.n	8006054 <_svfprintf_r+0xb4c>
 80060e4:	aa21      	add	r2, sp, #132	; 0x84
 80060e6:	4649      	mov	r1, r9
 80060e8:	4650      	mov	r0, sl
 80060ea:	f001 fd5b 	bl	8007ba4 <__ssprint_r>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f040 8167 	bne.w	80063c2 <_svfprintf_r+0xeba>
 80060f4:	ab2e      	add	r3, sp, #184	; 0xb8
 80060f6:	e7f3      	b.n	80060e0 <_svfprintf_r+0xbd8>
 80060f8:	9b07      	ldr	r3, [sp, #28]
 80060fa:	42bb      	cmp	r3, r7
 80060fc:	bfa8      	it	ge
 80060fe:	463b      	movge	r3, r7
 8006100:	2b00      	cmp	r3, #0
 8006102:	461e      	mov	r6, r3
 8006104:	dd0b      	ble.n	800611e <_svfprintf_r+0xc16>
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800610a:	f8c4 8000 	str.w	r8, [r4]
 800610e:	4433      	add	r3, r6
 8006110:	9323      	str	r3, [sp, #140]	; 0x8c
 8006112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006114:	3301      	adds	r3, #1
 8006116:	2b07      	cmp	r3, #7
 8006118:	9322      	str	r3, [sp, #136]	; 0x88
 800611a:	dc5f      	bgt.n	80061dc <_svfprintf_r+0xcd4>
 800611c:	3408      	adds	r4, #8
 800611e:	2e00      	cmp	r6, #0
 8006120:	bfb4      	ite	lt
 8006122:	463e      	movlt	r6, r7
 8006124:	1bbe      	subge	r6, r7, r6
 8006126:	2e00      	cmp	r6, #0
 8006128:	dd0f      	ble.n	800614a <_svfprintf_r+0xc42>
 800612a:	f8df b148 	ldr.w	fp, [pc, #328]	; 8006274 <_svfprintf_r+0xd6c>
 800612e:	2e10      	cmp	r6, #16
 8006130:	f8c4 b000 	str.w	fp, [r4]
 8006134:	dc5c      	bgt.n	80061f0 <_svfprintf_r+0xce8>
 8006136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006138:	6066      	str	r6, [r4, #4]
 800613a:	441e      	add	r6, r3
 800613c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800613e:	9623      	str	r6, [sp, #140]	; 0x8c
 8006140:	3301      	adds	r3, #1
 8006142:	2b07      	cmp	r3, #7
 8006144:	9322      	str	r3, [sp, #136]	; 0x88
 8006146:	dc6a      	bgt.n	800621e <_svfprintf_r+0xd16>
 8006148:	3408      	adds	r4, #8
 800614a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800614c:	9a07      	ldr	r2, [sp, #28]
 800614e:	4293      	cmp	r3, r2
 8006150:	db01      	blt.n	8006156 <_svfprintf_r+0xc4e>
 8006152:	07e9      	lsls	r1, r5, #31
 8006154:	d50d      	bpl.n	8006172 <_svfprintf_r+0xc6a>
 8006156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615e:	6063      	str	r3, [r4, #4]
 8006160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006162:	4413      	add	r3, r2
 8006164:	9323      	str	r3, [sp, #140]	; 0x8c
 8006166:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006168:	3301      	adds	r3, #1
 800616a:	2b07      	cmp	r3, #7
 800616c:	9322      	str	r3, [sp, #136]	; 0x88
 800616e:	dc60      	bgt.n	8006232 <_svfprintf_r+0xd2a>
 8006170:	3408      	adds	r4, #8
 8006172:	9b07      	ldr	r3, [sp, #28]
 8006174:	9a07      	ldr	r2, [sp, #28]
 8006176:	1bde      	subs	r6, r3, r7
 8006178:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	429e      	cmp	r6, r3
 800617e:	bfa8      	it	ge
 8006180:	461e      	movge	r6, r3
 8006182:	2e00      	cmp	r6, #0
 8006184:	dd0b      	ble.n	800619e <_svfprintf_r+0xc96>
 8006186:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006188:	4447      	add	r7, r8
 800618a:	4433      	add	r3, r6
 800618c:	9323      	str	r3, [sp, #140]	; 0x8c
 800618e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006190:	6027      	str	r7, [r4, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	2b07      	cmp	r3, #7
 8006196:	6066      	str	r6, [r4, #4]
 8006198:	9322      	str	r3, [sp, #136]	; 0x88
 800619a:	dc54      	bgt.n	8006246 <_svfprintf_r+0xd3e>
 800619c:	3408      	adds	r4, #8
 800619e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061a0:	9a07      	ldr	r2, [sp, #28]
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	eba2 0303 	sub.w	r3, r2, r3
 80061a8:	bfb4      	ite	lt
 80061aa:	461e      	movlt	r6, r3
 80061ac:	1b9e      	subge	r6, r3, r6
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	f77f acd7 	ble.w	8005b62 <_svfprintf_r+0x65a>
 80061b4:	f04f 0810 	mov.w	r8, #16
 80061b8:	4f2e      	ldr	r7, [pc, #184]	; (8006274 <_svfprintf_r+0xd6c>)
 80061ba:	2e10      	cmp	r6, #16
 80061bc:	6027      	str	r7, [r4, #0]
 80061be:	f77f aee7 	ble.w	8005f90 <_svfprintf_r+0xa88>
 80061c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061c4:	f8c4 8004 	str.w	r8, [r4, #4]
 80061c8:	3310      	adds	r3, #16
 80061ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80061cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ce:	3301      	adds	r3, #1
 80061d0:	2b07      	cmp	r3, #7
 80061d2:	9322      	str	r3, [sp, #136]	; 0x88
 80061d4:	dc41      	bgt.n	800625a <_svfprintf_r+0xd52>
 80061d6:	3408      	adds	r4, #8
 80061d8:	3e10      	subs	r6, #16
 80061da:	e7ee      	b.n	80061ba <_svfprintf_r+0xcb2>
 80061dc:	aa21      	add	r2, sp, #132	; 0x84
 80061de:	4649      	mov	r1, r9
 80061e0:	4650      	mov	r0, sl
 80061e2:	f001 fcdf 	bl	8007ba4 <__ssprint_r>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f040 80eb 	bne.w	80063c2 <_svfprintf_r+0xeba>
 80061ec:	ac2e      	add	r4, sp, #184	; 0xb8
 80061ee:	e796      	b.n	800611e <_svfprintf_r+0xc16>
 80061f0:	2310      	movs	r3, #16
 80061f2:	6063      	str	r3, [r4, #4]
 80061f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061f6:	3310      	adds	r3, #16
 80061f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80061fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061fc:	3301      	adds	r3, #1
 80061fe:	2b07      	cmp	r3, #7
 8006200:	9322      	str	r3, [sp, #136]	; 0x88
 8006202:	dc02      	bgt.n	800620a <_svfprintf_r+0xd02>
 8006204:	3408      	adds	r4, #8
 8006206:	3e10      	subs	r6, #16
 8006208:	e791      	b.n	800612e <_svfprintf_r+0xc26>
 800620a:	aa21      	add	r2, sp, #132	; 0x84
 800620c:	4649      	mov	r1, r9
 800620e:	4650      	mov	r0, sl
 8006210:	f001 fcc8 	bl	8007ba4 <__ssprint_r>
 8006214:	2800      	cmp	r0, #0
 8006216:	f040 80d4 	bne.w	80063c2 <_svfprintf_r+0xeba>
 800621a:	ac2e      	add	r4, sp, #184	; 0xb8
 800621c:	e7f3      	b.n	8006206 <_svfprintf_r+0xcfe>
 800621e:	aa21      	add	r2, sp, #132	; 0x84
 8006220:	4649      	mov	r1, r9
 8006222:	4650      	mov	r0, sl
 8006224:	f001 fcbe 	bl	8007ba4 <__ssprint_r>
 8006228:	2800      	cmp	r0, #0
 800622a:	f040 80ca 	bne.w	80063c2 <_svfprintf_r+0xeba>
 800622e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006230:	e78b      	b.n	800614a <_svfprintf_r+0xc42>
 8006232:	aa21      	add	r2, sp, #132	; 0x84
 8006234:	4649      	mov	r1, r9
 8006236:	4650      	mov	r0, sl
 8006238:	f001 fcb4 	bl	8007ba4 <__ssprint_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 80c0 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8006242:	ac2e      	add	r4, sp, #184	; 0xb8
 8006244:	e795      	b.n	8006172 <_svfprintf_r+0xc6a>
 8006246:	aa21      	add	r2, sp, #132	; 0x84
 8006248:	4649      	mov	r1, r9
 800624a:	4650      	mov	r0, sl
 800624c:	f001 fcaa 	bl	8007ba4 <__ssprint_r>
 8006250:	2800      	cmp	r0, #0
 8006252:	f040 80b6 	bne.w	80063c2 <_svfprintf_r+0xeba>
 8006256:	ac2e      	add	r4, sp, #184	; 0xb8
 8006258:	e7a1      	b.n	800619e <_svfprintf_r+0xc96>
 800625a:	aa21      	add	r2, sp, #132	; 0x84
 800625c:	4649      	mov	r1, r9
 800625e:	4650      	mov	r0, sl
 8006260:	f001 fca0 	bl	8007ba4 <__ssprint_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	f040 80ac 	bne.w	80063c2 <_svfprintf_r+0xeba>
 800626a:	ac2e      	add	r4, sp, #184	; 0xb8
 800626c:	e7b4      	b.n	80061d8 <_svfprintf_r+0xcd0>
 800626e:	bf00      	nop
 8006270:	0800866a 	.word	0x0800866a
 8006274:	0800867c 	.word	0x0800867c
 8006278:	9b07      	ldr	r3, [sp, #28]
 800627a:	2b01      	cmp	r3, #1
 800627c:	dc01      	bgt.n	8006282 <_svfprintf_r+0xd7a>
 800627e:	07ea      	lsls	r2, r5, #31
 8006280:	d576      	bpl.n	8006370 <_svfprintf_r+0xe68>
 8006282:	2301      	movs	r3, #1
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006288:	f8c4 8000 	str.w	r8, [r4]
 800628c:	3301      	adds	r3, #1
 800628e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006290:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006292:	3301      	adds	r3, #1
 8006294:	2b07      	cmp	r3, #7
 8006296:	9322      	str	r3, [sp, #136]	; 0x88
 8006298:	dc36      	bgt.n	8006308 <_svfprintf_r+0xe00>
 800629a:	3408      	adds	r4, #8
 800629c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800629e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062a8:	4413      	add	r3, r2
 80062aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80062ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ae:	3301      	adds	r3, #1
 80062b0:	2b07      	cmp	r3, #7
 80062b2:	9322      	str	r3, [sp, #136]	; 0x88
 80062b4:	dc31      	bgt.n	800631a <_svfprintf_r+0xe12>
 80062b6:	3408      	adds	r4, #8
 80062b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80062be:	990e      	ldr	r1, [sp, #56]	; 0x38
 80062c0:	f7fa fb6e 	bl	80009a0 <__aeabi_dcmpeq>
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	1e5e      	subs	r6, r3, #1
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d12f      	bne.n	800632c <_svfprintf_r+0xe24>
 80062cc:	f108 0301 	add.w	r3, r8, #1
 80062d0:	e884 0048 	stmia.w	r4, {r3, r6}
 80062d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062d6:	9a07      	ldr	r2, [sp, #28]
 80062d8:	3b01      	subs	r3, #1
 80062da:	4413      	add	r3, r2
 80062dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80062de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062e0:	3301      	adds	r3, #1
 80062e2:	2b07      	cmp	r3, #7
 80062e4:	9322      	str	r3, [sp, #136]	; 0x88
 80062e6:	dd4a      	ble.n	800637e <_svfprintf_r+0xe76>
 80062e8:	aa21      	add	r2, sp, #132	; 0x84
 80062ea:	4649      	mov	r1, r9
 80062ec:	4650      	mov	r0, sl
 80062ee:	f001 fc59 	bl	8007ba4 <__ssprint_r>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d165      	bne.n	80063c2 <_svfprintf_r+0xeba>
 80062f6:	ac2e      	add	r4, sp, #184	; 0xb8
 80062f8:	ab1d      	add	r3, sp, #116	; 0x74
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006304:	4413      	add	r3, r2
 8006306:	e41c      	b.n	8005b42 <_svfprintf_r+0x63a>
 8006308:	aa21      	add	r2, sp, #132	; 0x84
 800630a:	4649      	mov	r1, r9
 800630c:	4650      	mov	r0, sl
 800630e:	f001 fc49 	bl	8007ba4 <__ssprint_r>
 8006312:	2800      	cmp	r0, #0
 8006314:	d155      	bne.n	80063c2 <_svfprintf_r+0xeba>
 8006316:	ac2e      	add	r4, sp, #184	; 0xb8
 8006318:	e7c0      	b.n	800629c <_svfprintf_r+0xd94>
 800631a:	aa21      	add	r2, sp, #132	; 0x84
 800631c:	4649      	mov	r1, r9
 800631e:	4650      	mov	r0, sl
 8006320:	f001 fc40 	bl	8007ba4 <__ssprint_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	d14c      	bne.n	80063c2 <_svfprintf_r+0xeba>
 8006328:	ac2e      	add	r4, sp, #184	; 0xb8
 800632a:	e7c5      	b.n	80062b8 <_svfprintf_r+0xdb0>
 800632c:	2e00      	cmp	r6, #0
 800632e:	dde3      	ble.n	80062f8 <_svfprintf_r+0xdf0>
 8006330:	f04f 0810 	mov.w	r8, #16
 8006334:	4f58      	ldr	r7, [pc, #352]	; (8006498 <_svfprintf_r+0xf90>)
 8006336:	2e10      	cmp	r6, #16
 8006338:	6027      	str	r7, [r4, #0]
 800633a:	dc04      	bgt.n	8006346 <_svfprintf_r+0xe3e>
 800633c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800633e:	6066      	str	r6, [r4, #4]
 8006340:	441e      	add	r6, r3
 8006342:	9623      	str	r6, [sp, #140]	; 0x8c
 8006344:	e7cb      	b.n	80062de <_svfprintf_r+0xdd6>
 8006346:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006348:	f8c4 8004 	str.w	r8, [r4, #4]
 800634c:	3310      	adds	r3, #16
 800634e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006352:	3301      	adds	r3, #1
 8006354:	2b07      	cmp	r3, #7
 8006356:	9322      	str	r3, [sp, #136]	; 0x88
 8006358:	dc02      	bgt.n	8006360 <_svfprintf_r+0xe58>
 800635a:	3408      	adds	r4, #8
 800635c:	3e10      	subs	r6, #16
 800635e:	e7ea      	b.n	8006336 <_svfprintf_r+0xe2e>
 8006360:	aa21      	add	r2, sp, #132	; 0x84
 8006362:	4649      	mov	r1, r9
 8006364:	4650      	mov	r0, sl
 8006366:	f001 fc1d 	bl	8007ba4 <__ssprint_r>
 800636a:	bb50      	cbnz	r0, 80063c2 <_svfprintf_r+0xeba>
 800636c:	ac2e      	add	r4, sp, #184	; 0xb8
 800636e:	e7f5      	b.n	800635c <_svfprintf_r+0xe54>
 8006370:	2301      	movs	r3, #1
 8006372:	6063      	str	r3, [r4, #4]
 8006374:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006376:	f8c4 8000 	str.w	r8, [r4]
 800637a:	3301      	adds	r3, #1
 800637c:	e7ae      	b.n	80062dc <_svfprintf_r+0xdd4>
 800637e:	3408      	adds	r4, #8
 8006380:	e7ba      	b.n	80062f8 <_svfprintf_r+0xdf0>
 8006382:	3408      	adds	r4, #8
 8006384:	f7ff bbed 	b.w	8005b62 <_svfprintf_r+0x65a>
 8006388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800638a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800638c:	1a9d      	subs	r5, r3, r2
 800638e:	2d00      	cmp	r5, #0
 8006390:	f77f abea 	ble.w	8005b68 <_svfprintf_r+0x660>
 8006394:	2610      	movs	r6, #16
 8006396:	4b41      	ldr	r3, [pc, #260]	; (800649c <_svfprintf_r+0xf94>)
 8006398:	2d10      	cmp	r5, #16
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	dc1b      	bgt.n	80063d6 <_svfprintf_r+0xece>
 800639e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063a0:	6065      	str	r5, [r4, #4]
 80063a2:	441d      	add	r5, r3
 80063a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063a6:	9523      	str	r5, [sp, #140]	; 0x8c
 80063a8:	3301      	adds	r3, #1
 80063aa:	2b07      	cmp	r3, #7
 80063ac:	9322      	str	r3, [sp, #136]	; 0x88
 80063ae:	f77f abdb 	ble.w	8005b68 <_svfprintf_r+0x660>
 80063b2:	aa21      	add	r2, sp, #132	; 0x84
 80063b4:	4649      	mov	r1, r9
 80063b6:	4650      	mov	r0, sl
 80063b8:	f001 fbf4 	bl	8007ba4 <__ssprint_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	f43f abd3 	beq.w	8005b68 <_svfprintf_r+0x660>
 80063c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80063c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063cc:	bf18      	it	ne
 80063ce:	f04f 33ff 	movne.w	r3, #4294967295
 80063d2:	f7ff b8bd 	b.w	8005550 <_svfprintf_r+0x48>
 80063d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063d8:	6066      	str	r6, [r4, #4]
 80063da:	3310      	adds	r3, #16
 80063dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80063de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063e0:	3301      	adds	r3, #1
 80063e2:	2b07      	cmp	r3, #7
 80063e4:	9322      	str	r3, [sp, #136]	; 0x88
 80063e6:	dc02      	bgt.n	80063ee <_svfprintf_r+0xee6>
 80063e8:	3408      	adds	r4, #8
 80063ea:	3d10      	subs	r5, #16
 80063ec:	e7d3      	b.n	8006396 <_svfprintf_r+0xe8e>
 80063ee:	aa21      	add	r2, sp, #132	; 0x84
 80063f0:	4649      	mov	r1, r9
 80063f2:	4650      	mov	r0, sl
 80063f4:	f001 fbd6 	bl	8007ba4 <__ssprint_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d1e2      	bne.n	80063c2 <_svfprintf_r+0xeba>
 80063fc:	ac2e      	add	r4, sp, #184	; 0xb8
 80063fe:	e7f4      	b.n	80063ea <_svfprintf_r+0xee2>
 8006400:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0dd      	beq.n	80063c2 <_svfprintf_r+0xeba>
 8006406:	aa21      	add	r2, sp, #132	; 0x84
 8006408:	4649      	mov	r1, r9
 800640a:	4650      	mov	r0, sl
 800640c:	f001 fbca 	bl	8007ba4 <__ssprint_r>
 8006410:	e7d7      	b.n	80063c2 <_svfprintf_r+0xeba>
 8006412:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006416:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006418:	990e      	ldr	r1, [sp, #56]	; 0x38
 800641a:	f7fa faf3 	bl	8000a04 <__aeabi_dcmpun>
 800641e:	2800      	cmp	r0, #0
 8006420:	f43f aa3d 	beq.w	800589e <_svfprintf_r+0x396>
 8006424:	4b1e      	ldr	r3, [pc, #120]	; (80064a0 <_svfprintf_r+0xf98>)
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <_svfprintf_r+0xf9c>)
 8006428:	f7ff ba2d 	b.w	8005886 <_svfprintf_r+0x37e>
 800642c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800642e:	eba3 0308 	sub.w	r3, r3, r8
 8006432:	9307      	str	r3, [sp, #28]
 8006434:	f7ff baaf 	b.w	8005996 <_svfprintf_r+0x48e>
 8006438:	ea56 0207 	orrs.w	r2, r6, r7
 800643c:	950f      	str	r5, [sp, #60]	; 0x3c
 800643e:	f43f ac2b 	beq.w	8005c98 <_svfprintf_r+0x790>
 8006442:	2b01      	cmp	r3, #1
 8006444:	f43f ac9d 	beq.w	8005d82 <_svfprintf_r+0x87a>
 8006448:	2b02      	cmp	r3, #2
 800644a:	f43f acbd 	beq.w	8005dc8 <_svfprintf_r+0x8c0>
 800644e:	ab2e      	add	r3, sp, #184	; 0xb8
 8006450:	08f1      	lsrs	r1, r6, #3
 8006452:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006456:	08f8      	lsrs	r0, r7, #3
 8006458:	f006 0207 	and.w	r2, r6, #7
 800645c:	4607      	mov	r7, r0
 800645e:	460e      	mov	r6, r1
 8006460:	3230      	adds	r2, #48	; 0x30
 8006462:	ea56 0107 	orrs.w	r1, r6, r7
 8006466:	f103 38ff 	add.w	r8, r3, #4294967295
 800646a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800646e:	f47f ac86 	bne.w	8005d7e <_svfprintf_r+0x876>
 8006472:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006474:	07c9      	lsls	r1, r1, #31
 8006476:	d506      	bpl.n	8006486 <_svfprintf_r+0xf7e>
 8006478:	2a30      	cmp	r2, #48	; 0x30
 800647a:	d004      	beq.n	8006486 <_svfprintf_r+0xf7e>
 800647c:	2230      	movs	r2, #48	; 0x30
 800647e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006482:	f1a3 0802 	sub.w	r8, r3, #2
 8006486:	ab2e      	add	r3, sp, #184	; 0xb8
 8006488:	465e      	mov	r6, fp
 800648a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800648c:	eba3 0b08 	sub.w	fp, r3, r8
 8006490:	2700      	movs	r7, #0
 8006492:	f7ff bace 	b.w	8005a32 <_svfprintf_r+0x52a>
 8006496:	bf00      	nop
 8006498:	0800867c 	.word	0x0800867c
 800649c:	0800866c 	.word	0x0800866c
 80064a0:	08008640 	.word	0x08008640
 80064a4:	08008644 	.word	0x08008644

080064a8 <quorem>:
 80064a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	6903      	ldr	r3, [r0, #16]
 80064ae:	690c      	ldr	r4, [r1, #16]
 80064b0:	4680      	mov	r8, r0
 80064b2:	429c      	cmp	r4, r3
 80064b4:	f300 8082 	bgt.w	80065bc <quorem+0x114>
 80064b8:	3c01      	subs	r4, #1
 80064ba:	f101 0714 	add.w	r7, r1, #20
 80064be:	f100 0614 	add.w	r6, r0, #20
 80064c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80064c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80064ca:	3501      	adds	r5, #1
 80064cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80064d0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80064d4:	eb06 030e 	add.w	r3, r6, lr
 80064d8:	eb07 090e 	add.w	r9, r7, lr
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	b38d      	cbz	r5, 8006544 <quorem+0x9c>
 80064e0:	f04f 0a00 	mov.w	sl, #0
 80064e4:	4638      	mov	r0, r7
 80064e6:	46b4      	mov	ip, r6
 80064e8:	46d3      	mov	fp, sl
 80064ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80064ee:	b293      	uxth	r3, r2
 80064f0:	fb05 a303 	mla	r3, r5, r3, sl
 80064f4:	0c12      	lsrs	r2, r2, #16
 80064f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064fa:	fb05 a202 	mla	r2, r5, r2, sl
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ebab 0303 	sub.w	r3, fp, r3
 8006504:	f8bc b000 	ldrh.w	fp, [ip]
 8006508:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800650c:	445b      	add	r3, fp
 800650e:	fa1f fb82 	uxth.w	fp, r2
 8006512:	f8dc 2000 	ldr.w	r2, [ip]
 8006516:	4581      	cmp	r9, r0
 8006518:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800651c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006526:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800652a:	f84c 3b04 	str.w	r3, [ip], #4
 800652e:	d2dc      	bcs.n	80064ea <quorem+0x42>
 8006530:	f856 300e 	ldr.w	r3, [r6, lr]
 8006534:	b933      	cbnz	r3, 8006544 <quorem+0x9c>
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	3b04      	subs	r3, #4
 800653a:	429e      	cmp	r6, r3
 800653c:	461a      	mov	r2, r3
 800653e:	d331      	bcc.n	80065a4 <quorem+0xfc>
 8006540:	f8c8 4010 	str.w	r4, [r8, #16]
 8006544:	4640      	mov	r0, r8
 8006546:	f001 fa54 	bl	80079f2 <__mcmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	db26      	blt.n	800659c <quorem+0xf4>
 800654e:	4630      	mov	r0, r6
 8006550:	f04f 0e00 	mov.w	lr, #0
 8006554:	3501      	adds	r5, #1
 8006556:	f857 1b04 	ldr.w	r1, [r7], #4
 800655a:	f8d0 c000 	ldr.w	ip, [r0]
 800655e:	b28b      	uxth	r3, r1
 8006560:	ebae 0303 	sub.w	r3, lr, r3
 8006564:	fa1f f28c 	uxth.w	r2, ip
 8006568:	4413      	add	r3, r2
 800656a:	0c0a      	lsrs	r2, r1, #16
 800656c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006574:	b29b      	uxth	r3, r3
 8006576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800657a:	45b9      	cmp	r9, r7
 800657c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006580:	f840 3b04 	str.w	r3, [r0], #4
 8006584:	d2e7      	bcs.n	8006556 <quorem+0xae>
 8006586:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800658a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800658e:	b92a      	cbnz	r2, 800659c <quorem+0xf4>
 8006590:	3b04      	subs	r3, #4
 8006592:	429e      	cmp	r6, r3
 8006594:	461a      	mov	r2, r3
 8006596:	d30b      	bcc.n	80065b0 <quorem+0x108>
 8006598:	f8c8 4010 	str.w	r4, [r8, #16]
 800659c:	4628      	mov	r0, r5
 800659e:	b003      	add	sp, #12
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	3b04      	subs	r3, #4
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d1c9      	bne.n	8006540 <quorem+0x98>
 80065ac:	3c01      	subs	r4, #1
 80065ae:	e7c4      	b.n	800653a <quorem+0x92>
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d1ef      	bne.n	8006598 <quorem+0xf0>
 80065b8:	3c01      	subs	r4, #1
 80065ba:	e7ea      	b.n	8006592 <quorem+0xea>
 80065bc:	2000      	movs	r0, #0
 80065be:	e7ee      	b.n	800659e <quorem+0xf6>

080065c0 <_dtoa_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065c6:	b095      	sub	sp, #84	; 0x54
 80065c8:	4604      	mov	r4, r0
 80065ca:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80065cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065d0:	b93e      	cbnz	r6, 80065e2 <_dtoa_r+0x22>
 80065d2:	2010      	movs	r0, #16
 80065d4:	f000 fdd6 	bl	8007184 <malloc>
 80065d8:	6260      	str	r0, [r4, #36]	; 0x24
 80065da:	6046      	str	r6, [r0, #4]
 80065dc:	6086      	str	r6, [r0, #8]
 80065de:	6006      	str	r6, [r0, #0]
 80065e0:	60c6      	str	r6, [r0, #12]
 80065e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e4:	6819      	ldr	r1, [r3, #0]
 80065e6:	b151      	cbz	r1, 80065fe <_dtoa_r+0x3e>
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	2301      	movs	r3, #1
 80065ec:	4093      	lsls	r3, r2
 80065ee:	604a      	str	r2, [r1, #4]
 80065f0:	608b      	str	r3, [r1, #8]
 80065f2:	4620      	mov	r0, r4
 80065f4:	f001 f828 	bl	8007648 <_Bfree>
 80065f8:	2200      	movs	r2, #0
 80065fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	bfb7      	itett	lt
 8006604:	2301      	movlt	r3, #1
 8006606:	2300      	movge	r3, #0
 8006608:	602b      	strlt	r3, [r5, #0]
 800660a:	9b03      	ldrlt	r3, [sp, #12]
 800660c:	bfae      	itee	ge
 800660e:	602b      	strge	r3, [r5, #0]
 8006610:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006614:	9303      	strlt	r3, [sp, #12]
 8006616:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800661a:	4bab      	ldr	r3, [pc, #684]	; (80068c8 <_dtoa_r+0x308>)
 800661c:	ea33 0309 	bics.w	r3, r3, r9
 8006620:	d11b      	bne.n	800665a <_dtoa_r+0x9a>
 8006622:	f242 730f 	movw	r3, #9999	; 0x270f
 8006626:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	9b02      	ldr	r3, [sp, #8]
 800662c:	b923      	cbnz	r3, 8006638 <_dtoa_r+0x78>
 800662e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006632:	2800      	cmp	r0, #0
 8006634:	f000 8583 	beq.w	800713e <_dtoa_r+0xb7e>
 8006638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800663a:	b953      	cbnz	r3, 8006652 <_dtoa_r+0x92>
 800663c:	4ba3      	ldr	r3, [pc, #652]	; (80068cc <_dtoa_r+0x30c>)
 800663e:	e021      	b.n	8006684 <_dtoa_r+0xc4>
 8006640:	4ba3      	ldr	r3, [pc, #652]	; (80068d0 <_dtoa_r+0x310>)
 8006642:	9306      	str	r3, [sp, #24]
 8006644:	3308      	adds	r3, #8
 8006646:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	9806      	ldr	r0, [sp, #24]
 800664c:	b015      	add	sp, #84	; 0x54
 800664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006652:	4b9e      	ldr	r3, [pc, #632]	; (80068cc <_dtoa_r+0x30c>)
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	3303      	adds	r3, #3
 8006658:	e7f5      	b.n	8006646 <_dtoa_r+0x86>
 800665a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800665e:	2200      	movs	r2, #0
 8006660:	2300      	movs	r3, #0
 8006662:	4630      	mov	r0, r6
 8006664:	4639      	mov	r1, r7
 8006666:	f7fa f99b 	bl	80009a0 <__aeabi_dcmpeq>
 800666a:	4680      	mov	r8, r0
 800666c:	b160      	cbz	r0, 8006688 <_dtoa_r+0xc8>
 800666e:	2301      	movs	r3, #1
 8006670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 855e 	beq.w	8007138 <_dtoa_r+0xb78>
 800667c:	4b95      	ldr	r3, [pc, #596]	; (80068d4 <_dtoa_r+0x314>)
 800667e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	3b01      	subs	r3, #1
 8006684:	9306      	str	r3, [sp, #24]
 8006686:	e7e0      	b.n	800664a <_dtoa_r+0x8a>
 8006688:	ab12      	add	r3, sp, #72	; 0x48
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	ab13      	add	r3, sp, #76	; 0x4c
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	4620      	mov	r0, r4
 8006696:	f001 fa25 	bl	8007ae4 <__d2b>
 800669a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800669e:	4682      	mov	sl, r0
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	d07d      	beq.n	80067a0 <_dtoa_r+0x1e0>
 80066a4:	4630      	mov	r0, r6
 80066a6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066aa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80066ae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80066b2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066b6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80066ba:	2200      	movs	r2, #0
 80066bc:	4b86      	ldr	r3, [pc, #536]	; (80068d8 <_dtoa_r+0x318>)
 80066be:	f7f9 fd53 	bl	8000168 <__aeabi_dsub>
 80066c2:	a37b      	add	r3, pc, #492	; (adr r3, 80068b0 <_dtoa_r+0x2f0>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff02 	bl	80004d0 <__aeabi_dmul>
 80066cc:	a37a      	add	r3, pc, #488	; (adr r3, 80068b8 <_dtoa_r+0x2f8>)
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f7f9 fd4b 	bl	800016c <__adddf3>
 80066d6:	4606      	mov	r6, r0
 80066d8:	4628      	mov	r0, r5
 80066da:	460f      	mov	r7, r1
 80066dc:	f7f9 fe92 	bl	8000404 <__aeabi_i2d>
 80066e0:	a377      	add	r3, pc, #476	; (adr r3, 80068c0 <_dtoa_r+0x300>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f7f9 fef3 	bl	80004d0 <__aeabi_dmul>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4630      	mov	r0, r6
 80066f0:	4639      	mov	r1, r7
 80066f2:	f7f9 fd3b 	bl	800016c <__adddf3>
 80066f6:	4606      	mov	r6, r0
 80066f8:	460f      	mov	r7, r1
 80066fa:	f7fa f999 	bl	8000a30 <__aeabi_d2iz>
 80066fe:	2200      	movs	r2, #0
 8006700:	4683      	mov	fp, r0
 8006702:	2300      	movs	r3, #0
 8006704:	4630      	mov	r0, r6
 8006706:	4639      	mov	r1, r7
 8006708:	f7fa f954 	bl	80009b4 <__aeabi_dcmplt>
 800670c:	b158      	cbz	r0, 8006726 <_dtoa_r+0x166>
 800670e:	4658      	mov	r0, fp
 8006710:	f7f9 fe78 	bl	8000404 <__aeabi_i2d>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa f940 	bl	80009a0 <__aeabi_dcmpeq>
 8006720:	b908      	cbnz	r0, 8006726 <_dtoa_r+0x166>
 8006722:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006726:	f1bb 0f16 	cmp.w	fp, #22
 800672a:	d858      	bhi.n	80067de <_dtoa_r+0x21e>
 800672c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006730:	496a      	ldr	r1, [pc, #424]	; (80068dc <_dtoa_r+0x31c>)
 8006732:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800673a:	f7fa f959 	bl	80009f0 <__aeabi_dcmpgt>
 800673e:	2800      	cmp	r0, #0
 8006740:	d04f      	beq.n	80067e2 <_dtoa_r+0x222>
 8006742:	2300      	movs	r3, #0
 8006744:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006748:	930d      	str	r3, [sp, #52]	; 0x34
 800674a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800674c:	1b5d      	subs	r5, r3, r5
 800674e:	1e6b      	subs	r3, r5, #1
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	bf43      	ittte	mi
 8006754:	2300      	movmi	r3, #0
 8006756:	f1c5 0801 	rsbmi	r8, r5, #1
 800675a:	9307      	strmi	r3, [sp, #28]
 800675c:	f04f 0800 	movpl.w	r8, #0
 8006760:	f1bb 0f00 	cmp.w	fp, #0
 8006764:	db3f      	blt.n	80067e6 <_dtoa_r+0x226>
 8006766:	9b07      	ldr	r3, [sp, #28]
 8006768:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800676c:	445b      	add	r3, fp
 800676e:	9307      	str	r3, [sp, #28]
 8006770:	2300      	movs	r3, #0
 8006772:	9308      	str	r3, [sp, #32]
 8006774:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006776:	2b09      	cmp	r3, #9
 8006778:	f200 80b4 	bhi.w	80068e4 <_dtoa_r+0x324>
 800677c:	2b05      	cmp	r3, #5
 800677e:	bfc4      	itt	gt
 8006780:	3b04      	subgt	r3, #4
 8006782:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006784:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006786:	bfc8      	it	gt
 8006788:	2600      	movgt	r6, #0
 800678a:	f1a3 0302 	sub.w	r3, r3, #2
 800678e:	bfd8      	it	le
 8006790:	2601      	movle	r6, #1
 8006792:	2b03      	cmp	r3, #3
 8006794:	f200 80b2 	bhi.w	80068fc <_dtoa_r+0x33c>
 8006798:	e8df f003 	tbb	[pc, r3]
 800679c:	782d8684 	.word	0x782d8684
 80067a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80067a4:	441d      	add	r5, r3
 80067a6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	dd11      	ble.n	80067d2 <_dtoa_r+0x212>
 80067ae:	9a02      	ldr	r2, [sp, #8]
 80067b0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80067b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80067b8:	fa22 f000 	lsr.w	r0, r2, r0
 80067bc:	fa09 f303 	lsl.w	r3, r9, r3
 80067c0:	4318      	orrs	r0, r3
 80067c2:	f7f9 fe0f 	bl	80003e4 <__aeabi_ui2d>
 80067c6:	2301      	movs	r3, #1
 80067c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80067cc:	3d01      	subs	r5, #1
 80067ce:	9310      	str	r3, [sp, #64]	; 0x40
 80067d0:	e773      	b.n	80066ba <_dtoa_r+0xfa>
 80067d2:	f1c3 0020 	rsb	r0, r3, #32
 80067d6:	9b02      	ldr	r3, [sp, #8]
 80067d8:	fa03 f000 	lsl.w	r0, r3, r0
 80067dc:	e7f1      	b.n	80067c2 <_dtoa_r+0x202>
 80067de:	2301      	movs	r3, #1
 80067e0:	e7b2      	b.n	8006748 <_dtoa_r+0x188>
 80067e2:	900d      	str	r0, [sp, #52]	; 0x34
 80067e4:	e7b1      	b.n	800674a <_dtoa_r+0x18a>
 80067e6:	f1cb 0300 	rsb	r3, fp, #0
 80067ea:	9308      	str	r3, [sp, #32]
 80067ec:	2300      	movs	r3, #0
 80067ee:	eba8 080b 	sub.w	r8, r8, fp
 80067f2:	930c      	str	r3, [sp, #48]	; 0x30
 80067f4:	e7be      	b.n	8006774 <_dtoa_r+0x1b4>
 80067f6:	2301      	movs	r3, #1
 80067f8:	9309      	str	r3, [sp, #36]	; 0x24
 80067fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f340 8080 	ble.w	8006902 <_dtoa_r+0x342>
 8006802:	4699      	mov	r9, r3
 8006804:	9304      	str	r3, [sp, #16]
 8006806:	2200      	movs	r2, #0
 8006808:	2104      	movs	r1, #4
 800680a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800680c:	606a      	str	r2, [r5, #4]
 800680e:	f101 0214 	add.w	r2, r1, #20
 8006812:	429a      	cmp	r2, r3
 8006814:	d97a      	bls.n	800690c <_dtoa_r+0x34c>
 8006816:	6869      	ldr	r1, [r5, #4]
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fee1 	bl	80075e0 <_Balloc>
 800681e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006820:	6028      	str	r0, [r5, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f1b9 0f0e 	cmp.w	r9, #14
 8006828:	9306      	str	r3, [sp, #24]
 800682a:	f200 80f0 	bhi.w	8006a0e <_dtoa_r+0x44e>
 800682e:	2e00      	cmp	r6, #0
 8006830:	f000 80ed 	beq.w	8006a0e <_dtoa_r+0x44e>
 8006834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006838:	f1bb 0f00 	cmp.w	fp, #0
 800683c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006840:	dd79      	ble.n	8006936 <_dtoa_r+0x376>
 8006842:	4a26      	ldr	r2, [pc, #152]	; (80068dc <_dtoa_r+0x31c>)
 8006844:	f00b 030f 	and.w	r3, fp, #15
 8006848:	ea4f 162b 	mov.w	r6, fp, asr #4
 800684c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006850:	06f0      	lsls	r0, r6, #27
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800685a:	d55c      	bpl.n	8006916 <_dtoa_r+0x356>
 800685c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006860:	4b1f      	ldr	r3, [pc, #124]	; (80068e0 <_dtoa_r+0x320>)
 8006862:	2503      	movs	r5, #3
 8006864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006868:	f7f9 ff5c 	bl	8000724 <__aeabi_ddiv>
 800686c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006870:	f006 060f 	and.w	r6, r6, #15
 8006874:	4f1a      	ldr	r7, [pc, #104]	; (80068e0 <_dtoa_r+0x320>)
 8006876:	2e00      	cmp	r6, #0
 8006878:	d14f      	bne.n	800691a <_dtoa_r+0x35a>
 800687a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800687e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006882:	f7f9 ff4f 	bl	8000724 <__aeabi_ddiv>
 8006886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800688a:	e06e      	b.n	800696a <_dtoa_r+0x3aa>
 800688c:	2301      	movs	r3, #1
 800688e:	9309      	str	r3, [sp, #36]	; 0x24
 8006890:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006892:	445b      	add	r3, fp
 8006894:	f103 0901 	add.w	r9, r3, #1
 8006898:	9304      	str	r3, [sp, #16]
 800689a:	464b      	mov	r3, r9
 800689c:	2b01      	cmp	r3, #1
 800689e:	bfb8      	it	lt
 80068a0:	2301      	movlt	r3, #1
 80068a2:	e7b0      	b.n	8006806 <_dtoa_r+0x246>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e7a7      	b.n	80067f8 <_dtoa_r+0x238>
 80068a8:	2300      	movs	r3, #0
 80068aa:	e7f0      	b.n	800688e <_dtoa_r+0x2ce>
 80068ac:	f3af 8000 	nop.w
 80068b0:	636f4361 	.word	0x636f4361
 80068b4:	3fd287a7 	.word	0x3fd287a7
 80068b8:	8b60c8b3 	.word	0x8b60c8b3
 80068bc:	3fc68a28 	.word	0x3fc68a28
 80068c0:	509f79fb 	.word	0x509f79fb
 80068c4:	3fd34413 	.word	0x3fd34413
 80068c8:	7ff00000 	.word	0x7ff00000
 80068cc:	08008695 	.word	0x08008695
 80068d0:	0800868c 	.word	0x0800868c
 80068d4:	0800866b 	.word	0x0800866b
 80068d8:	3ff80000 	.word	0x3ff80000
 80068dc:	080086c8 	.word	0x080086c8
 80068e0:	080086a0 	.word	0x080086a0
 80068e4:	2601      	movs	r6, #1
 80068e6:	2300      	movs	r3, #0
 80068e8:	9609      	str	r6, [sp, #36]	; 0x24
 80068ea:	931e      	str	r3, [sp, #120]	; 0x78
 80068ec:	f04f 33ff 	mov.w	r3, #4294967295
 80068f0:	2200      	movs	r2, #0
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	4699      	mov	r9, r3
 80068f6:	2312      	movs	r3, #18
 80068f8:	921f      	str	r2, [sp, #124]	; 0x7c
 80068fa:	e784      	b.n	8006806 <_dtoa_r+0x246>
 80068fc:	2301      	movs	r3, #1
 80068fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006900:	e7f4      	b.n	80068ec <_dtoa_r+0x32c>
 8006902:	2301      	movs	r3, #1
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	4699      	mov	r9, r3
 8006908:	461a      	mov	r2, r3
 800690a:	e7f5      	b.n	80068f8 <_dtoa_r+0x338>
 800690c:	686a      	ldr	r2, [r5, #4]
 800690e:	0049      	lsls	r1, r1, #1
 8006910:	3201      	adds	r2, #1
 8006912:	606a      	str	r2, [r5, #4]
 8006914:	e77b      	b.n	800680e <_dtoa_r+0x24e>
 8006916:	2502      	movs	r5, #2
 8006918:	e7ac      	b.n	8006874 <_dtoa_r+0x2b4>
 800691a:	07f1      	lsls	r1, r6, #31
 800691c:	d508      	bpl.n	8006930 <_dtoa_r+0x370>
 800691e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006926:	f7f9 fdd3 	bl	80004d0 <__aeabi_dmul>
 800692a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800692e:	3501      	adds	r5, #1
 8006930:	1076      	asrs	r6, r6, #1
 8006932:	3708      	adds	r7, #8
 8006934:	e79f      	b.n	8006876 <_dtoa_r+0x2b6>
 8006936:	f000 80a5 	beq.w	8006a84 <_dtoa_r+0x4c4>
 800693a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800693e:	f1cb 0600 	rsb	r6, fp, #0
 8006942:	4ba2      	ldr	r3, [pc, #648]	; (8006bcc <_dtoa_r+0x60c>)
 8006944:	f006 020f 	and.w	r2, r6, #15
 8006948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f7f9 fdbe 	bl	80004d0 <__aeabi_dmul>
 8006954:	2502      	movs	r5, #2
 8006956:	2300      	movs	r3, #0
 8006958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800695c:	4f9c      	ldr	r7, [pc, #624]	; (8006bd0 <_dtoa_r+0x610>)
 800695e:	1136      	asrs	r6, r6, #4
 8006960:	2e00      	cmp	r6, #0
 8006962:	f040 8084 	bne.w	8006a6e <_dtoa_r+0x4ae>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d18d      	bne.n	8006886 <_dtoa_r+0x2c6>
 800696a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 808b 	beq.w	8006a88 <_dtoa_r+0x4c8>
 8006972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006976:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800697a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800697e:	2200      	movs	r2, #0
 8006980:	4b94      	ldr	r3, [pc, #592]	; (8006bd4 <_dtoa_r+0x614>)
 8006982:	f7fa f817 	bl	80009b4 <__aeabi_dcmplt>
 8006986:	2800      	cmp	r0, #0
 8006988:	d07e      	beq.n	8006a88 <_dtoa_r+0x4c8>
 800698a:	f1b9 0f00 	cmp.w	r9, #0
 800698e:	d07b      	beq.n	8006a88 <_dtoa_r+0x4c8>
 8006990:	9b04      	ldr	r3, [sp, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	dd37      	ble.n	8006a06 <_dtoa_r+0x446>
 8006996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800699a:	2200      	movs	r2, #0
 800699c:	4b8e      	ldr	r3, [pc, #568]	; (8006bd8 <_dtoa_r+0x618>)
 800699e:	f7f9 fd97 	bl	80004d0 <__aeabi_dmul>
 80069a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a6:	9e04      	ldr	r6, [sp, #16]
 80069a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80069ac:	3501      	adds	r5, #1
 80069ae:	4628      	mov	r0, r5
 80069b0:	f7f9 fd28 	bl	8000404 <__aeabi_i2d>
 80069b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b8:	f7f9 fd8a 	bl	80004d0 <__aeabi_dmul>
 80069bc:	4b87      	ldr	r3, [pc, #540]	; (8006bdc <_dtoa_r+0x61c>)
 80069be:	2200      	movs	r2, #0
 80069c0:	f7f9 fbd4 	bl	800016c <__adddf3>
 80069c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ca:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80069ce:	950b      	str	r5, [sp, #44]	; 0x2c
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	d15c      	bne.n	8006a8e <_dtoa_r+0x4ce>
 80069d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d8:	2200      	movs	r2, #0
 80069da:	4b81      	ldr	r3, [pc, #516]	; (8006be0 <_dtoa_r+0x620>)
 80069dc:	f7f9 fbc4 	bl	8000168 <__aeabi_dsub>
 80069e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069e2:	462b      	mov	r3, r5
 80069e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e8:	f7fa f802 	bl	80009f0 <__aeabi_dcmpgt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 82f7 	bne.w	8006fe0 <_dtoa_r+0xa20>
 80069f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80069fc:	f7f9 ffda 	bl	80009b4 <__aeabi_dcmplt>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f040 82eb 	bne.w	8006fdc <_dtoa_r+0xa1c>
 8006a06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f2c0 8150 	blt.w	8006cb6 <_dtoa_r+0x6f6>
 8006a16:	f1bb 0f0e 	cmp.w	fp, #14
 8006a1a:	f300 814c 	bgt.w	8006cb6 <_dtoa_r+0x6f6>
 8006a1e:	4b6b      	ldr	r3, [pc, #428]	; (8006bcc <_dtoa_r+0x60c>)
 8006a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f280 80da 	bge.w	8006be8 <_dtoa_r+0x628>
 8006a34:	f1b9 0f00 	cmp.w	r9, #0
 8006a38:	f300 80d6 	bgt.w	8006be8 <_dtoa_r+0x628>
 8006a3c:	f040 82cd 	bne.w	8006fda <_dtoa_r+0xa1a>
 8006a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a44:	2200      	movs	r2, #0
 8006a46:	4b66      	ldr	r3, [pc, #408]	; (8006be0 <_dtoa_r+0x620>)
 8006a48:	f7f9 fd42 	bl	80004d0 <__aeabi_dmul>
 8006a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a50:	f7f9 ffc4 	bl	80009dc <__aeabi_dcmpge>
 8006a54:	464e      	mov	r6, r9
 8006a56:	464f      	mov	r7, r9
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f040 82a4 	bne.w	8006fa6 <_dtoa_r+0x9e6>
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	9a06      	ldr	r2, [sp, #24]
 8006a62:	1c5d      	adds	r5, r3, #1
 8006a64:	2331      	movs	r3, #49	; 0x31
 8006a66:	f10b 0b01 	add.w	fp, fp, #1
 8006a6a:	7013      	strb	r3, [r2, #0]
 8006a6c:	e29f      	b.n	8006fae <_dtoa_r+0x9ee>
 8006a6e:	07f2      	lsls	r2, r6, #31
 8006a70:	d505      	bpl.n	8006a7e <_dtoa_r+0x4be>
 8006a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a76:	f7f9 fd2b 	bl	80004d0 <__aeabi_dmul>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	1076      	asrs	r6, r6, #1
 8006a80:	3708      	adds	r7, #8
 8006a82:	e76d      	b.n	8006960 <_dtoa_r+0x3a0>
 8006a84:	2502      	movs	r5, #2
 8006a86:	e770      	b.n	800696a <_dtoa_r+0x3aa>
 8006a88:	465f      	mov	r7, fp
 8006a8a:	464e      	mov	r6, r9
 8006a8c:	e78f      	b.n	80069ae <_dtoa_r+0x3ee>
 8006a8e:	9a06      	ldr	r2, [sp, #24]
 8006a90:	4b4e      	ldr	r3, [pc, #312]	; (8006bcc <_dtoa_r+0x60c>)
 8006a92:	4432      	add	r2, r6
 8006a94:	9211      	str	r2, [sp, #68]	; 0x44
 8006a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a98:	1e71      	subs	r1, r6, #1
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	d048      	beq.n	8006b30 <_dtoa_r+0x570>
 8006a9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	494e      	ldr	r1, [pc, #312]	; (8006be4 <_dtoa_r+0x624>)
 8006aaa:	f7f9 fe3b 	bl	8000724 <__aeabi_ddiv>
 8006aae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ab2:	f7f9 fb59 	bl	8000168 <__aeabi_dsub>
 8006ab6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006aba:	9d06      	ldr	r5, [sp, #24]
 8006abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac0:	f7f9 ffb6 	bl	8000a30 <__aeabi_d2iz>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	f7f9 fc9d 	bl	8000404 <__aeabi_i2d>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad2:	f7f9 fb49 	bl	8000168 <__aeabi_dsub>
 8006ad6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ada:	3630      	adds	r6, #48	; 0x30
 8006adc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae4:	f7f9 ff66 	bl	80009b4 <__aeabi_dcmplt>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d164      	bne.n	8006bb6 <_dtoa_r+0x5f6>
 8006aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af0:	2000      	movs	r0, #0
 8006af2:	4938      	ldr	r1, [pc, #224]	; (8006bd4 <_dtoa_r+0x614>)
 8006af4:	f7f9 fb38 	bl	8000168 <__aeabi_dsub>
 8006af8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006afc:	f7f9 ff5a 	bl	80009b4 <__aeabi_dcmplt>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f040 80b9 	bne.w	8006c78 <_dtoa_r+0x6b8>
 8006b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b08:	429d      	cmp	r5, r3
 8006b0a:	f43f af7c 	beq.w	8006a06 <_dtoa_r+0x446>
 8006b0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b12:	2200      	movs	r2, #0
 8006b14:	4b30      	ldr	r3, [pc, #192]	; (8006bd8 <_dtoa_r+0x618>)
 8006b16:	f7f9 fcdb 	bl	80004d0 <__aeabi_dmul>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b24:	4b2c      	ldr	r3, [pc, #176]	; (8006bd8 <_dtoa_r+0x618>)
 8006b26:	f7f9 fcd3 	bl	80004d0 <__aeabi_dmul>
 8006b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2e:	e7c5      	b.n	8006abc <_dtoa_r+0x4fc>
 8006b30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b3c:	f7f9 fcc8 	bl	80004d0 <__aeabi_dmul>
 8006b40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b44:	9d06      	ldr	r5, [sp, #24]
 8006b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b4a:	f7f9 ff71 	bl	8000a30 <__aeabi_d2iz>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	f7f9 fc58 	bl	8000404 <__aeabi_i2d>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5c:	f7f9 fb04 	bl	8000168 <__aeabi_dsub>
 8006b60:	3630      	adds	r6, #48	; 0x30
 8006b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b64:	f805 6b01 	strb.w	r6, [r5], #1
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	d124      	bne.n	8006bbe <_dtoa_r+0x5fe>
 8006b74:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <_dtoa_r+0x624>)
 8006b76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b7a:	f7f9 faf7 	bl	800016c <__adddf3>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b86:	f7f9 ff33 	bl	80009f0 <__aeabi_dcmpgt>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d174      	bne.n	8006c78 <_dtoa_r+0x6b8>
 8006b8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b92:	2000      	movs	r0, #0
 8006b94:	4913      	ldr	r1, [pc, #76]	; (8006be4 <_dtoa_r+0x624>)
 8006b96:	f7f9 fae7 	bl	8000168 <__aeabi_dsub>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba2:	f7f9 ff07 	bl	80009b4 <__aeabi_dcmplt>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f af2d 	beq.w	8006a06 <_dtoa_r+0x446>
 8006bac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bb0:	1e6a      	subs	r2, r5, #1
 8006bb2:	2b30      	cmp	r3, #48	; 0x30
 8006bb4:	d001      	beq.n	8006bba <_dtoa_r+0x5fa>
 8006bb6:	46bb      	mov	fp, r7
 8006bb8:	e04d      	b.n	8006c56 <_dtoa_r+0x696>
 8006bba:	4615      	mov	r5, r2
 8006bbc:	e7f6      	b.n	8006bac <_dtoa_r+0x5ec>
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <_dtoa_r+0x618>)
 8006bc0:	f7f9 fc86 	bl	80004d0 <__aeabi_dmul>
 8006bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bc8:	e7bd      	b.n	8006b46 <_dtoa_r+0x586>
 8006bca:	bf00      	nop
 8006bcc:	080086c8 	.word	0x080086c8
 8006bd0:	080086a0 	.word	0x080086a0
 8006bd4:	3ff00000 	.word	0x3ff00000
 8006bd8:	40240000 	.word	0x40240000
 8006bdc:	401c0000 	.word	0x401c0000
 8006be0:	40140000 	.word	0x40140000
 8006be4:	3fe00000 	.word	0x3fe00000
 8006be8:	9d06      	ldr	r5, [sp, #24]
 8006bea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	f7f9 fd95 	bl	8000724 <__aeabi_ddiv>
 8006bfa:	f7f9 ff19 	bl	8000a30 <__aeabi_d2iz>
 8006bfe:	4680      	mov	r8, r0
 8006c00:	f7f9 fc00 	bl	8000404 <__aeabi_i2d>
 8006c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c08:	f7f9 fc62 	bl	80004d0 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 faa8 	bl	8000168 <__aeabi_dsub>
 8006c18:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006c1c:	f805 6b01 	strb.w	r6, [r5], #1
 8006c20:	9e06      	ldr	r6, [sp, #24]
 8006c22:	4602      	mov	r2, r0
 8006c24:	1bae      	subs	r6, r5, r6
 8006c26:	45b1      	cmp	r9, r6
 8006c28:	460b      	mov	r3, r1
 8006c2a:	d137      	bne.n	8006c9c <_dtoa_r+0x6dc>
 8006c2c:	f7f9 fa9e 	bl	800016c <__adddf3>
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3c:	f7f9 feba 	bl	80009b4 <__aeabi_dcmplt>
 8006c40:	b9c8      	cbnz	r0, 8006c76 <_dtoa_r+0x6b6>
 8006c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c46:	4632      	mov	r2, r6
 8006c48:	463b      	mov	r3, r7
 8006c4a:	f7f9 fea9 	bl	80009a0 <__aeabi_dcmpeq>
 8006c4e:	b110      	cbz	r0, 8006c56 <_dtoa_r+0x696>
 8006c50:	f018 0f01 	tst.w	r8, #1
 8006c54:	d10f      	bne.n	8006c76 <_dtoa_r+0x6b6>
 8006c56:	4651      	mov	r1, sl
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 fcf5 	bl	8007648 <_Bfree>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c62:	702b      	strb	r3, [r5, #0]
 8006c64:	f10b 0301 	add.w	r3, fp, #1
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f43f acec 	beq.w	800664a <_dtoa_r+0x8a>
 8006c72:	601d      	str	r5, [r3, #0]
 8006c74:	e4e9      	b.n	800664a <_dtoa_r+0x8a>
 8006c76:	465f      	mov	r7, fp
 8006c78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c7c:	1e6b      	subs	r3, r5, #1
 8006c7e:	2a39      	cmp	r2, #57	; 0x39
 8006c80:	d106      	bne.n	8006c90 <_dtoa_r+0x6d0>
 8006c82:	9a06      	ldr	r2, [sp, #24]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d107      	bne.n	8006c98 <_dtoa_r+0x6d8>
 8006c88:	2330      	movs	r3, #48	; 0x30
 8006c8a:	7013      	strb	r3, [r2, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	3701      	adds	r7, #1
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	3201      	adds	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e78e      	b.n	8006bb6 <_dtoa_r+0x5f6>
 8006c98:	461d      	mov	r5, r3
 8006c9a:	e7ed      	b.n	8006c78 <_dtoa_r+0x6b8>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4bb5      	ldr	r3, [pc, #724]	; (8006f74 <_dtoa_r+0x9b4>)
 8006ca0:	f7f9 fc16 	bl	80004d0 <__aeabi_dmul>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4606      	mov	r6, r0
 8006caa:	460f      	mov	r7, r1
 8006cac:	f7f9 fe78 	bl	80009a0 <__aeabi_dcmpeq>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d09c      	beq.n	8006bee <_dtoa_r+0x62e>
 8006cb4:	e7cf      	b.n	8006c56 <_dtoa_r+0x696>
 8006cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb8:	2a00      	cmp	r2, #0
 8006cba:	f000 8129 	beq.w	8006f10 <_dtoa_r+0x950>
 8006cbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006cc0:	2a01      	cmp	r2, #1
 8006cc2:	f300 810e 	bgt.w	8006ee2 <_dtoa_r+0x922>
 8006cc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	f000 8106 	beq.w	8006eda <_dtoa_r+0x91a>
 8006cce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cd2:	4645      	mov	r5, r8
 8006cd4:	9e08      	ldr	r6, [sp, #32]
 8006cd6:	9a07      	ldr	r2, [sp, #28]
 8006cd8:	2101      	movs	r1, #1
 8006cda:	441a      	add	r2, r3
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4498      	add	r8, r3
 8006ce0:	9207      	str	r2, [sp, #28]
 8006ce2:	f000 fd51 	bl	8007788 <__i2b>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	dd0b      	ble.n	8006d04 <_dtoa_r+0x744>
 8006cec:	9b07      	ldr	r3, [sp, #28]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dd08      	ble.n	8006d04 <_dtoa_r+0x744>
 8006cf2:	42ab      	cmp	r3, r5
 8006cf4:	bfa8      	it	ge
 8006cf6:	462b      	movge	r3, r5
 8006cf8:	9a07      	ldr	r2, [sp, #28]
 8006cfa:	eba8 0803 	sub.w	r8, r8, r3
 8006cfe:	1aed      	subs	r5, r5, r3
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	9307      	str	r3, [sp, #28]
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	b1fb      	cbz	r3, 8006d48 <_dtoa_r+0x788>
 8006d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 8104 	beq.w	8006f18 <_dtoa_r+0x958>
 8006d10:	2e00      	cmp	r6, #0
 8006d12:	dd11      	ble.n	8006d38 <_dtoa_r+0x778>
 8006d14:	4639      	mov	r1, r7
 8006d16:	4632      	mov	r2, r6
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fdcb 	bl	80078b4 <__pow5mult>
 8006d1e:	4652      	mov	r2, sl
 8006d20:	4601      	mov	r1, r0
 8006d22:	4607      	mov	r7, r0
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fd38 	bl	800779a <__multiply>
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	900a      	str	r0, [sp, #40]	; 0x28
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fc8a 	bl	8007648 <_Bfree>
 8006d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d36:	469a      	mov	sl, r3
 8006d38:	9b08      	ldr	r3, [sp, #32]
 8006d3a:	1b9a      	subs	r2, r3, r6
 8006d3c:	d004      	beq.n	8006d48 <_dtoa_r+0x788>
 8006d3e:	4651      	mov	r1, sl
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 fdb7 	bl	80078b4 <__pow5mult>
 8006d46:	4682      	mov	sl, r0
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 fd1c 	bl	8007788 <__i2b>
 8006d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d52:	4606      	mov	r6, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f340 80e1 	ble.w	8006f1c <_dtoa_r+0x95c>
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fda8 	bl	80078b4 <__pow5mult>
 8006d64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d66:	4606      	mov	r6, r0
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	f340 80da 	ble.w	8006f22 <_dtoa_r+0x962>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9308      	str	r3, [sp, #32]
 8006d72:	6933      	ldr	r3, [r6, #16]
 8006d74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d78:	6918      	ldr	r0, [r3, #16]
 8006d7a:	f000 fcb7 	bl	80076ec <__hi0bits>
 8006d7e:	f1c0 0020 	rsb	r0, r0, #32
 8006d82:	9b07      	ldr	r3, [sp, #28]
 8006d84:	4418      	add	r0, r3
 8006d86:	f010 001f 	ands.w	r0, r0, #31
 8006d8a:	f000 80f0 	beq.w	8006f6e <_dtoa_r+0x9ae>
 8006d8e:	f1c0 0320 	rsb	r3, r0, #32
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	f340 80e2 	ble.w	8006f5c <_dtoa_r+0x99c>
 8006d98:	9b07      	ldr	r3, [sp, #28]
 8006d9a:	f1c0 001c 	rsb	r0, r0, #28
 8006d9e:	4480      	add	r8, r0
 8006da0:	4405      	add	r5, r0
 8006da2:	4403      	add	r3, r0
 8006da4:	9307      	str	r3, [sp, #28]
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	dd05      	ble.n	8006db8 <_dtoa_r+0x7f8>
 8006dac:	4651      	mov	r1, sl
 8006dae:	4642      	mov	r2, r8
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fdcd 	bl	8007950 <__lshift>
 8006db6:	4682      	mov	sl, r0
 8006db8:	9b07      	ldr	r3, [sp, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dd05      	ble.n	8006dca <_dtoa_r+0x80a>
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fdc4 	bl	8007950 <__lshift>
 8006dc8:	4606      	mov	r6, r0
 8006dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80d3 	beq.w	8006f78 <_dtoa_r+0x9b8>
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	f000 fe0c 	bl	80079f2 <__mcmp>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	f280 80cc 	bge.w	8006f78 <_dtoa_r+0x9b8>
 8006de0:	2300      	movs	r3, #0
 8006de2:	4651      	mov	r1, sl
 8006de4:	220a      	movs	r2, #10
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fc45 	bl	8007676 <__multadd>
 8006dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006df2:	4682      	mov	sl, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 81a9 	beq.w	800714c <_dtoa_r+0xb8c>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	220a      	movs	r2, #10
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 fc38 	bl	8007676 <__multadd>
 8006e06:	9b04      	ldr	r3, [sp, #16]
 8006e08:	4607      	mov	r7, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dc03      	bgt.n	8006e16 <_dtoa_r+0x856>
 8006e0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	f300 80b9 	bgt.w	8006f88 <_dtoa_r+0x9c8>
 8006e16:	2d00      	cmp	r5, #0
 8006e18:	dd05      	ble.n	8006e26 <_dtoa_r+0x866>
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	462a      	mov	r2, r5
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 fd96 	bl	8007950 <__lshift>
 8006e24:	4607      	mov	r7, r0
 8006e26:	9b08      	ldr	r3, [sp, #32]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8110 	beq.w	800704e <_dtoa_r+0xa8e>
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fbd5 	bl	80075e0 <_Balloc>
 8006e36:	4605      	mov	r5, r0
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	f107 010c 	add.w	r1, r7, #12
 8006e3e:	3202      	adds	r2, #2
 8006e40:	0092      	lsls	r2, r2, #2
 8006e42:	300c      	adds	r0, #12
 8006e44:	f7fe fb28 	bl	8005498 <memcpy>
 8006e48:	2201      	movs	r2, #1
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fd7f 	bl	8007950 <__lshift>
 8006e52:	9707      	str	r7, [sp, #28]
 8006e54:	4607      	mov	r7, r0
 8006e56:	9b02      	ldr	r3, [sp, #8]
 8006e58:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	9308      	str	r3, [sp, #32]
 8006e62:	4631      	mov	r1, r6
 8006e64:	4650      	mov	r0, sl
 8006e66:	f7ff fb1f 	bl	80064a8 <quorem>
 8006e6a:	9907      	ldr	r1, [sp, #28]
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e72:	4650      	mov	r0, sl
 8006e74:	f000 fdbd 	bl	80079f2 <__mcmp>
 8006e78:	463a      	mov	r2, r7
 8006e7a:	9002      	str	r0, [sp, #8]
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fdd1 	bl	8007a26 <__mdiff>
 8006e84:	68c3      	ldr	r3, [r0, #12]
 8006e86:	4602      	mov	r2, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 80e2 	bne.w	8007052 <_dtoa_r+0xa92>
 8006e8e:	4601      	mov	r1, r0
 8006e90:	9009      	str	r0, [sp, #36]	; 0x24
 8006e92:	4650      	mov	r0, sl
 8006e94:	f000 fdad 	bl	80079f2 <__mcmp>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea2:	f000 fbd1 	bl	8007648 <_Bfree>
 8006ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f040 80d4 	bne.w	8007056 <_dtoa_r+0xa96>
 8006eae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	f040 80d0 	bne.w	8007056 <_dtoa_r+0xa96>
 8006eb6:	9a08      	ldr	r2, [sp, #32]
 8006eb8:	2a00      	cmp	r2, #0
 8006eba:	f040 80cc 	bne.w	8007056 <_dtoa_r+0xa96>
 8006ebe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ec2:	f000 80e8 	beq.w	8007096 <_dtoa_r+0xad6>
 8006ec6:	9b02      	ldr	r3, [sp, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dd01      	ble.n	8006ed0 <_dtoa_r+0x910>
 8006ecc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006ed0:	f108 0501 	add.w	r5, r8, #1
 8006ed4:	f888 9000 	strb.w	r9, [r8]
 8006ed8:	e06b      	b.n	8006fb2 <_dtoa_r+0x9f2>
 8006eda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006edc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ee0:	e6f7      	b.n	8006cd2 <_dtoa_r+0x712>
 8006ee2:	9b08      	ldr	r3, [sp, #32]
 8006ee4:	f109 36ff 	add.w	r6, r9, #4294967295
 8006ee8:	42b3      	cmp	r3, r6
 8006eea:	bfb7      	itett	lt
 8006eec:	9b08      	ldrlt	r3, [sp, #32]
 8006eee:	1b9e      	subge	r6, r3, r6
 8006ef0:	1af2      	sublt	r2, r6, r3
 8006ef2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006ef4:	bfbf      	itttt	lt
 8006ef6:	9608      	strlt	r6, [sp, #32]
 8006ef8:	189b      	addlt	r3, r3, r2
 8006efa:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006efc:	2600      	movlt	r6, #0
 8006efe:	f1b9 0f00 	cmp.w	r9, #0
 8006f02:	bfb9      	ittee	lt
 8006f04:	eba8 0509 	sublt.w	r5, r8, r9
 8006f08:	2300      	movlt	r3, #0
 8006f0a:	4645      	movge	r5, r8
 8006f0c:	464b      	movge	r3, r9
 8006f0e:	e6e2      	b.n	8006cd6 <_dtoa_r+0x716>
 8006f10:	9e08      	ldr	r6, [sp, #32]
 8006f12:	4645      	mov	r5, r8
 8006f14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f16:	e6e7      	b.n	8006ce8 <_dtoa_r+0x728>
 8006f18:	9a08      	ldr	r2, [sp, #32]
 8006f1a:	e710      	b.n	8006d3e <_dtoa_r+0x77e>
 8006f1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	dc18      	bgt.n	8006f54 <_dtoa_r+0x994>
 8006f22:	9b02      	ldr	r3, [sp, #8]
 8006f24:	b9b3      	cbnz	r3, 8006f54 <_dtoa_r+0x994>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f2c:	b9a3      	cbnz	r3, 8006f58 <_dtoa_r+0x998>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f34:	0d1b      	lsrs	r3, r3, #20
 8006f36:	051b      	lsls	r3, r3, #20
 8006f38:	b12b      	cbz	r3, 8006f46 <_dtoa_r+0x986>
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	f108 0801 	add.w	r8, r8, #1
 8006f40:	3301      	adds	r3, #1
 8006f42:	9307      	str	r3, [sp, #28]
 8006f44:	2301      	movs	r3, #1
 8006f46:	9308      	str	r3, [sp, #32]
 8006f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f47f af11 	bne.w	8006d72 <_dtoa_r+0x7b2>
 8006f50:	2001      	movs	r0, #1
 8006f52:	e716      	b.n	8006d82 <_dtoa_r+0x7c2>
 8006f54:	2300      	movs	r3, #0
 8006f56:	e7f6      	b.n	8006f46 <_dtoa_r+0x986>
 8006f58:	9b02      	ldr	r3, [sp, #8]
 8006f5a:	e7f4      	b.n	8006f46 <_dtoa_r+0x986>
 8006f5c:	f43f af23 	beq.w	8006da6 <_dtoa_r+0x7e6>
 8006f60:	9a07      	ldr	r2, [sp, #28]
 8006f62:	331c      	adds	r3, #28
 8006f64:	441a      	add	r2, r3
 8006f66:	4498      	add	r8, r3
 8006f68:	441d      	add	r5, r3
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	e71a      	b.n	8006da4 <_dtoa_r+0x7e4>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	e7f6      	b.n	8006f60 <_dtoa_r+0x9a0>
 8006f72:	bf00      	nop
 8006f74:	40240000 	.word	0x40240000
 8006f78:	f1b9 0f00 	cmp.w	r9, #0
 8006f7c:	dc33      	bgt.n	8006fe6 <_dtoa_r+0xa26>
 8006f7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	dd30      	ble.n	8006fe6 <_dtoa_r+0xa26>
 8006f84:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f88:	9b04      	ldr	r3, [sp, #16]
 8006f8a:	b963      	cbnz	r3, 8006fa6 <_dtoa_r+0x9e6>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	2205      	movs	r2, #5
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fb70 	bl	8007676 <__multadd>
 8006f96:	4601      	mov	r1, r0
 8006f98:	4606      	mov	r6, r0
 8006f9a:	4650      	mov	r0, sl
 8006f9c:	f000 fd29 	bl	80079f2 <__mcmp>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	f73f ad5c 	bgt.w	8006a5e <_dtoa_r+0x49e>
 8006fa6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fa8:	9d06      	ldr	r5, [sp, #24]
 8006faa:	ea6f 0b03 	mvn.w	fp, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fb47 	bl	8007648 <_Bfree>
 8006fba:	2f00      	cmp	r7, #0
 8006fbc:	f43f ae4b 	beq.w	8006c56 <_dtoa_r+0x696>
 8006fc0:	9b07      	ldr	r3, [sp, #28]
 8006fc2:	b12b      	cbz	r3, 8006fd0 <_dtoa_r+0xa10>
 8006fc4:	42bb      	cmp	r3, r7
 8006fc6:	d003      	beq.n	8006fd0 <_dtoa_r+0xa10>
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f000 fb3c 	bl	8007648 <_Bfree>
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 fb38 	bl	8007648 <_Bfree>
 8006fd8:	e63d      	b.n	8006c56 <_dtoa_r+0x696>
 8006fda:	2600      	movs	r6, #0
 8006fdc:	4637      	mov	r7, r6
 8006fde:	e7e2      	b.n	8006fa6 <_dtoa_r+0x9e6>
 8006fe0:	46bb      	mov	fp, r7
 8006fe2:	4637      	mov	r7, r6
 8006fe4:	e53b      	b.n	8006a5e <_dtoa_r+0x49e>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe8:	f8cd 9010 	str.w	r9, [sp, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f af12 	bne.w	8006e16 <_dtoa_r+0x856>
 8006ff2:	9d06      	ldr	r5, [sp, #24]
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	f7ff fa56 	bl	80064a8 <quorem>
 8006ffc:	9b06      	ldr	r3, [sp, #24]
 8006ffe:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007002:	f805 9b01 	strb.w	r9, [r5], #1
 8007006:	9a04      	ldr	r2, [sp, #16]
 8007008:	1aeb      	subs	r3, r5, r3
 800700a:	429a      	cmp	r2, r3
 800700c:	f300 8081 	bgt.w	8007112 <_dtoa_r+0xb52>
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	2a01      	cmp	r2, #1
 8007014:	bfac      	ite	ge
 8007016:	189b      	addge	r3, r3, r2
 8007018:	3301      	addlt	r3, #1
 800701a:	4698      	mov	r8, r3
 800701c:	2300      	movs	r3, #0
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	4651      	mov	r1, sl
 8007022:	2201      	movs	r2, #1
 8007024:	4620      	mov	r0, r4
 8007026:	f000 fc93 	bl	8007950 <__lshift>
 800702a:	4631      	mov	r1, r6
 800702c:	4682      	mov	sl, r0
 800702e:	f000 fce0 	bl	80079f2 <__mcmp>
 8007032:	2800      	cmp	r0, #0
 8007034:	dc34      	bgt.n	80070a0 <_dtoa_r+0xae0>
 8007036:	d102      	bne.n	800703e <_dtoa_r+0xa7e>
 8007038:	f019 0f01 	tst.w	r9, #1
 800703c:	d130      	bne.n	80070a0 <_dtoa_r+0xae0>
 800703e:	4645      	mov	r5, r8
 8007040:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007044:	1e6a      	subs	r2, r5, #1
 8007046:	2b30      	cmp	r3, #48	; 0x30
 8007048:	d1b3      	bne.n	8006fb2 <_dtoa_r+0x9f2>
 800704a:	4615      	mov	r5, r2
 800704c:	e7f8      	b.n	8007040 <_dtoa_r+0xa80>
 800704e:	4638      	mov	r0, r7
 8007050:	e6ff      	b.n	8006e52 <_dtoa_r+0x892>
 8007052:	2301      	movs	r3, #1
 8007054:	e722      	b.n	8006e9c <_dtoa_r+0x8dc>
 8007056:	9a02      	ldr	r2, [sp, #8]
 8007058:	2a00      	cmp	r2, #0
 800705a:	db04      	blt.n	8007066 <_dtoa_r+0xaa6>
 800705c:	d128      	bne.n	80070b0 <_dtoa_r+0xaf0>
 800705e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007060:	bb32      	cbnz	r2, 80070b0 <_dtoa_r+0xaf0>
 8007062:	9a08      	ldr	r2, [sp, #32]
 8007064:	bb22      	cbnz	r2, 80070b0 <_dtoa_r+0xaf0>
 8007066:	2b00      	cmp	r3, #0
 8007068:	f77f af32 	ble.w	8006ed0 <_dtoa_r+0x910>
 800706c:	4651      	mov	r1, sl
 800706e:	2201      	movs	r2, #1
 8007070:	4620      	mov	r0, r4
 8007072:	f000 fc6d 	bl	8007950 <__lshift>
 8007076:	4631      	mov	r1, r6
 8007078:	4682      	mov	sl, r0
 800707a:	f000 fcba 	bl	80079f2 <__mcmp>
 800707e:	2800      	cmp	r0, #0
 8007080:	dc05      	bgt.n	800708e <_dtoa_r+0xace>
 8007082:	f47f af25 	bne.w	8006ed0 <_dtoa_r+0x910>
 8007086:	f019 0f01 	tst.w	r9, #1
 800708a:	f43f af21 	beq.w	8006ed0 <_dtoa_r+0x910>
 800708e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007092:	f47f af1b 	bne.w	8006ecc <_dtoa_r+0x90c>
 8007096:	2339      	movs	r3, #57	; 0x39
 8007098:	f108 0801 	add.w	r8, r8, #1
 800709c:	f808 3c01 	strb.w	r3, [r8, #-1]
 80070a0:	4645      	mov	r5, r8
 80070a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070a6:	1e6a      	subs	r2, r5, #1
 80070a8:	2b39      	cmp	r3, #57	; 0x39
 80070aa:	d03a      	beq.n	8007122 <_dtoa_r+0xb62>
 80070ac:	3301      	adds	r3, #1
 80070ae:	e03f      	b.n	8007130 <_dtoa_r+0xb70>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f108 0501 	add.w	r5, r8, #1
 80070b6:	dd05      	ble.n	80070c4 <_dtoa_r+0xb04>
 80070b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070bc:	d0eb      	beq.n	8007096 <_dtoa_r+0xad6>
 80070be:	f109 0901 	add.w	r9, r9, #1
 80070c2:	e707      	b.n	8006ed4 <_dtoa_r+0x914>
 80070c4:	9b06      	ldr	r3, [sp, #24]
 80070c6:	9a04      	ldr	r2, [sp, #16]
 80070c8:	1aeb      	subs	r3, r5, r3
 80070ca:	4293      	cmp	r3, r2
 80070cc:	46a8      	mov	r8, r5
 80070ce:	f805 9c01 	strb.w	r9, [r5, #-1]
 80070d2:	d0a5      	beq.n	8007020 <_dtoa_r+0xa60>
 80070d4:	4651      	mov	r1, sl
 80070d6:	2300      	movs	r3, #0
 80070d8:	220a      	movs	r2, #10
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 facb 	bl	8007676 <__multadd>
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	4682      	mov	sl, r0
 80070e4:	42bb      	cmp	r3, r7
 80070e6:	f04f 020a 	mov.w	r2, #10
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	9907      	ldr	r1, [sp, #28]
 80070f0:	4620      	mov	r0, r4
 80070f2:	d104      	bne.n	80070fe <_dtoa_r+0xb3e>
 80070f4:	f000 fabf 	bl	8007676 <__multadd>
 80070f8:	9007      	str	r0, [sp, #28]
 80070fa:	4607      	mov	r7, r0
 80070fc:	e6b1      	b.n	8006e62 <_dtoa_r+0x8a2>
 80070fe:	f000 faba 	bl	8007676 <__multadd>
 8007102:	2300      	movs	r3, #0
 8007104:	9007      	str	r0, [sp, #28]
 8007106:	220a      	movs	r2, #10
 8007108:	4639      	mov	r1, r7
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fab3 	bl	8007676 <__multadd>
 8007110:	e7f3      	b.n	80070fa <_dtoa_r+0xb3a>
 8007112:	4651      	mov	r1, sl
 8007114:	2300      	movs	r3, #0
 8007116:	220a      	movs	r2, #10
 8007118:	4620      	mov	r0, r4
 800711a:	f000 faac 	bl	8007676 <__multadd>
 800711e:	4682      	mov	sl, r0
 8007120:	e768      	b.n	8006ff4 <_dtoa_r+0xa34>
 8007122:	9b06      	ldr	r3, [sp, #24]
 8007124:	4293      	cmp	r3, r2
 8007126:	d105      	bne.n	8007134 <_dtoa_r+0xb74>
 8007128:	2331      	movs	r3, #49	; 0x31
 800712a:	9a06      	ldr	r2, [sp, #24]
 800712c:	f10b 0b01 	add.w	fp, fp, #1
 8007130:	7013      	strb	r3, [r2, #0]
 8007132:	e73e      	b.n	8006fb2 <_dtoa_r+0x9f2>
 8007134:	4615      	mov	r5, r2
 8007136:	e7b4      	b.n	80070a2 <_dtoa_r+0xae2>
 8007138:	4b09      	ldr	r3, [pc, #36]	; (8007160 <_dtoa_r+0xba0>)
 800713a:	f7ff baa3 	b.w	8006684 <_dtoa_r+0xc4>
 800713e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007140:	2b00      	cmp	r3, #0
 8007142:	f47f aa7d 	bne.w	8006640 <_dtoa_r+0x80>
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <_dtoa_r+0xba4>)
 8007148:	f7ff ba9c 	b.w	8006684 <_dtoa_r+0xc4>
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f73f af4f 	bgt.w	8006ff2 <_dtoa_r+0xa32>
 8007154:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007156:	2b02      	cmp	r3, #2
 8007158:	f77f af4b 	ble.w	8006ff2 <_dtoa_r+0xa32>
 800715c:	e714      	b.n	8006f88 <_dtoa_r+0x9c8>
 800715e:	bf00      	nop
 8007160:	0800866a 	.word	0x0800866a
 8007164:	0800868c 	.word	0x0800868c

08007168 <_localeconv_r>:
 8007168:	4b04      	ldr	r3, [pc, #16]	; (800717c <_localeconv_r+0x14>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a18      	ldr	r0, [r3, #32]
 800716e:	4b04      	ldr	r3, [pc, #16]	; (8007180 <_localeconv_r+0x18>)
 8007170:	2800      	cmp	r0, #0
 8007172:	bf08      	it	eq
 8007174:	4618      	moveq	r0, r3
 8007176:	30f0      	adds	r0, #240	; 0xf0
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000010 	.word	0x20000010
 8007180:	20000514 	.word	0x20000514

08007184 <malloc>:
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <malloc+0xc>)
 8007186:	4601      	mov	r1, r0
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f000 b803 	b.w	8007194 <_malloc_r>
 800718e:	bf00      	nop
 8007190:	20000010 	.word	0x20000010

08007194 <_malloc_r>:
 8007194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	f101 040b 	add.w	r4, r1, #11
 800719c:	2c16      	cmp	r4, #22
 800719e:	4681      	mov	r9, r0
 80071a0:	d907      	bls.n	80071b2 <_malloc_r+0x1e>
 80071a2:	f034 0407 	bics.w	r4, r4, #7
 80071a6:	d505      	bpl.n	80071b4 <_malloc_r+0x20>
 80071a8:	230c      	movs	r3, #12
 80071aa:	f8c9 3000 	str.w	r3, [r9]
 80071ae:	2600      	movs	r6, #0
 80071b0:	e131      	b.n	8007416 <_malloc_r+0x282>
 80071b2:	2410      	movs	r4, #16
 80071b4:	428c      	cmp	r4, r1
 80071b6:	d3f7      	bcc.n	80071a8 <_malloc_r+0x14>
 80071b8:	4648      	mov	r0, r9
 80071ba:	f000 fa05 	bl	80075c8 <__malloc_lock>
 80071be:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80071c2:	4d9b      	ldr	r5, [pc, #620]	; (8007430 <_malloc_r+0x29c>)
 80071c4:	d236      	bcs.n	8007234 <_malloc_r+0xa0>
 80071c6:	f104 0208 	add.w	r2, r4, #8
 80071ca:	442a      	add	r2, r5
 80071cc:	6856      	ldr	r6, [r2, #4]
 80071ce:	f1a2 0108 	sub.w	r1, r2, #8
 80071d2:	428e      	cmp	r6, r1
 80071d4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80071d8:	d102      	bne.n	80071e0 <_malloc_r+0x4c>
 80071da:	68d6      	ldr	r6, [r2, #12]
 80071dc:	42b2      	cmp	r2, r6
 80071de:	d010      	beq.n	8007202 <_malloc_r+0x6e>
 80071e0:	6873      	ldr	r3, [r6, #4]
 80071e2:	68f2      	ldr	r2, [r6, #12]
 80071e4:	68b1      	ldr	r1, [r6, #8]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	60ca      	str	r2, [r1, #12]
 80071ec:	4433      	add	r3, r6
 80071ee:	6091      	str	r1, [r2, #8]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	605a      	str	r2, [r3, #4]
 80071f8:	4648      	mov	r0, r9
 80071fa:	f000 f9eb 	bl	80075d4 <__malloc_unlock>
 80071fe:	3608      	adds	r6, #8
 8007200:	e109      	b.n	8007416 <_malloc_r+0x282>
 8007202:	3302      	adds	r3, #2
 8007204:	4a8b      	ldr	r2, [pc, #556]	; (8007434 <_malloc_r+0x2a0>)
 8007206:	692e      	ldr	r6, [r5, #16]
 8007208:	4611      	mov	r1, r2
 800720a:	4296      	cmp	r6, r2
 800720c:	d06d      	beq.n	80072ea <_malloc_r+0x156>
 800720e:	6870      	ldr	r0, [r6, #4]
 8007210:	f020 0003 	bic.w	r0, r0, #3
 8007214:	1b07      	subs	r7, r0, r4
 8007216:	2f0f      	cmp	r7, #15
 8007218:	dd47      	ble.n	80072aa <_malloc_r+0x116>
 800721a:	1933      	adds	r3, r6, r4
 800721c:	f044 0401 	orr.w	r4, r4, #1
 8007220:	6074      	str	r4, [r6, #4]
 8007222:	616b      	str	r3, [r5, #20]
 8007224:	612b      	str	r3, [r5, #16]
 8007226:	60da      	str	r2, [r3, #12]
 8007228:	609a      	str	r2, [r3, #8]
 800722a:	f047 0201 	orr.w	r2, r7, #1
 800722e:	605a      	str	r2, [r3, #4]
 8007230:	5037      	str	r7, [r6, r0]
 8007232:	e7e1      	b.n	80071f8 <_malloc_r+0x64>
 8007234:	0a63      	lsrs	r3, r4, #9
 8007236:	d02a      	beq.n	800728e <_malloc_r+0xfa>
 8007238:	2b04      	cmp	r3, #4
 800723a:	d812      	bhi.n	8007262 <_malloc_r+0xce>
 800723c:	09a3      	lsrs	r3, r4, #6
 800723e:	3338      	adds	r3, #56	; 0x38
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007246:	6856      	ldr	r6, [r2, #4]
 8007248:	f1a2 0008 	sub.w	r0, r2, #8
 800724c:	4286      	cmp	r6, r0
 800724e:	d006      	beq.n	800725e <_malloc_r+0xca>
 8007250:	6872      	ldr	r2, [r6, #4]
 8007252:	f022 0203 	bic.w	r2, r2, #3
 8007256:	1b11      	subs	r1, r2, r4
 8007258:	290f      	cmp	r1, #15
 800725a:	dd1c      	ble.n	8007296 <_malloc_r+0x102>
 800725c:	3b01      	subs	r3, #1
 800725e:	3301      	adds	r3, #1
 8007260:	e7d0      	b.n	8007204 <_malloc_r+0x70>
 8007262:	2b14      	cmp	r3, #20
 8007264:	d801      	bhi.n	800726a <_malloc_r+0xd6>
 8007266:	335b      	adds	r3, #91	; 0x5b
 8007268:	e7ea      	b.n	8007240 <_malloc_r+0xac>
 800726a:	2b54      	cmp	r3, #84	; 0x54
 800726c:	d802      	bhi.n	8007274 <_malloc_r+0xe0>
 800726e:	0b23      	lsrs	r3, r4, #12
 8007270:	336e      	adds	r3, #110	; 0x6e
 8007272:	e7e5      	b.n	8007240 <_malloc_r+0xac>
 8007274:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007278:	d802      	bhi.n	8007280 <_malloc_r+0xec>
 800727a:	0be3      	lsrs	r3, r4, #15
 800727c:	3377      	adds	r3, #119	; 0x77
 800727e:	e7df      	b.n	8007240 <_malloc_r+0xac>
 8007280:	f240 5254 	movw	r2, #1364	; 0x554
 8007284:	4293      	cmp	r3, r2
 8007286:	d804      	bhi.n	8007292 <_malloc_r+0xfe>
 8007288:	0ca3      	lsrs	r3, r4, #18
 800728a:	337c      	adds	r3, #124	; 0x7c
 800728c:	e7d8      	b.n	8007240 <_malloc_r+0xac>
 800728e:	233f      	movs	r3, #63	; 0x3f
 8007290:	e7d6      	b.n	8007240 <_malloc_r+0xac>
 8007292:	237e      	movs	r3, #126	; 0x7e
 8007294:	e7d4      	b.n	8007240 <_malloc_r+0xac>
 8007296:	2900      	cmp	r1, #0
 8007298:	68f1      	ldr	r1, [r6, #12]
 800729a:	db04      	blt.n	80072a6 <_malloc_r+0x112>
 800729c:	68b3      	ldr	r3, [r6, #8]
 800729e:	60d9      	str	r1, [r3, #12]
 80072a0:	608b      	str	r3, [r1, #8]
 80072a2:	18b3      	adds	r3, r6, r2
 80072a4:	e7a4      	b.n	80071f0 <_malloc_r+0x5c>
 80072a6:	460e      	mov	r6, r1
 80072a8:	e7d0      	b.n	800724c <_malloc_r+0xb8>
 80072aa:	2f00      	cmp	r7, #0
 80072ac:	616a      	str	r2, [r5, #20]
 80072ae:	612a      	str	r2, [r5, #16]
 80072b0:	db05      	blt.n	80072be <_malloc_r+0x12a>
 80072b2:	4430      	add	r0, r6
 80072b4:	6843      	ldr	r3, [r0, #4]
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6043      	str	r3, [r0, #4]
 80072bc:	e79c      	b.n	80071f8 <_malloc_r+0x64>
 80072be:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80072c2:	d244      	bcs.n	800734e <_malloc_r+0x1ba>
 80072c4:	2201      	movs	r2, #1
 80072c6:	08c0      	lsrs	r0, r0, #3
 80072c8:	1087      	asrs	r7, r0, #2
 80072ca:	fa02 f707 	lsl.w	r7, r2, r7
 80072ce:	686a      	ldr	r2, [r5, #4]
 80072d0:	3001      	adds	r0, #1
 80072d2:	433a      	orrs	r2, r7
 80072d4:	606a      	str	r2, [r5, #4]
 80072d6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80072da:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80072de:	3a08      	subs	r2, #8
 80072e0:	60f2      	str	r2, [r6, #12]
 80072e2:	60b7      	str	r7, [r6, #8]
 80072e4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80072e8:	60fe      	str	r6, [r7, #12]
 80072ea:	2001      	movs	r0, #1
 80072ec:	109a      	asrs	r2, r3, #2
 80072ee:	fa00 f202 	lsl.w	r2, r0, r2
 80072f2:	6868      	ldr	r0, [r5, #4]
 80072f4:	4282      	cmp	r2, r0
 80072f6:	f200 809f 	bhi.w	8007438 <_malloc_r+0x2a4>
 80072fa:	4202      	tst	r2, r0
 80072fc:	d106      	bne.n	800730c <_malloc_r+0x178>
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	0052      	lsls	r2, r2, #1
 8007304:	4202      	tst	r2, r0
 8007306:	f103 0304 	add.w	r3, r3, #4
 800730a:	d0fa      	beq.n	8007302 <_malloc_r+0x16e>
 800730c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007310:	46e0      	mov	r8, ip
 8007312:	469e      	mov	lr, r3
 8007314:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007318:	4546      	cmp	r6, r8
 800731a:	d153      	bne.n	80073c4 <_malloc_r+0x230>
 800731c:	f10e 0e01 	add.w	lr, lr, #1
 8007320:	f01e 0f03 	tst.w	lr, #3
 8007324:	f108 0808 	add.w	r8, r8, #8
 8007328:	d1f4      	bne.n	8007314 <_malloc_r+0x180>
 800732a:	0798      	lsls	r0, r3, #30
 800732c:	d179      	bne.n	8007422 <_malloc_r+0x28e>
 800732e:	686b      	ldr	r3, [r5, #4]
 8007330:	ea23 0302 	bic.w	r3, r3, r2
 8007334:	606b      	str	r3, [r5, #4]
 8007336:	6868      	ldr	r0, [r5, #4]
 8007338:	0052      	lsls	r2, r2, #1
 800733a:	4282      	cmp	r2, r0
 800733c:	d87c      	bhi.n	8007438 <_malloc_r+0x2a4>
 800733e:	2a00      	cmp	r2, #0
 8007340:	d07a      	beq.n	8007438 <_malloc_r+0x2a4>
 8007342:	4673      	mov	r3, lr
 8007344:	4202      	tst	r2, r0
 8007346:	d1e1      	bne.n	800730c <_malloc_r+0x178>
 8007348:	3304      	adds	r3, #4
 800734a:	0052      	lsls	r2, r2, #1
 800734c:	e7fa      	b.n	8007344 <_malloc_r+0x1b0>
 800734e:	0a42      	lsrs	r2, r0, #9
 8007350:	2a04      	cmp	r2, #4
 8007352:	d815      	bhi.n	8007380 <_malloc_r+0x1ec>
 8007354:	0982      	lsrs	r2, r0, #6
 8007356:	3238      	adds	r2, #56	; 0x38
 8007358:	1c57      	adds	r7, r2, #1
 800735a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800735e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007362:	45be      	cmp	lr, r7
 8007364:	d126      	bne.n	80073b4 <_malloc_r+0x220>
 8007366:	2001      	movs	r0, #1
 8007368:	1092      	asrs	r2, r2, #2
 800736a:	fa00 f202 	lsl.w	r2, r0, r2
 800736e:	6868      	ldr	r0, [r5, #4]
 8007370:	4310      	orrs	r0, r2
 8007372:	6068      	str	r0, [r5, #4]
 8007374:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007378:	60b7      	str	r7, [r6, #8]
 800737a:	f8ce 6008 	str.w	r6, [lr, #8]
 800737e:	e7b3      	b.n	80072e8 <_malloc_r+0x154>
 8007380:	2a14      	cmp	r2, #20
 8007382:	d801      	bhi.n	8007388 <_malloc_r+0x1f4>
 8007384:	325b      	adds	r2, #91	; 0x5b
 8007386:	e7e7      	b.n	8007358 <_malloc_r+0x1c4>
 8007388:	2a54      	cmp	r2, #84	; 0x54
 800738a:	d802      	bhi.n	8007392 <_malloc_r+0x1fe>
 800738c:	0b02      	lsrs	r2, r0, #12
 800738e:	326e      	adds	r2, #110	; 0x6e
 8007390:	e7e2      	b.n	8007358 <_malloc_r+0x1c4>
 8007392:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007396:	d802      	bhi.n	800739e <_malloc_r+0x20a>
 8007398:	0bc2      	lsrs	r2, r0, #15
 800739a:	3277      	adds	r2, #119	; 0x77
 800739c:	e7dc      	b.n	8007358 <_malloc_r+0x1c4>
 800739e:	f240 5754 	movw	r7, #1364	; 0x554
 80073a2:	42ba      	cmp	r2, r7
 80073a4:	bf9a      	itte	ls
 80073a6:	0c82      	lsrls	r2, r0, #18
 80073a8:	327c      	addls	r2, #124	; 0x7c
 80073aa:	227e      	movhi	r2, #126	; 0x7e
 80073ac:	e7d4      	b.n	8007358 <_malloc_r+0x1c4>
 80073ae:	68bf      	ldr	r7, [r7, #8]
 80073b0:	45be      	cmp	lr, r7
 80073b2:	d004      	beq.n	80073be <_malloc_r+0x22a>
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	f022 0203 	bic.w	r2, r2, #3
 80073ba:	4290      	cmp	r0, r2
 80073bc:	d3f7      	bcc.n	80073ae <_malloc_r+0x21a>
 80073be:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80073c2:	e7d7      	b.n	8007374 <_malloc_r+0x1e0>
 80073c4:	6870      	ldr	r0, [r6, #4]
 80073c6:	68f7      	ldr	r7, [r6, #12]
 80073c8:	f020 0003 	bic.w	r0, r0, #3
 80073cc:	eba0 0a04 	sub.w	sl, r0, r4
 80073d0:	f1ba 0f0f 	cmp.w	sl, #15
 80073d4:	dd10      	ble.n	80073f8 <_malloc_r+0x264>
 80073d6:	68b2      	ldr	r2, [r6, #8]
 80073d8:	1933      	adds	r3, r6, r4
 80073da:	f044 0401 	orr.w	r4, r4, #1
 80073de:	6074      	str	r4, [r6, #4]
 80073e0:	60d7      	str	r7, [r2, #12]
 80073e2:	60ba      	str	r2, [r7, #8]
 80073e4:	f04a 0201 	orr.w	r2, sl, #1
 80073e8:	616b      	str	r3, [r5, #20]
 80073ea:	612b      	str	r3, [r5, #16]
 80073ec:	60d9      	str	r1, [r3, #12]
 80073ee:	6099      	str	r1, [r3, #8]
 80073f0:	605a      	str	r2, [r3, #4]
 80073f2:	f846 a000 	str.w	sl, [r6, r0]
 80073f6:	e6ff      	b.n	80071f8 <_malloc_r+0x64>
 80073f8:	f1ba 0f00 	cmp.w	sl, #0
 80073fc:	db0f      	blt.n	800741e <_malloc_r+0x28a>
 80073fe:	4430      	add	r0, r6
 8007400:	6843      	ldr	r3, [r0, #4]
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	6043      	str	r3, [r0, #4]
 8007408:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800740c:	4648      	mov	r0, r9
 800740e:	60df      	str	r7, [r3, #12]
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	f000 f8df 	bl	80075d4 <__malloc_unlock>
 8007416:	4630      	mov	r0, r6
 8007418:	b003      	add	sp, #12
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	463e      	mov	r6, r7
 8007420:	e77a      	b.n	8007318 <_malloc_r+0x184>
 8007422:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007426:	3b01      	subs	r3, #1
 8007428:	4584      	cmp	ip, r0
 800742a:	f43f af7e 	beq.w	800732a <_malloc_r+0x196>
 800742e:	e782      	b.n	8007336 <_malloc_r+0x1a2>
 8007430:	20000104 	.word	0x20000104
 8007434:	2000010c 	.word	0x2000010c
 8007438:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800743c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007440:	f026 0603 	bic.w	r6, r6, #3
 8007444:	42b4      	cmp	r4, r6
 8007446:	d803      	bhi.n	8007450 <_malloc_r+0x2bc>
 8007448:	1b33      	subs	r3, r6, r4
 800744a:	2b0f      	cmp	r3, #15
 800744c:	f300 8095 	bgt.w	800757a <_malloc_r+0x3e6>
 8007450:	4a4f      	ldr	r2, [pc, #316]	; (8007590 <_malloc_r+0x3fc>)
 8007452:	eb0b 0306 	add.w	r3, fp, r6
 8007456:	6817      	ldr	r7, [r2, #0]
 8007458:	4a4e      	ldr	r2, [pc, #312]	; (8007594 <_malloc_r+0x400>)
 800745a:	3710      	adds	r7, #16
 800745c:	6811      	ldr	r1, [r2, #0]
 800745e:	4427      	add	r7, r4
 8007460:	3101      	adds	r1, #1
 8007462:	d005      	beq.n	8007470 <_malloc_r+0x2dc>
 8007464:	494c      	ldr	r1, [pc, #304]	; (8007598 <_malloc_r+0x404>)
 8007466:	3901      	subs	r1, #1
 8007468:	440f      	add	r7, r1
 800746a:	3101      	adds	r1, #1
 800746c:	4249      	negs	r1, r1
 800746e:	400f      	ands	r7, r1
 8007470:	4639      	mov	r1, r7
 8007472:	4648      	mov	r0, r9
 8007474:	9201      	str	r2, [sp, #4]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	f000 fb84 	bl	8007b84 <_sbrk_r>
 800747c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007480:	4680      	mov	r8, r0
 8007482:	d055      	beq.n	8007530 <_malloc_r+0x39c>
 8007484:	9b00      	ldr	r3, [sp, #0]
 8007486:	9a01      	ldr	r2, [sp, #4]
 8007488:	4283      	cmp	r3, r0
 800748a:	d901      	bls.n	8007490 <_malloc_r+0x2fc>
 800748c:	45ab      	cmp	fp, r5
 800748e:	d14f      	bne.n	8007530 <_malloc_r+0x39c>
 8007490:	4842      	ldr	r0, [pc, #264]	; (800759c <_malloc_r+0x408>)
 8007492:	4543      	cmp	r3, r8
 8007494:	6801      	ldr	r1, [r0, #0]
 8007496:	4682      	mov	sl, r0
 8007498:	eb07 0e01 	add.w	lr, r7, r1
 800749c:	f8c0 e000 	str.w	lr, [r0]
 80074a0:	493f      	ldr	r1, [pc, #252]	; (80075a0 <_malloc_r+0x40c>)
 80074a2:	d113      	bne.n	80074cc <_malloc_r+0x338>
 80074a4:	420b      	tst	r3, r1
 80074a6:	d111      	bne.n	80074cc <_malloc_r+0x338>
 80074a8:	68ab      	ldr	r3, [r5, #8]
 80074aa:	443e      	add	r6, r7
 80074ac:	f046 0601 	orr.w	r6, r6, #1
 80074b0:	605e      	str	r6, [r3, #4]
 80074b2:	4a3c      	ldr	r2, [pc, #240]	; (80075a4 <_malloc_r+0x410>)
 80074b4:	f8da 3000 	ldr.w	r3, [sl]
 80074b8:	6811      	ldr	r1, [r2, #0]
 80074ba:	428b      	cmp	r3, r1
 80074bc:	bf88      	it	hi
 80074be:	6013      	strhi	r3, [r2, #0]
 80074c0:	4a39      	ldr	r2, [pc, #228]	; (80075a8 <_malloc_r+0x414>)
 80074c2:	6811      	ldr	r1, [r2, #0]
 80074c4:	428b      	cmp	r3, r1
 80074c6:	bf88      	it	hi
 80074c8:	6013      	strhi	r3, [r2, #0]
 80074ca:	e031      	b.n	8007530 <_malloc_r+0x39c>
 80074cc:	6810      	ldr	r0, [r2, #0]
 80074ce:	3001      	adds	r0, #1
 80074d0:	bf1b      	ittet	ne
 80074d2:	eba8 0303 	subne.w	r3, r8, r3
 80074d6:	4473      	addne	r3, lr
 80074d8:	f8c2 8000 	streq.w	r8, [r2]
 80074dc:	f8ca 3000 	strne.w	r3, [sl]
 80074e0:	f018 0007 	ands.w	r0, r8, #7
 80074e4:	bf1c      	itt	ne
 80074e6:	f1c0 0008 	rsbne	r0, r0, #8
 80074ea:	4480      	addne	r8, r0
 80074ec:	4b2a      	ldr	r3, [pc, #168]	; (8007598 <_malloc_r+0x404>)
 80074ee:	4447      	add	r7, r8
 80074f0:	4418      	add	r0, r3
 80074f2:	400f      	ands	r7, r1
 80074f4:	1bc7      	subs	r7, r0, r7
 80074f6:	4639      	mov	r1, r7
 80074f8:	4648      	mov	r0, r9
 80074fa:	f000 fb43 	bl	8007b84 <_sbrk_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	bf04      	itt	eq
 8007502:	4640      	moveq	r0, r8
 8007504:	2700      	moveq	r7, #0
 8007506:	f8da 3000 	ldr.w	r3, [sl]
 800750a:	eba0 0008 	sub.w	r0, r0, r8
 800750e:	443b      	add	r3, r7
 8007510:	4407      	add	r7, r0
 8007512:	f047 0701 	orr.w	r7, r7, #1
 8007516:	45ab      	cmp	fp, r5
 8007518:	f8c5 8008 	str.w	r8, [r5, #8]
 800751c:	f8ca 3000 	str.w	r3, [sl]
 8007520:	f8c8 7004 	str.w	r7, [r8, #4]
 8007524:	d0c5      	beq.n	80074b2 <_malloc_r+0x31e>
 8007526:	2e0f      	cmp	r6, #15
 8007528:	d810      	bhi.n	800754c <_malloc_r+0x3b8>
 800752a:	2301      	movs	r3, #1
 800752c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007530:	68ab      	ldr	r3, [r5, #8]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	f022 0203 	bic.w	r2, r2, #3
 8007538:	4294      	cmp	r4, r2
 800753a:	eba2 0304 	sub.w	r3, r2, r4
 800753e:	d801      	bhi.n	8007544 <_malloc_r+0x3b0>
 8007540:	2b0f      	cmp	r3, #15
 8007542:	dc1a      	bgt.n	800757a <_malloc_r+0x3e6>
 8007544:	4648      	mov	r0, r9
 8007546:	f000 f845 	bl	80075d4 <__malloc_unlock>
 800754a:	e630      	b.n	80071ae <_malloc_r+0x1a>
 800754c:	2205      	movs	r2, #5
 800754e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007552:	3e0c      	subs	r6, #12
 8007554:	f026 0607 	bic.w	r6, r6, #7
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	4333      	orrs	r3, r6
 800755e:	f8cb 3004 	str.w	r3, [fp, #4]
 8007562:	2e0f      	cmp	r6, #15
 8007564:	eb0b 0306 	add.w	r3, fp, r6
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	609a      	str	r2, [r3, #8]
 800756c:	d9a1      	bls.n	80074b2 <_malloc_r+0x31e>
 800756e:	f10b 0108 	add.w	r1, fp, #8
 8007572:	4648      	mov	r0, r9
 8007574:	f000 fc14 	bl	8007da0 <_free_r>
 8007578:	e79b      	b.n	80074b2 <_malloc_r+0x31e>
 800757a:	68ae      	ldr	r6, [r5, #8]
 800757c:	f044 0201 	orr.w	r2, r4, #1
 8007580:	f043 0301 	orr.w	r3, r3, #1
 8007584:	4434      	add	r4, r6
 8007586:	6072      	str	r2, [r6, #4]
 8007588:	60ac      	str	r4, [r5, #8]
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	e634      	b.n	80071f8 <_malloc_r+0x64>
 800758e:	bf00      	nop
 8007590:	200007a8 	.word	0x200007a8
 8007594:	2000050c 	.word	0x2000050c
 8007598:	00001000 	.word	0x00001000
 800759c:	20000778 	.word	0x20000778
 80075a0:	00000fff 	.word	0x00000fff
 80075a4:	200007a0 	.word	0x200007a0
 80075a8:	200007a4 	.word	0x200007a4

080075ac <memchr>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	b2c9      	uxtb	r1, r1
 80075b0:	4402      	add	r2, r0
 80075b2:	4290      	cmp	r0, r2
 80075b4:	4603      	mov	r3, r0
 80075b6:	d101      	bne.n	80075bc <memchr+0x10>
 80075b8:	2000      	movs	r0, #0
 80075ba:	bd10      	pop	{r4, pc}
 80075bc:	781c      	ldrb	r4, [r3, #0]
 80075be:	3001      	adds	r0, #1
 80075c0:	428c      	cmp	r4, r1
 80075c2:	d1f6      	bne.n	80075b2 <memchr+0x6>
 80075c4:	4618      	mov	r0, r3
 80075c6:	bd10      	pop	{r4, pc}

080075c8 <__malloc_lock>:
 80075c8:	4801      	ldr	r0, [pc, #4]	; (80075d0 <__malloc_lock+0x8>)
 80075ca:	f000 bca5 	b.w	8007f18 <__retarget_lock_acquire_recursive>
 80075ce:	bf00      	nop
 80075d0:	200007b4 	.word	0x200007b4

080075d4 <__malloc_unlock>:
 80075d4:	4801      	ldr	r0, [pc, #4]	; (80075dc <__malloc_unlock+0x8>)
 80075d6:	f000 bca0 	b.w	8007f1a <__retarget_lock_release_recursive>
 80075da:	bf00      	nop
 80075dc:	200007b4 	.word	0x200007b4

080075e0 <_Balloc>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075e4:	4604      	mov	r4, r0
 80075e6:	460e      	mov	r6, r1
 80075e8:	b93d      	cbnz	r5, 80075fa <_Balloc+0x1a>
 80075ea:	2010      	movs	r0, #16
 80075ec:	f7ff fdca 	bl	8007184 <malloc>
 80075f0:	6260      	str	r0, [r4, #36]	; 0x24
 80075f2:	6045      	str	r5, [r0, #4]
 80075f4:	6085      	str	r5, [r0, #8]
 80075f6:	6005      	str	r5, [r0, #0]
 80075f8:	60c5      	str	r5, [r0, #12]
 80075fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80075fc:	68eb      	ldr	r3, [r5, #12]
 80075fe:	b183      	cbz	r3, 8007622 <_Balloc+0x42>
 8007600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007608:	b9b8      	cbnz	r0, 800763a <_Balloc+0x5a>
 800760a:	2101      	movs	r1, #1
 800760c:	fa01 f506 	lsl.w	r5, r1, r6
 8007610:	1d6a      	adds	r2, r5, #5
 8007612:	0092      	lsls	r2, r2, #2
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fb3f 	bl	8007c98 <_calloc_r>
 800761a:	b160      	cbz	r0, 8007636 <_Balloc+0x56>
 800761c:	6046      	str	r6, [r0, #4]
 800761e:	6085      	str	r5, [r0, #8]
 8007620:	e00e      	b.n	8007640 <_Balloc+0x60>
 8007622:	2221      	movs	r2, #33	; 0x21
 8007624:	2104      	movs	r1, #4
 8007626:	4620      	mov	r0, r4
 8007628:	f000 fb36 	bl	8007c98 <_calloc_r>
 800762c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800762e:	60e8      	str	r0, [r5, #12]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e4      	bne.n	8007600 <_Balloc+0x20>
 8007636:	2000      	movs	r0, #0
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	6802      	ldr	r2, [r0, #0]
 800763c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007640:	2300      	movs	r3, #0
 8007642:	6103      	str	r3, [r0, #16]
 8007644:	60c3      	str	r3, [r0, #12]
 8007646:	bd70      	pop	{r4, r5, r6, pc}

08007648 <_Bfree>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800764c:	4606      	mov	r6, r0
 800764e:	460d      	mov	r5, r1
 8007650:	b93c      	cbnz	r4, 8007662 <_Bfree+0x1a>
 8007652:	2010      	movs	r0, #16
 8007654:	f7ff fd96 	bl	8007184 <malloc>
 8007658:	6270      	str	r0, [r6, #36]	; 0x24
 800765a:	6044      	str	r4, [r0, #4]
 800765c:	6084      	str	r4, [r0, #8]
 800765e:	6004      	str	r4, [r0, #0]
 8007660:	60c4      	str	r4, [r0, #12]
 8007662:	b13d      	cbz	r5, 8007674 <_Bfree+0x2c>
 8007664:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007666:	686a      	ldr	r2, [r5, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800766e:	6029      	str	r1, [r5, #0]
 8007670:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007674:	bd70      	pop	{r4, r5, r6, pc}

08007676 <__multadd>:
 8007676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	461f      	mov	r7, r3
 800767c:	4606      	mov	r6, r0
 800767e:	460c      	mov	r4, r1
 8007680:	2300      	movs	r3, #0
 8007682:	690d      	ldr	r5, [r1, #16]
 8007684:	f101 0e14 	add.w	lr, r1, #20
 8007688:	f8de 0000 	ldr.w	r0, [lr]
 800768c:	3301      	adds	r3, #1
 800768e:	b281      	uxth	r1, r0
 8007690:	fb02 7101 	mla	r1, r2, r1, r7
 8007694:	0c00      	lsrs	r0, r0, #16
 8007696:	0c0f      	lsrs	r7, r1, #16
 8007698:	fb02 7000 	mla	r0, r2, r0, r7
 800769c:	b289      	uxth	r1, r1
 800769e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80076a2:	429d      	cmp	r5, r3
 80076a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80076a8:	f84e 1b04 	str.w	r1, [lr], #4
 80076ac:	dcec      	bgt.n	8007688 <__multadd+0x12>
 80076ae:	b1d7      	cbz	r7, 80076e6 <__multadd+0x70>
 80076b0:	68a3      	ldr	r3, [r4, #8]
 80076b2:	429d      	cmp	r5, r3
 80076b4:	db12      	blt.n	80076dc <__multadd+0x66>
 80076b6:	6861      	ldr	r1, [r4, #4]
 80076b8:	4630      	mov	r0, r6
 80076ba:	3101      	adds	r1, #1
 80076bc:	f7ff ff90 	bl	80075e0 <_Balloc>
 80076c0:	4680      	mov	r8, r0
 80076c2:	6922      	ldr	r2, [r4, #16]
 80076c4:	f104 010c 	add.w	r1, r4, #12
 80076c8:	3202      	adds	r2, #2
 80076ca:	0092      	lsls	r2, r2, #2
 80076cc:	300c      	adds	r0, #12
 80076ce:	f7fd fee3 	bl	8005498 <memcpy>
 80076d2:	4621      	mov	r1, r4
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7ff ffb7 	bl	8007648 <_Bfree>
 80076da:	4644      	mov	r4, r8
 80076dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076e0:	3501      	adds	r5, #1
 80076e2:	615f      	str	r7, [r3, #20]
 80076e4:	6125      	str	r5, [r4, #16]
 80076e6:	4620      	mov	r0, r4
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076ec <__hi0bits>:
 80076ec:	0c02      	lsrs	r2, r0, #16
 80076ee:	0412      	lsls	r2, r2, #16
 80076f0:	4603      	mov	r3, r0
 80076f2:	b9b2      	cbnz	r2, 8007722 <__hi0bits+0x36>
 80076f4:	0403      	lsls	r3, r0, #16
 80076f6:	2010      	movs	r0, #16
 80076f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076fc:	bf04      	itt	eq
 80076fe:	021b      	lsleq	r3, r3, #8
 8007700:	3008      	addeq	r0, #8
 8007702:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007706:	bf04      	itt	eq
 8007708:	011b      	lsleq	r3, r3, #4
 800770a:	3004      	addeq	r0, #4
 800770c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007710:	bf04      	itt	eq
 8007712:	009b      	lsleq	r3, r3, #2
 8007714:	3002      	addeq	r0, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	db06      	blt.n	8007728 <__hi0bits+0x3c>
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	d503      	bpl.n	8007726 <__hi0bits+0x3a>
 800771e:	3001      	adds	r0, #1
 8007720:	4770      	bx	lr
 8007722:	2000      	movs	r0, #0
 8007724:	e7e8      	b.n	80076f8 <__hi0bits+0xc>
 8007726:	2020      	movs	r0, #32
 8007728:	4770      	bx	lr

0800772a <__lo0bits>:
 800772a:	6803      	ldr	r3, [r0, #0]
 800772c:	4601      	mov	r1, r0
 800772e:	f013 0207 	ands.w	r2, r3, #7
 8007732:	d00b      	beq.n	800774c <__lo0bits+0x22>
 8007734:	07da      	lsls	r2, r3, #31
 8007736:	d423      	bmi.n	8007780 <__lo0bits+0x56>
 8007738:	0798      	lsls	r0, r3, #30
 800773a:	bf49      	itett	mi
 800773c:	085b      	lsrmi	r3, r3, #1
 800773e:	089b      	lsrpl	r3, r3, #2
 8007740:	2001      	movmi	r0, #1
 8007742:	600b      	strmi	r3, [r1, #0]
 8007744:	bf5c      	itt	pl
 8007746:	600b      	strpl	r3, [r1, #0]
 8007748:	2002      	movpl	r0, #2
 800774a:	4770      	bx	lr
 800774c:	b298      	uxth	r0, r3
 800774e:	b9a8      	cbnz	r0, 800777c <__lo0bits+0x52>
 8007750:	2010      	movs	r0, #16
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007758:	bf04      	itt	eq
 800775a:	0a1b      	lsreq	r3, r3, #8
 800775c:	3008      	addeq	r0, #8
 800775e:	071a      	lsls	r2, r3, #28
 8007760:	bf04      	itt	eq
 8007762:	091b      	lsreq	r3, r3, #4
 8007764:	3004      	addeq	r0, #4
 8007766:	079a      	lsls	r2, r3, #30
 8007768:	bf04      	itt	eq
 800776a:	089b      	lsreq	r3, r3, #2
 800776c:	3002      	addeq	r0, #2
 800776e:	07da      	lsls	r2, r3, #31
 8007770:	d402      	bmi.n	8007778 <__lo0bits+0x4e>
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	d006      	beq.n	8007784 <__lo0bits+0x5a>
 8007776:	3001      	adds	r0, #1
 8007778:	600b      	str	r3, [r1, #0]
 800777a:	4770      	bx	lr
 800777c:	4610      	mov	r0, r2
 800777e:	e7e9      	b.n	8007754 <__lo0bits+0x2a>
 8007780:	2000      	movs	r0, #0
 8007782:	4770      	bx	lr
 8007784:	2020      	movs	r0, #32
 8007786:	4770      	bx	lr

08007788 <__i2b>:
 8007788:	b510      	push	{r4, lr}
 800778a:	460c      	mov	r4, r1
 800778c:	2101      	movs	r1, #1
 800778e:	f7ff ff27 	bl	80075e0 <_Balloc>
 8007792:	2201      	movs	r2, #1
 8007794:	6144      	str	r4, [r0, #20]
 8007796:	6102      	str	r2, [r0, #16]
 8007798:	bd10      	pop	{r4, pc}

0800779a <__multiply>:
 800779a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779e:	4614      	mov	r4, r2
 80077a0:	690a      	ldr	r2, [r1, #16]
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	4689      	mov	r9, r1
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bfbe      	ittt	lt
 80077aa:	460b      	movlt	r3, r1
 80077ac:	46a1      	movlt	r9, r4
 80077ae:	461c      	movlt	r4, r3
 80077b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80077bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077c0:	eb07 060a 	add.w	r6, r7, sl
 80077c4:	429e      	cmp	r6, r3
 80077c6:	bfc8      	it	gt
 80077c8:	3101      	addgt	r1, #1
 80077ca:	f7ff ff09 	bl	80075e0 <_Balloc>
 80077ce:	f100 0514 	add.w	r5, r0, #20
 80077d2:	462b      	mov	r3, r5
 80077d4:	2200      	movs	r2, #0
 80077d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077da:	4543      	cmp	r3, r8
 80077dc:	d316      	bcc.n	800780c <__multiply+0x72>
 80077de:	f104 0214 	add.w	r2, r4, #20
 80077e2:	f109 0114 	add.w	r1, r9, #20
 80077e6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80077ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	9c01      	ldr	r4, [sp, #4]
 80077f2:	4613      	mov	r3, r2
 80077f4:	4294      	cmp	r4, r2
 80077f6:	d80c      	bhi.n	8007812 <__multiply+0x78>
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	dd03      	ble.n	8007804 <__multiply+0x6a>
 80077fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007800:	2b00      	cmp	r3, #0
 8007802:	d054      	beq.n	80078ae <__multiply+0x114>
 8007804:	6106      	str	r6, [r0, #16]
 8007806:	b003      	add	sp, #12
 8007808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780c:	f843 2b04 	str.w	r2, [r3], #4
 8007810:	e7e3      	b.n	80077da <__multiply+0x40>
 8007812:	f8b3 a000 	ldrh.w	sl, [r3]
 8007816:	3204      	adds	r2, #4
 8007818:	f1ba 0f00 	cmp.w	sl, #0
 800781c:	d020      	beq.n	8007860 <__multiply+0xc6>
 800781e:	46ae      	mov	lr, r5
 8007820:	4689      	mov	r9, r1
 8007822:	f04f 0c00 	mov.w	ip, #0
 8007826:	f859 4b04 	ldr.w	r4, [r9], #4
 800782a:	f8be b000 	ldrh.w	fp, [lr]
 800782e:	b2a3      	uxth	r3, r4
 8007830:	fb0a b303 	mla	r3, sl, r3, fp
 8007834:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007838:	f8de 4000 	ldr.w	r4, [lr]
 800783c:	4463      	add	r3, ip
 800783e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007842:	fb0a c40b 	mla	r4, sl, fp, ip
 8007846:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007850:	454f      	cmp	r7, r9
 8007852:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007856:	f84e 3b04 	str.w	r3, [lr], #4
 800785a:	d8e4      	bhi.n	8007826 <__multiply+0x8c>
 800785c:	f8ce c000 	str.w	ip, [lr]
 8007860:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007864:	f1b9 0f00 	cmp.w	r9, #0
 8007868:	d01f      	beq.n	80078aa <__multiply+0x110>
 800786a:	46ae      	mov	lr, r5
 800786c:	468c      	mov	ip, r1
 800786e:	f04f 0a00 	mov.w	sl, #0
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	f8bc 4000 	ldrh.w	r4, [ip]
 8007878:	f8be b002 	ldrh.w	fp, [lr, #2]
 800787c:	b29b      	uxth	r3, r3
 800787e:	fb09 b404 	mla	r4, r9, r4, fp
 8007882:	44a2      	add	sl, r4
 8007884:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007888:	f84e 3b04 	str.w	r3, [lr], #4
 800788c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007890:	f8be 4000 	ldrh.w	r4, [lr]
 8007894:	0c1b      	lsrs	r3, r3, #16
 8007896:	fb09 4303 	mla	r3, r9, r3, r4
 800789a:	4567      	cmp	r7, ip
 800789c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80078a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078a4:	d8e6      	bhi.n	8007874 <__multiply+0xda>
 80078a6:	f8ce 3000 	str.w	r3, [lr]
 80078aa:	3504      	adds	r5, #4
 80078ac:	e7a0      	b.n	80077f0 <__multiply+0x56>
 80078ae:	3e01      	subs	r6, #1
 80078b0:	e7a2      	b.n	80077f8 <__multiply+0x5e>
	...

080078b4 <__pow5mult>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	4615      	mov	r5, r2
 80078ba:	f012 0203 	ands.w	r2, r2, #3
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	d007      	beq.n	80078d4 <__pow5mult+0x20>
 80078c4:	4c21      	ldr	r4, [pc, #132]	; (800794c <__pow5mult+0x98>)
 80078c6:	3a01      	subs	r2, #1
 80078c8:	2300      	movs	r3, #0
 80078ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078ce:	f7ff fed2 	bl	8007676 <__multadd>
 80078d2:	4607      	mov	r7, r0
 80078d4:	10ad      	asrs	r5, r5, #2
 80078d6:	d035      	beq.n	8007944 <__pow5mult+0x90>
 80078d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078da:	b93c      	cbnz	r4, 80078ec <__pow5mult+0x38>
 80078dc:	2010      	movs	r0, #16
 80078de:	f7ff fc51 	bl	8007184 <malloc>
 80078e2:	6270      	str	r0, [r6, #36]	; 0x24
 80078e4:	6044      	str	r4, [r0, #4]
 80078e6:	6084      	str	r4, [r0, #8]
 80078e8:	6004      	str	r4, [r0, #0]
 80078ea:	60c4      	str	r4, [r0, #12]
 80078ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078f4:	b94c      	cbnz	r4, 800790a <__pow5mult+0x56>
 80078f6:	f240 2171 	movw	r1, #625	; 0x271
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ff44 	bl	8007788 <__i2b>
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	f8c8 0008 	str.w	r0, [r8, #8]
 8007908:	6003      	str	r3, [r0, #0]
 800790a:	f04f 0800 	mov.w	r8, #0
 800790e:	07eb      	lsls	r3, r5, #31
 8007910:	d50a      	bpl.n	8007928 <__pow5mult+0x74>
 8007912:	4639      	mov	r1, r7
 8007914:	4622      	mov	r2, r4
 8007916:	4630      	mov	r0, r6
 8007918:	f7ff ff3f 	bl	800779a <__multiply>
 800791c:	4681      	mov	r9, r0
 800791e:	4639      	mov	r1, r7
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff fe91 	bl	8007648 <_Bfree>
 8007926:	464f      	mov	r7, r9
 8007928:	106d      	asrs	r5, r5, #1
 800792a:	d00b      	beq.n	8007944 <__pow5mult+0x90>
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	b938      	cbnz	r0, 8007940 <__pow5mult+0x8c>
 8007930:	4622      	mov	r2, r4
 8007932:	4621      	mov	r1, r4
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff ff30 	bl	800779a <__multiply>
 800793a:	6020      	str	r0, [r4, #0]
 800793c:	f8c0 8000 	str.w	r8, [r0]
 8007940:	4604      	mov	r4, r0
 8007942:	e7e4      	b.n	800790e <__pow5mult+0x5a>
 8007944:	4638      	mov	r0, r7
 8007946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794a:	bf00      	nop
 800794c:	08008790 	.word	0x08008790

08007950 <__lshift>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	460c      	mov	r4, r1
 8007956:	4607      	mov	r7, r0
 8007958:	4616      	mov	r6, r2
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007960:	eb0a 0903 	add.w	r9, sl, r3
 8007964:	6849      	ldr	r1, [r1, #4]
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	f109 0501 	add.w	r5, r9, #1
 800796c:	42ab      	cmp	r3, r5
 800796e:	db31      	blt.n	80079d4 <__lshift+0x84>
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff fe35 	bl	80075e0 <_Balloc>
 8007976:	2200      	movs	r2, #0
 8007978:	4680      	mov	r8, r0
 800797a:	4611      	mov	r1, r2
 800797c:	f100 0314 	add.w	r3, r0, #20
 8007980:	4552      	cmp	r2, sl
 8007982:	db2a      	blt.n	80079da <__lshift+0x8a>
 8007984:	6920      	ldr	r0, [r4, #16]
 8007986:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800798a:	f104 0114 	add.w	r1, r4, #20
 800798e:	f016 021f 	ands.w	r2, r6, #31
 8007992:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007996:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800799a:	d022      	beq.n	80079e2 <__lshift+0x92>
 800799c:	2000      	movs	r0, #0
 800799e:	f1c2 0c20 	rsb	ip, r2, #32
 80079a2:	680e      	ldr	r6, [r1, #0]
 80079a4:	4096      	lsls	r6, r2
 80079a6:	4330      	orrs	r0, r6
 80079a8:	f843 0b04 	str.w	r0, [r3], #4
 80079ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80079b0:	458e      	cmp	lr, r1
 80079b2:	fa20 f00c 	lsr.w	r0, r0, ip
 80079b6:	d8f4      	bhi.n	80079a2 <__lshift+0x52>
 80079b8:	6018      	str	r0, [r3, #0]
 80079ba:	b108      	cbz	r0, 80079c0 <__lshift+0x70>
 80079bc:	f109 0502 	add.w	r5, r9, #2
 80079c0:	3d01      	subs	r5, #1
 80079c2:	4638      	mov	r0, r7
 80079c4:	f8c8 5010 	str.w	r5, [r8, #16]
 80079c8:	4621      	mov	r1, r4
 80079ca:	f7ff fe3d 	bl	8007648 <_Bfree>
 80079ce:	4640      	mov	r0, r8
 80079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d4:	3101      	adds	r1, #1
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	e7c8      	b.n	800796c <__lshift+0x1c>
 80079da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80079de:	3201      	adds	r2, #1
 80079e0:	e7ce      	b.n	8007980 <__lshift+0x30>
 80079e2:	3b04      	subs	r3, #4
 80079e4:	f851 2b04 	ldr.w	r2, [r1], #4
 80079e8:	458e      	cmp	lr, r1
 80079ea:	f843 2f04 	str.w	r2, [r3, #4]!
 80079ee:	d8f9      	bhi.n	80079e4 <__lshift+0x94>
 80079f0:	e7e6      	b.n	80079c0 <__lshift+0x70>

080079f2 <__mcmp>:
 80079f2:	6903      	ldr	r3, [r0, #16]
 80079f4:	690a      	ldr	r2, [r1, #16]
 80079f6:	b530      	push	{r4, r5, lr}
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	d10c      	bne.n	8007a16 <__mcmp+0x24>
 80079fc:	0092      	lsls	r2, r2, #2
 80079fe:	3014      	adds	r0, #20
 8007a00:	3114      	adds	r1, #20
 8007a02:	1884      	adds	r4, r0, r2
 8007a04:	4411      	add	r1, r2
 8007a06:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a0e:	4295      	cmp	r5, r2
 8007a10:	d003      	beq.n	8007a1a <__mcmp+0x28>
 8007a12:	d305      	bcc.n	8007a20 <__mcmp+0x2e>
 8007a14:	2301      	movs	r3, #1
 8007a16:	4618      	mov	r0, r3
 8007a18:	bd30      	pop	{r4, r5, pc}
 8007a1a:	42a0      	cmp	r0, r4
 8007a1c:	d3f3      	bcc.n	8007a06 <__mcmp+0x14>
 8007a1e:	e7fa      	b.n	8007a16 <__mcmp+0x24>
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	e7f7      	b.n	8007a16 <__mcmp+0x24>

08007a26 <__mdiff>:
 8007a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2a:	460d      	mov	r5, r1
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4628      	mov	r0, r5
 8007a32:	4614      	mov	r4, r2
 8007a34:	f7ff ffdd 	bl	80079f2 <__mcmp>
 8007a38:	1e06      	subs	r6, r0, #0
 8007a3a:	d108      	bne.n	8007a4e <__mdiff+0x28>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7ff fdce 	bl	80075e0 <_Balloc>
 8007a44:	2301      	movs	r3, #1
 8007a46:	6146      	str	r6, [r0, #20]
 8007a48:	6103      	str	r3, [r0, #16]
 8007a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4e:	bfa4      	itt	ge
 8007a50:	4623      	movge	r3, r4
 8007a52:	462c      	movge	r4, r5
 8007a54:	4638      	mov	r0, r7
 8007a56:	6861      	ldr	r1, [r4, #4]
 8007a58:	bfa6      	itte	ge
 8007a5a:	461d      	movge	r5, r3
 8007a5c:	2600      	movge	r6, #0
 8007a5e:	2601      	movlt	r6, #1
 8007a60:	f7ff fdbe 	bl	80075e0 <_Balloc>
 8007a64:	f04f 0c00 	mov.w	ip, #0
 8007a68:	60c6      	str	r6, [r0, #12]
 8007a6a:	692b      	ldr	r3, [r5, #16]
 8007a6c:	6926      	ldr	r6, [r4, #16]
 8007a6e:	f104 0214 	add.w	r2, r4, #20
 8007a72:	f105 0914 	add.w	r9, r5, #20
 8007a76:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007a7a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007a7e:	f100 0114 	add.w	r1, r0, #20
 8007a82:	f852 ab04 	ldr.w	sl, [r2], #4
 8007a86:	f859 5b04 	ldr.w	r5, [r9], #4
 8007a8a:	fa1f f38a 	uxth.w	r3, sl
 8007a8e:	4463      	add	r3, ip
 8007a90:	b2ac      	uxth	r4, r5
 8007a92:	1b1b      	subs	r3, r3, r4
 8007a94:	0c2c      	lsrs	r4, r5, #16
 8007a96:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007a9a:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007aa4:	45c8      	cmp	r8, r9
 8007aa6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007aaa:	4696      	mov	lr, r2
 8007aac:	f841 4b04 	str.w	r4, [r1], #4
 8007ab0:	d8e7      	bhi.n	8007a82 <__mdiff+0x5c>
 8007ab2:	45be      	cmp	lr, r7
 8007ab4:	d305      	bcc.n	8007ac2 <__mdiff+0x9c>
 8007ab6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007aba:	b18b      	cbz	r3, 8007ae0 <__mdiff+0xba>
 8007abc:	6106      	str	r6, [r0, #16]
 8007abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ac6:	b2a2      	uxth	r2, r4
 8007ac8:	4462      	add	r2, ip
 8007aca:	1413      	asrs	r3, r2, #16
 8007acc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ad6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007ada:	f841 2b04 	str.w	r2, [r1], #4
 8007ade:	e7e8      	b.n	8007ab2 <__mdiff+0x8c>
 8007ae0:	3e01      	subs	r6, #1
 8007ae2:	e7e8      	b.n	8007ab6 <__mdiff+0x90>

08007ae4 <__d2b>:
 8007ae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ae8:	461c      	mov	r4, r3
 8007aea:	2101      	movs	r1, #1
 8007aec:	4690      	mov	r8, r2
 8007aee:	9e08      	ldr	r6, [sp, #32]
 8007af0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007af2:	f7ff fd75 	bl	80075e0 <_Balloc>
 8007af6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007afa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007afe:	4607      	mov	r7, r0
 8007b00:	bb34      	cbnz	r4, 8007b50 <__d2b+0x6c>
 8007b02:	9201      	str	r2, [sp, #4]
 8007b04:	f1b8 0f00 	cmp.w	r8, #0
 8007b08:	d027      	beq.n	8007b5a <__d2b+0x76>
 8007b0a:	a802      	add	r0, sp, #8
 8007b0c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007b10:	f7ff fe0b 	bl	800772a <__lo0bits>
 8007b14:	9900      	ldr	r1, [sp, #0]
 8007b16:	b1f0      	cbz	r0, 8007b56 <__d2b+0x72>
 8007b18:	9a01      	ldr	r2, [sp, #4]
 8007b1a:	f1c0 0320 	rsb	r3, r0, #32
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	430b      	orrs	r3, r1
 8007b24:	40c2      	lsrs	r2, r0
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	9201      	str	r2, [sp, #4]
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bf14      	ite	ne
 8007b30:	2102      	movne	r1, #2
 8007b32:	2101      	moveq	r1, #1
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	6139      	str	r1, [r7, #16]
 8007b38:	b1c4      	cbz	r4, 8007b6c <__d2b+0x88>
 8007b3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b3e:	4404      	add	r4, r0
 8007b40:	6034      	str	r4, [r6, #0]
 8007b42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b46:	6028      	str	r0, [r5, #0]
 8007b48:	4638      	mov	r0, r7
 8007b4a:	b002      	add	sp, #8
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b54:	e7d5      	b.n	8007b02 <__d2b+0x1e>
 8007b56:	6179      	str	r1, [r7, #20]
 8007b58:	e7e7      	b.n	8007b2a <__d2b+0x46>
 8007b5a:	a801      	add	r0, sp, #4
 8007b5c:	f7ff fde5 	bl	800772a <__lo0bits>
 8007b60:	2101      	movs	r1, #1
 8007b62:	9b01      	ldr	r3, [sp, #4]
 8007b64:	6139      	str	r1, [r7, #16]
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	3020      	adds	r0, #32
 8007b6a:	e7e5      	b.n	8007b38 <__d2b+0x54>
 8007b6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	6918      	ldr	r0, [r3, #16]
 8007b78:	f7ff fdb8 	bl	80076ec <__hi0bits>
 8007b7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b80:	e7e1      	b.n	8007b46 <__d2b+0x62>
	...

08007b84 <_sbrk_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	2300      	movs	r3, #0
 8007b88:	4c05      	ldr	r4, [pc, #20]	; (8007ba0 <_sbrk_r+0x1c>)
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	f7fa ffaa 	bl	8002ae8 <_sbrk>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_sbrk_r+0x1a>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_sbrk_r+0x1a>
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	200007bc 	.word	0x200007bc

08007ba4 <__ssprint_r>:
 8007ba4:	6893      	ldr	r3, [r2, #8]
 8007ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	4681      	mov	r9, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	4617      	mov	r7, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d060      	beq.n	8007c76 <__ssprint_r+0xd2>
 8007bb4:	f04f 0b00 	mov.w	fp, #0
 8007bb8:	465e      	mov	r6, fp
 8007bba:	f8d2 a000 	ldr.w	sl, [r2]
 8007bbe:	b356      	cbz	r6, 8007c16 <__ssprint_r+0x72>
 8007bc0:	68a3      	ldr	r3, [r4, #8]
 8007bc2:	429e      	cmp	r6, r3
 8007bc4:	d344      	bcc.n	8007c50 <__ssprint_r+0xac>
 8007bc6:	89a2      	ldrh	r2, [r4, #12]
 8007bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bcc:	d03e      	beq.n	8007c4c <__ssprint_r+0xa8>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	6921      	ldr	r1, [r4, #16]
 8007bd4:	eba5 0801 	sub.w	r8, r5, r1
 8007bd8:	6965      	ldr	r5, [r4, #20]
 8007bda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bde:	fb95 f5f3 	sdiv	r5, r5, r3
 8007be2:	f108 0301 	add.w	r3, r8, #1
 8007be6:	4433      	add	r3, r6
 8007be8:	429d      	cmp	r5, r3
 8007bea:	bf38      	it	cc
 8007bec:	461d      	movcc	r5, r3
 8007bee:	0553      	lsls	r3, r2, #21
 8007bf0:	d546      	bpl.n	8007c80 <__ssprint_r+0xdc>
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f7ff facd 	bl	8007194 <_malloc_r>
 8007bfa:	b998      	cbnz	r0, 8007c24 <__ssprint_r+0x80>
 8007bfc:	230c      	movs	r3, #12
 8007bfe:	f8c9 3000 	str.w	r3, [r9]
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c0c:	81a3      	strh	r3, [r4, #12]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	e031      	b.n	8007c7a <__ssprint_r+0xd6>
 8007c16:	f8da b000 	ldr.w	fp, [sl]
 8007c1a:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007c1e:	f10a 0a08 	add.w	sl, sl, #8
 8007c22:	e7cc      	b.n	8007bbe <__ssprint_r+0x1a>
 8007c24:	4642      	mov	r2, r8
 8007c26:	6921      	ldr	r1, [r4, #16]
 8007c28:	9001      	str	r0, [sp, #4]
 8007c2a:	f7fd fc35 	bl	8005498 <memcpy>
 8007c2e:	89a2      	ldrh	r2, [r4, #12]
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c3a:	81a2      	strh	r2, [r4, #12]
 8007c3c:	6123      	str	r3, [r4, #16]
 8007c3e:	4443      	add	r3, r8
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	4633      	mov	r3, r6
 8007c44:	6165      	str	r5, [r4, #20]
 8007c46:	eba5 0508 	sub.w	r5, r5, r8
 8007c4a:	60a5      	str	r5, [r4, #8]
 8007c4c:	429e      	cmp	r6, r3
 8007c4e:	d200      	bcs.n	8007c52 <__ssprint_r+0xae>
 8007c50:	4633      	mov	r3, r6
 8007c52:	461a      	mov	r2, r3
 8007c54:	4659      	mov	r1, fp
 8007c56:	6820      	ldr	r0, [r4, #0]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	f000 f971 	bl	8007f40 <memmove>
 8007c5e:	68a2      	ldr	r2, [r4, #8]
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	60a2      	str	r2, [r4, #8]
 8007c66:	6822      	ldr	r2, [r4, #0]
 8007c68:	4413      	add	r3, r2
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	1b9e      	subs	r6, r3, r6
 8007c70:	60be      	str	r6, [r7, #8]
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	d1cf      	bne.n	8007c16 <__ssprint_r+0x72>
 8007c76:	2000      	movs	r0, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	b003      	add	sp, #12
 8007c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c80:	462a      	mov	r2, r5
 8007c82:	4648      	mov	r0, r9
 8007c84:	f000 f976 	bl	8007f74 <_realloc_r>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d1d6      	bne.n	8007c3c <__ssprint_r+0x98>
 8007c8e:	6921      	ldr	r1, [r4, #16]
 8007c90:	4648      	mov	r0, r9
 8007c92:	f000 f885 	bl	8007da0 <_free_r>
 8007c96:	e7b1      	b.n	8007bfc <__ssprint_r+0x58>

08007c98 <_calloc_r>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4351      	muls	r1, r2
 8007c9c:	f7ff fa7a 	bl	8007194 <_malloc_r>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	b198      	cbz	r0, 8007ccc <_calloc_r+0x34>
 8007ca4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007ca8:	f022 0203 	bic.w	r2, r2, #3
 8007cac:	3a04      	subs	r2, #4
 8007cae:	2a24      	cmp	r2, #36	; 0x24
 8007cb0:	d81b      	bhi.n	8007cea <_calloc_r+0x52>
 8007cb2:	2a13      	cmp	r2, #19
 8007cb4:	d917      	bls.n	8007ce6 <_calloc_r+0x4e>
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	2a1b      	cmp	r2, #27
 8007cba:	6001      	str	r1, [r0, #0]
 8007cbc:	6041      	str	r1, [r0, #4]
 8007cbe:	d807      	bhi.n	8007cd0 <_calloc_r+0x38>
 8007cc0:	f100 0308 	add.w	r3, r0, #8
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	609a      	str	r2, [r3, #8]
 8007ccc:	4620      	mov	r0, r4
 8007cce:	bd10      	pop	{r4, pc}
 8007cd0:	2a24      	cmp	r2, #36	; 0x24
 8007cd2:	6081      	str	r1, [r0, #8]
 8007cd4:	60c1      	str	r1, [r0, #12]
 8007cd6:	bf11      	iteee	ne
 8007cd8:	f100 0310 	addne.w	r3, r0, #16
 8007cdc:	6101      	streq	r1, [r0, #16]
 8007cde:	f100 0318 	addeq.w	r3, r0, #24
 8007ce2:	6141      	streq	r1, [r0, #20]
 8007ce4:	e7ee      	b.n	8007cc4 <_calloc_r+0x2c>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	e7ec      	b.n	8007cc4 <_calloc_r+0x2c>
 8007cea:	2100      	movs	r1, #0
 8007cec:	f7fd fbdf 	bl	80054ae <memset>
 8007cf0:	e7ec      	b.n	8007ccc <_calloc_r+0x34>
	...

08007cf4 <_malloc_trim_r>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	4f25      	ldr	r7, [pc, #148]	; (8007d90 <_malloc_trim_r+0x9c>)
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	f7ff fc63 	bl	80075c8 <__malloc_lock>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8007d9c <_malloc_trim_r+0xa8>
 8007d08:	685d      	ldr	r5, [r3, #4]
 8007d0a:	f1a8 0411 	sub.w	r4, r8, #17
 8007d0e:	f025 0503 	bic.w	r5, r5, #3
 8007d12:	eba4 0409 	sub.w	r4, r4, r9
 8007d16:	442c      	add	r4, r5
 8007d18:	fbb4 f4f8 	udiv	r4, r4, r8
 8007d1c:	3c01      	subs	r4, #1
 8007d1e:	fb08 f404 	mul.w	r4, r8, r4
 8007d22:	4544      	cmp	r4, r8
 8007d24:	da05      	bge.n	8007d32 <_malloc_trim_r+0x3e>
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7ff fc54 	bl	80075d4 <__malloc_unlock>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d32:	2100      	movs	r1, #0
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff ff25 	bl	8007b84 <_sbrk_r>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	442b      	add	r3, r5
 8007d3e:	4298      	cmp	r0, r3
 8007d40:	d1f1      	bne.n	8007d26 <_malloc_trim_r+0x32>
 8007d42:	4261      	negs	r1, r4
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff ff1d 	bl	8007b84 <_sbrk_r>
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d110      	bne.n	8007d70 <_malloc_trim_r+0x7c>
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ff17 	bl	8007b84 <_sbrk_r>
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	1a83      	subs	r3, r0, r2
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	dde3      	ble.n	8007d26 <_malloc_trim_r+0x32>
 8007d5e:	490d      	ldr	r1, [pc, #52]	; (8007d94 <_malloc_trim_r+0xa0>)
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	6809      	ldr	r1, [r1, #0]
 8007d66:	6053      	str	r3, [r2, #4]
 8007d68:	1a40      	subs	r0, r0, r1
 8007d6a:	490b      	ldr	r1, [pc, #44]	; (8007d98 <_malloc_trim_r+0xa4>)
 8007d6c:	6008      	str	r0, [r1, #0]
 8007d6e:	e7da      	b.n	8007d26 <_malloc_trim_r+0x32>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <_malloc_trim_r+0xa4>)
 8007d74:	1b2d      	subs	r5, r5, r4
 8007d76:	f045 0501 	orr.w	r5, r5, #1
 8007d7a:	605d      	str	r5, [r3, #4]
 8007d7c:	6813      	ldr	r3, [r2, #0]
 8007d7e:	4630      	mov	r0, r6
 8007d80:	1b1c      	subs	r4, r3, r4
 8007d82:	6014      	str	r4, [r2, #0]
 8007d84:	f7ff fc26 	bl	80075d4 <__malloc_unlock>
 8007d88:	2001      	movs	r0, #1
 8007d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000104 	.word	0x20000104
 8007d94:	2000050c 	.word	0x2000050c
 8007d98:	20000778 	.word	0x20000778
 8007d9c:	00001000 	.word	0x00001000

08007da0 <_free_r>:
 8007da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da4:	4604      	mov	r4, r0
 8007da6:	4688      	mov	r8, r1
 8007da8:	2900      	cmp	r1, #0
 8007daa:	f000 80ab 	beq.w	8007f04 <_free_r+0x164>
 8007dae:	f7ff fc0b 	bl	80075c8 <__malloc_lock>
 8007db2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007db6:	4d54      	ldr	r5, [pc, #336]	; (8007f08 <_free_r+0x168>)
 8007db8:	f022 0001 	bic.w	r0, r2, #1
 8007dbc:	f1a8 0308 	sub.w	r3, r8, #8
 8007dc0:	181f      	adds	r7, r3, r0
 8007dc2:	68a9      	ldr	r1, [r5, #8]
 8007dc4:	687e      	ldr	r6, [r7, #4]
 8007dc6:	428f      	cmp	r7, r1
 8007dc8:	f026 0603 	bic.w	r6, r6, #3
 8007dcc:	f002 0201 	and.w	r2, r2, #1
 8007dd0:	d11b      	bne.n	8007e0a <_free_r+0x6a>
 8007dd2:	4430      	add	r0, r6
 8007dd4:	b93a      	cbnz	r2, 8007de6 <_free_r+0x46>
 8007dd6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007dda:	1a9b      	subs	r3, r3, r2
 8007ddc:	6899      	ldr	r1, [r3, #8]
 8007dde:	4410      	add	r0, r2
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	60ca      	str	r2, [r1, #12]
 8007de4:	6091      	str	r1, [r2, #8]
 8007de6:	f040 0201 	orr.w	r2, r0, #1
 8007dea:	605a      	str	r2, [r3, #4]
 8007dec:	60ab      	str	r3, [r5, #8]
 8007dee:	4b47      	ldr	r3, [pc, #284]	; (8007f0c <_free_r+0x16c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4298      	cmp	r0, r3
 8007df4:	d304      	bcc.n	8007e00 <_free_r+0x60>
 8007df6:	4b46      	ldr	r3, [pc, #280]	; (8007f10 <_free_r+0x170>)
 8007df8:	4620      	mov	r0, r4
 8007dfa:	6819      	ldr	r1, [r3, #0]
 8007dfc:	f7ff ff7a 	bl	8007cf4 <_malloc_trim_r>
 8007e00:	4620      	mov	r0, r4
 8007e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	f7ff bbe5 	b.w	80075d4 <__malloc_unlock>
 8007e0a:	607e      	str	r6, [r7, #4]
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	d139      	bne.n	8007e84 <_free_r+0xe4>
 8007e10:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007e14:	f105 0e08 	add.w	lr, r5, #8
 8007e18:	1a5b      	subs	r3, r3, r1
 8007e1a:	4408      	add	r0, r1
 8007e1c:	6899      	ldr	r1, [r3, #8]
 8007e1e:	4571      	cmp	r1, lr
 8007e20:	d032      	beq.n	8007e88 <_free_r+0xe8>
 8007e22:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007e26:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007e2a:	f8ce 1008 	str.w	r1, [lr, #8]
 8007e2e:	19b9      	adds	r1, r7, r6
 8007e30:	6849      	ldr	r1, [r1, #4]
 8007e32:	07c9      	lsls	r1, r1, #31
 8007e34:	d40a      	bmi.n	8007e4c <_free_r+0xac>
 8007e36:	4430      	add	r0, r6
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	bb3a      	cbnz	r2, 8007e8c <_free_r+0xec>
 8007e3c:	4e35      	ldr	r6, [pc, #212]	; (8007f14 <_free_r+0x174>)
 8007e3e:	42b1      	cmp	r1, r6
 8007e40:	d124      	bne.n	8007e8c <_free_r+0xec>
 8007e42:	2201      	movs	r2, #1
 8007e44:	616b      	str	r3, [r5, #20]
 8007e46:	612b      	str	r3, [r5, #16]
 8007e48:	60d9      	str	r1, [r3, #12]
 8007e4a:	6099      	str	r1, [r3, #8]
 8007e4c:	f040 0101 	orr.w	r1, r0, #1
 8007e50:	6059      	str	r1, [r3, #4]
 8007e52:	5018      	str	r0, [r3, r0]
 8007e54:	2a00      	cmp	r2, #0
 8007e56:	d1d3      	bne.n	8007e00 <_free_r+0x60>
 8007e58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007e5c:	d21a      	bcs.n	8007e94 <_free_r+0xf4>
 8007e5e:	2201      	movs	r2, #1
 8007e60:	08c0      	lsrs	r0, r0, #3
 8007e62:	1081      	asrs	r1, r0, #2
 8007e64:	408a      	lsls	r2, r1
 8007e66:	6869      	ldr	r1, [r5, #4]
 8007e68:	3001      	adds	r0, #1
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	606a      	str	r2, [r5, #4]
 8007e6e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007e72:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007e76:	3a08      	subs	r2, #8
 8007e78:	60da      	str	r2, [r3, #12]
 8007e7a:	6099      	str	r1, [r3, #8]
 8007e7c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007e80:	60cb      	str	r3, [r1, #12]
 8007e82:	e7bd      	b.n	8007e00 <_free_r+0x60>
 8007e84:	2200      	movs	r2, #0
 8007e86:	e7d2      	b.n	8007e2e <_free_r+0x8e>
 8007e88:	2201      	movs	r2, #1
 8007e8a:	e7d0      	b.n	8007e2e <_free_r+0x8e>
 8007e8c:	68fe      	ldr	r6, [r7, #12]
 8007e8e:	60ce      	str	r6, [r1, #12]
 8007e90:	60b1      	str	r1, [r6, #8]
 8007e92:	e7db      	b.n	8007e4c <_free_r+0xac>
 8007e94:	0a42      	lsrs	r2, r0, #9
 8007e96:	2a04      	cmp	r2, #4
 8007e98:	d813      	bhi.n	8007ec2 <_free_r+0x122>
 8007e9a:	0982      	lsrs	r2, r0, #6
 8007e9c:	3238      	adds	r2, #56	; 0x38
 8007e9e:	1c51      	adds	r1, r2, #1
 8007ea0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007ea4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007ea8:	428e      	cmp	r6, r1
 8007eaa:	d124      	bne.n	8007ef6 <_free_r+0x156>
 8007eac:	2001      	movs	r0, #1
 8007eae:	1092      	asrs	r2, r2, #2
 8007eb0:	fa00 f202 	lsl.w	r2, r0, r2
 8007eb4:	6868      	ldr	r0, [r5, #4]
 8007eb6:	4302      	orrs	r2, r0
 8007eb8:	606a      	str	r2, [r5, #4]
 8007eba:	60de      	str	r6, [r3, #12]
 8007ebc:	6099      	str	r1, [r3, #8]
 8007ebe:	60b3      	str	r3, [r6, #8]
 8007ec0:	e7de      	b.n	8007e80 <_free_r+0xe0>
 8007ec2:	2a14      	cmp	r2, #20
 8007ec4:	d801      	bhi.n	8007eca <_free_r+0x12a>
 8007ec6:	325b      	adds	r2, #91	; 0x5b
 8007ec8:	e7e9      	b.n	8007e9e <_free_r+0xfe>
 8007eca:	2a54      	cmp	r2, #84	; 0x54
 8007ecc:	d802      	bhi.n	8007ed4 <_free_r+0x134>
 8007ece:	0b02      	lsrs	r2, r0, #12
 8007ed0:	326e      	adds	r2, #110	; 0x6e
 8007ed2:	e7e4      	b.n	8007e9e <_free_r+0xfe>
 8007ed4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007ed8:	d802      	bhi.n	8007ee0 <_free_r+0x140>
 8007eda:	0bc2      	lsrs	r2, r0, #15
 8007edc:	3277      	adds	r2, #119	; 0x77
 8007ede:	e7de      	b.n	8007e9e <_free_r+0xfe>
 8007ee0:	f240 5154 	movw	r1, #1364	; 0x554
 8007ee4:	428a      	cmp	r2, r1
 8007ee6:	bf9a      	itte	ls
 8007ee8:	0c82      	lsrls	r2, r0, #18
 8007eea:	327c      	addls	r2, #124	; 0x7c
 8007eec:	227e      	movhi	r2, #126	; 0x7e
 8007eee:	e7d6      	b.n	8007e9e <_free_r+0xfe>
 8007ef0:	6889      	ldr	r1, [r1, #8]
 8007ef2:	428e      	cmp	r6, r1
 8007ef4:	d004      	beq.n	8007f00 <_free_r+0x160>
 8007ef6:	684a      	ldr	r2, [r1, #4]
 8007ef8:	f022 0203 	bic.w	r2, r2, #3
 8007efc:	4290      	cmp	r0, r2
 8007efe:	d3f7      	bcc.n	8007ef0 <_free_r+0x150>
 8007f00:	68ce      	ldr	r6, [r1, #12]
 8007f02:	e7da      	b.n	8007eba <_free_r+0x11a>
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f08:	20000104 	.word	0x20000104
 8007f0c:	20000510 	.word	0x20000510
 8007f10:	200007a8 	.word	0x200007a8
 8007f14:	2000010c 	.word	0x2000010c

08007f18 <__retarget_lock_acquire_recursive>:
 8007f18:	4770      	bx	lr

08007f1a <__retarget_lock_release_recursive>:
 8007f1a:	4770      	bx	lr

08007f1c <__ascii_mbtowc>:
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	b901      	cbnz	r1, 8007f22 <__ascii_mbtowc+0x6>
 8007f20:	a901      	add	r1, sp, #4
 8007f22:	b142      	cbz	r2, 8007f36 <__ascii_mbtowc+0x1a>
 8007f24:	b14b      	cbz	r3, 8007f3a <__ascii_mbtowc+0x1e>
 8007f26:	7813      	ldrb	r3, [r2, #0]
 8007f28:	600b      	str	r3, [r1, #0]
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	1c10      	adds	r0, r2, #0
 8007f2e:	bf18      	it	ne
 8007f30:	2001      	movne	r0, #1
 8007f32:	b002      	add	sp, #8
 8007f34:	4770      	bx	lr
 8007f36:	4610      	mov	r0, r2
 8007f38:	e7fb      	b.n	8007f32 <__ascii_mbtowc+0x16>
 8007f3a:	f06f 0001 	mvn.w	r0, #1
 8007f3e:	e7f8      	b.n	8007f32 <__ascii_mbtowc+0x16>

08007f40 <memmove>:
 8007f40:	4288      	cmp	r0, r1
 8007f42:	b510      	push	{r4, lr}
 8007f44:	eb01 0302 	add.w	r3, r1, r2
 8007f48:	d803      	bhi.n	8007f52 <memmove+0x12>
 8007f4a:	1e42      	subs	r2, r0, #1
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	d10c      	bne.n	8007f6a <memmove+0x2a>
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	4298      	cmp	r0, r3
 8007f54:	d2f9      	bcs.n	8007f4a <memmove+0xa>
 8007f56:	1881      	adds	r1, r0, r2
 8007f58:	1ad2      	subs	r2, r2, r3
 8007f5a:	42d3      	cmn	r3, r2
 8007f5c:	d100      	bne.n	8007f60 <memmove+0x20>
 8007f5e:	bd10      	pop	{r4, pc}
 8007f60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f68:	e7f7      	b.n	8007f5a <memmove+0x1a>
 8007f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f72:	e7eb      	b.n	8007f4c <memmove+0xc>

08007f74 <_realloc_r>:
 8007f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	4682      	mov	sl, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	b929      	cbnz	r1, 8007f8a <_realloc_r+0x16>
 8007f7e:	4611      	mov	r1, r2
 8007f80:	b003      	add	sp, #12
 8007f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f86:	f7ff b905 	b.w	8007194 <_malloc_r>
 8007f8a:	9201      	str	r2, [sp, #4]
 8007f8c:	f7ff fb1c 	bl	80075c8 <__malloc_lock>
 8007f90:	9a01      	ldr	r2, [sp, #4]
 8007f92:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007f96:	f102 080b 	add.w	r8, r2, #11
 8007f9a:	f1b8 0f16 	cmp.w	r8, #22
 8007f9e:	f1a4 0908 	sub.w	r9, r4, #8
 8007fa2:	f025 0603 	bic.w	r6, r5, #3
 8007fa6:	d90a      	bls.n	8007fbe <_realloc_r+0x4a>
 8007fa8:	f038 0807 	bics.w	r8, r8, #7
 8007fac:	d509      	bpl.n	8007fc2 <_realloc_r+0x4e>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	2700      	movs	r7, #0
 8007fb2:	f8ca 3000 	str.w	r3, [sl]
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	b003      	add	sp, #12
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	f04f 0810 	mov.w	r8, #16
 8007fc2:	4590      	cmp	r8, r2
 8007fc4:	d3f3      	bcc.n	8007fae <_realloc_r+0x3a>
 8007fc6:	45b0      	cmp	r8, r6
 8007fc8:	f340 8148 	ble.w	800825c <_realloc_r+0x2e8>
 8007fcc:	4ba9      	ldr	r3, [pc, #676]	; (8008274 <_realloc_r+0x300>)
 8007fce:	eb09 0106 	add.w	r1, r9, r6
 8007fd2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8007fd6:	469b      	mov	fp, r3
 8007fd8:	4571      	cmp	r1, lr
 8007fda:	684b      	ldr	r3, [r1, #4]
 8007fdc:	d005      	beq.n	8007fea <_realloc_r+0x76>
 8007fde:	f023 0001 	bic.w	r0, r3, #1
 8007fe2:	4408      	add	r0, r1
 8007fe4:	6840      	ldr	r0, [r0, #4]
 8007fe6:	07c7      	lsls	r7, r0, #31
 8007fe8:	d447      	bmi.n	800807a <_realloc_r+0x106>
 8007fea:	f023 0303 	bic.w	r3, r3, #3
 8007fee:	4571      	cmp	r1, lr
 8007ff0:	eb06 0703 	add.w	r7, r6, r3
 8007ff4:	d119      	bne.n	800802a <_realloc_r+0xb6>
 8007ff6:	f108 0010 	add.w	r0, r8, #16
 8007ffa:	4287      	cmp	r7, r0
 8007ffc:	db3f      	blt.n	800807e <_realloc_r+0x10a>
 8007ffe:	eba7 0708 	sub.w	r7, r7, r8
 8008002:	eb09 0308 	add.w	r3, r9, r8
 8008006:	f047 0701 	orr.w	r7, r7, #1
 800800a:	f8cb 3008 	str.w	r3, [fp, #8]
 800800e:	605f      	str	r7, [r3, #4]
 8008010:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008014:	4650      	mov	r0, sl
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	ea43 0308 	orr.w	r3, r3, r8
 800801e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008022:	f7ff fad7 	bl	80075d4 <__malloc_unlock>
 8008026:	4627      	mov	r7, r4
 8008028:	e7c5      	b.n	8007fb6 <_realloc_r+0x42>
 800802a:	45b8      	cmp	r8, r7
 800802c:	dc27      	bgt.n	800807e <_realloc_r+0x10a>
 800802e:	68cb      	ldr	r3, [r1, #12]
 8008030:	688a      	ldr	r2, [r1, #8]
 8008032:	60d3      	str	r3, [r2, #12]
 8008034:	609a      	str	r2, [r3, #8]
 8008036:	eba7 0008 	sub.w	r0, r7, r8
 800803a:	280f      	cmp	r0, #15
 800803c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008040:	eb09 0207 	add.w	r2, r9, r7
 8008044:	f240 810c 	bls.w	8008260 <_realloc_r+0x2ec>
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	eb09 0108 	add.w	r1, r9, r8
 8008050:	ea43 0308 	orr.w	r3, r3, r8
 8008054:	f040 0001 	orr.w	r0, r0, #1
 8008058:	f8c9 3004 	str.w	r3, [r9, #4]
 800805c:	6048      	str	r0, [r1, #4]
 800805e:	6853      	ldr	r3, [r2, #4]
 8008060:	3108      	adds	r1, #8
 8008062:	f043 0301 	orr.w	r3, r3, #1
 8008066:	6053      	str	r3, [r2, #4]
 8008068:	4650      	mov	r0, sl
 800806a:	f7ff fe99 	bl	8007da0 <_free_r>
 800806e:	4650      	mov	r0, sl
 8008070:	f7ff fab0 	bl	80075d4 <__malloc_unlock>
 8008074:	f109 0708 	add.w	r7, r9, #8
 8008078:	e79d      	b.n	8007fb6 <_realloc_r+0x42>
 800807a:	2300      	movs	r3, #0
 800807c:	4619      	mov	r1, r3
 800807e:	07e8      	lsls	r0, r5, #31
 8008080:	f100 8085 	bmi.w	800818e <_realloc_r+0x21a>
 8008084:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008088:	eba9 0505 	sub.w	r5, r9, r5
 800808c:	6868      	ldr	r0, [r5, #4]
 800808e:	f020 0003 	bic.w	r0, r0, #3
 8008092:	4430      	add	r0, r6
 8008094:	2900      	cmp	r1, #0
 8008096:	d077      	beq.n	8008188 <_realloc_r+0x214>
 8008098:	4571      	cmp	r1, lr
 800809a:	d151      	bne.n	8008140 <_realloc_r+0x1cc>
 800809c:	4403      	add	r3, r0
 800809e:	f108 0110 	add.w	r1, r8, #16
 80080a2:	428b      	cmp	r3, r1
 80080a4:	db70      	blt.n	8008188 <_realloc_r+0x214>
 80080a6:	462f      	mov	r7, r5
 80080a8:	68ea      	ldr	r2, [r5, #12]
 80080aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80080ae:	60ca      	str	r2, [r1, #12]
 80080b0:	6091      	str	r1, [r2, #8]
 80080b2:	1f32      	subs	r2, r6, #4
 80080b4:	2a24      	cmp	r2, #36	; 0x24
 80080b6:	d83c      	bhi.n	8008132 <_realloc_r+0x1be>
 80080b8:	2a13      	cmp	r2, #19
 80080ba:	d937      	bls.n	800812c <_realloc_r+0x1b8>
 80080bc:	6821      	ldr	r1, [r4, #0]
 80080be:	2a1b      	cmp	r2, #27
 80080c0:	60a9      	str	r1, [r5, #8]
 80080c2:	6861      	ldr	r1, [r4, #4]
 80080c4:	60e9      	str	r1, [r5, #12]
 80080c6:	d81c      	bhi.n	8008102 <_realloc_r+0x18e>
 80080c8:	f105 0210 	add.w	r2, r5, #16
 80080cc:	f104 0108 	add.w	r1, r4, #8
 80080d0:	6808      	ldr	r0, [r1, #0]
 80080d2:	6010      	str	r0, [r2, #0]
 80080d4:	6848      	ldr	r0, [r1, #4]
 80080d6:	6050      	str	r0, [r2, #4]
 80080d8:	6889      	ldr	r1, [r1, #8]
 80080da:	6091      	str	r1, [r2, #8]
 80080dc:	eba3 0308 	sub.w	r3, r3, r8
 80080e0:	eb05 0208 	add.w	r2, r5, r8
 80080e4:	f043 0301 	orr.w	r3, r3, #1
 80080e8:	f8cb 2008 	str.w	r2, [fp, #8]
 80080ec:	6053      	str	r3, [r2, #4]
 80080ee:	686b      	ldr	r3, [r5, #4]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	ea43 0308 	orr.w	r3, r3, r8
 80080f8:	606b      	str	r3, [r5, #4]
 80080fa:	4650      	mov	r0, sl
 80080fc:	f7ff fa6a 	bl	80075d4 <__malloc_unlock>
 8008100:	e759      	b.n	8007fb6 <_realloc_r+0x42>
 8008102:	68a1      	ldr	r1, [r4, #8]
 8008104:	2a24      	cmp	r2, #36	; 0x24
 8008106:	6129      	str	r1, [r5, #16]
 8008108:	68e1      	ldr	r1, [r4, #12]
 800810a:	bf18      	it	ne
 800810c:	f105 0218 	addne.w	r2, r5, #24
 8008110:	6169      	str	r1, [r5, #20]
 8008112:	bf09      	itett	eq
 8008114:	6922      	ldreq	r2, [r4, #16]
 8008116:	f104 0110 	addne.w	r1, r4, #16
 800811a:	61aa      	streq	r2, [r5, #24]
 800811c:	6960      	ldreq	r0, [r4, #20]
 800811e:	bf02      	ittt	eq
 8008120:	f105 0220 	addeq.w	r2, r5, #32
 8008124:	f104 0118 	addeq.w	r1, r4, #24
 8008128:	61e8      	streq	r0, [r5, #28]
 800812a:	e7d1      	b.n	80080d0 <_realloc_r+0x15c>
 800812c:	463a      	mov	r2, r7
 800812e:	4621      	mov	r1, r4
 8008130:	e7ce      	b.n	80080d0 <_realloc_r+0x15c>
 8008132:	4621      	mov	r1, r4
 8008134:	4638      	mov	r0, r7
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	f7ff ff02 	bl	8007f40 <memmove>
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	e7cd      	b.n	80080dc <_realloc_r+0x168>
 8008140:	18c7      	adds	r7, r0, r3
 8008142:	45b8      	cmp	r8, r7
 8008144:	dc20      	bgt.n	8008188 <_realloc_r+0x214>
 8008146:	68cb      	ldr	r3, [r1, #12]
 8008148:	688a      	ldr	r2, [r1, #8]
 800814a:	60d3      	str	r3, [r2, #12]
 800814c:	609a      	str	r2, [r3, #8]
 800814e:	4628      	mov	r0, r5
 8008150:	68eb      	ldr	r3, [r5, #12]
 8008152:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008156:	60d3      	str	r3, [r2, #12]
 8008158:	609a      	str	r2, [r3, #8]
 800815a:	1f32      	subs	r2, r6, #4
 800815c:	2a24      	cmp	r2, #36	; 0x24
 800815e:	d843      	bhi.n	80081e8 <_realloc_r+0x274>
 8008160:	2a13      	cmp	r2, #19
 8008162:	d93f      	bls.n	80081e4 <_realloc_r+0x270>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	2a1b      	cmp	r2, #27
 8008168:	60ab      	str	r3, [r5, #8]
 800816a:	6863      	ldr	r3, [r4, #4]
 800816c:	60eb      	str	r3, [r5, #12]
 800816e:	d824      	bhi.n	80081ba <_realloc_r+0x246>
 8008170:	f105 0010 	add.w	r0, r5, #16
 8008174:	f104 0308 	add.w	r3, r4, #8
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	6002      	str	r2, [r0, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	6042      	str	r2, [r0, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	6083      	str	r3, [r0, #8]
 8008184:	46a9      	mov	r9, r5
 8008186:	e756      	b.n	8008036 <_realloc_r+0xc2>
 8008188:	4580      	cmp	r8, r0
 800818a:	4607      	mov	r7, r0
 800818c:	dddf      	ble.n	800814e <_realloc_r+0x1da>
 800818e:	4611      	mov	r1, r2
 8008190:	4650      	mov	r0, sl
 8008192:	f7fe ffff 	bl	8007194 <_malloc_r>
 8008196:	4607      	mov	r7, r0
 8008198:	2800      	cmp	r0, #0
 800819a:	d0ae      	beq.n	80080fa <_realloc_r+0x186>
 800819c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80081a0:	f1a0 0208 	sub.w	r2, r0, #8
 80081a4:	f023 0301 	bic.w	r3, r3, #1
 80081a8:	444b      	add	r3, r9
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d120      	bne.n	80081f0 <_realloc_r+0x27c>
 80081ae:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80081b2:	f027 0703 	bic.w	r7, r7, #3
 80081b6:	4437      	add	r7, r6
 80081b8:	e73d      	b.n	8008036 <_realloc_r+0xc2>
 80081ba:	68a3      	ldr	r3, [r4, #8]
 80081bc:	2a24      	cmp	r2, #36	; 0x24
 80081be:	612b      	str	r3, [r5, #16]
 80081c0:	68e3      	ldr	r3, [r4, #12]
 80081c2:	bf18      	it	ne
 80081c4:	f105 0018 	addne.w	r0, r5, #24
 80081c8:	616b      	str	r3, [r5, #20]
 80081ca:	bf09      	itett	eq
 80081cc:	6923      	ldreq	r3, [r4, #16]
 80081ce:	f104 0310 	addne.w	r3, r4, #16
 80081d2:	61ab      	streq	r3, [r5, #24]
 80081d4:	6962      	ldreq	r2, [r4, #20]
 80081d6:	bf02      	ittt	eq
 80081d8:	f105 0020 	addeq.w	r0, r5, #32
 80081dc:	f104 0318 	addeq.w	r3, r4, #24
 80081e0:	61ea      	streq	r2, [r5, #28]
 80081e2:	e7c9      	b.n	8008178 <_realloc_r+0x204>
 80081e4:	4623      	mov	r3, r4
 80081e6:	e7c7      	b.n	8008178 <_realloc_r+0x204>
 80081e8:	4621      	mov	r1, r4
 80081ea:	f7ff fea9 	bl	8007f40 <memmove>
 80081ee:	e7c9      	b.n	8008184 <_realloc_r+0x210>
 80081f0:	1f32      	subs	r2, r6, #4
 80081f2:	2a24      	cmp	r2, #36	; 0x24
 80081f4:	d82e      	bhi.n	8008254 <_realloc_r+0x2e0>
 80081f6:	2a13      	cmp	r2, #19
 80081f8:	d929      	bls.n	800824e <_realloc_r+0x2da>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	2a1b      	cmp	r2, #27
 80081fe:	6003      	str	r3, [r0, #0]
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	6043      	str	r3, [r0, #4]
 8008204:	d80e      	bhi.n	8008224 <_realloc_r+0x2b0>
 8008206:	f100 0308 	add.w	r3, r0, #8
 800820a:	f104 0208 	add.w	r2, r4, #8
 800820e:	6811      	ldr	r1, [r2, #0]
 8008210:	6019      	str	r1, [r3, #0]
 8008212:	6851      	ldr	r1, [r2, #4]
 8008214:	6059      	str	r1, [r3, #4]
 8008216:	6892      	ldr	r2, [r2, #8]
 8008218:	609a      	str	r2, [r3, #8]
 800821a:	4621      	mov	r1, r4
 800821c:	4650      	mov	r0, sl
 800821e:	f7ff fdbf 	bl	8007da0 <_free_r>
 8008222:	e76a      	b.n	80080fa <_realloc_r+0x186>
 8008224:	68a3      	ldr	r3, [r4, #8]
 8008226:	2a24      	cmp	r2, #36	; 0x24
 8008228:	6083      	str	r3, [r0, #8]
 800822a:	68e3      	ldr	r3, [r4, #12]
 800822c:	bf18      	it	ne
 800822e:	f104 0210 	addne.w	r2, r4, #16
 8008232:	60c3      	str	r3, [r0, #12]
 8008234:	bf09      	itett	eq
 8008236:	6923      	ldreq	r3, [r4, #16]
 8008238:	f100 0310 	addne.w	r3, r0, #16
 800823c:	6103      	streq	r3, [r0, #16]
 800823e:	6961      	ldreq	r1, [r4, #20]
 8008240:	bf02      	ittt	eq
 8008242:	f100 0318 	addeq.w	r3, r0, #24
 8008246:	f104 0218 	addeq.w	r2, r4, #24
 800824a:	6141      	streq	r1, [r0, #20]
 800824c:	e7df      	b.n	800820e <_realloc_r+0x29a>
 800824e:	4603      	mov	r3, r0
 8008250:	4622      	mov	r2, r4
 8008252:	e7dc      	b.n	800820e <_realloc_r+0x29a>
 8008254:	4621      	mov	r1, r4
 8008256:	f7ff fe73 	bl	8007f40 <memmove>
 800825a:	e7de      	b.n	800821a <_realloc_r+0x2a6>
 800825c:	4637      	mov	r7, r6
 800825e:	e6ea      	b.n	8008036 <_realloc_r+0xc2>
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	431f      	orrs	r7, r3
 8008266:	f8c9 7004 	str.w	r7, [r9, #4]
 800826a:	6853      	ldr	r3, [r2, #4]
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	6053      	str	r3, [r2, #4]
 8008272:	e6fc      	b.n	800806e <_realloc_r+0xfa>
 8008274:	20000104 	.word	0x20000104

08008278 <__ascii_wctomb>:
 8008278:	b149      	cbz	r1, 800828e <__ascii_wctomb+0x16>
 800827a:	2aff      	cmp	r2, #255	; 0xff
 800827c:	bf8b      	itete	hi
 800827e:	238a      	movhi	r3, #138	; 0x8a
 8008280:	700a      	strbls	r2, [r1, #0]
 8008282:	6003      	strhi	r3, [r0, #0]
 8008284:	2001      	movls	r0, #1
 8008286:	bf88      	it	hi
 8008288:	f04f 30ff 	movhi.w	r0, #4294967295
 800828c:	4770      	bx	lr
 800828e:	4608      	mov	r0, r1
 8008290:	4770      	bx	lr

08008292 <abort>:
 8008292:	b508      	push	{r3, lr}
 8008294:	2006      	movs	r0, #6
 8008296:	f000 f82b 	bl	80082f0 <raise>
 800829a:	2001      	movs	r0, #1
 800829c:	f7fa fc19 	bl	8002ad2 <_exit>

080082a0 <_raise_r>:
 80082a0:	291f      	cmp	r1, #31
 80082a2:	b538      	push	{r3, r4, r5, lr}
 80082a4:	4604      	mov	r4, r0
 80082a6:	460d      	mov	r5, r1
 80082a8:	d904      	bls.n	80082b4 <_raise_r+0x14>
 80082aa:	2316      	movs	r3, #22
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082b6:	b112      	cbz	r2, 80082be <_raise_r+0x1e>
 80082b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082bc:	b94b      	cbnz	r3, 80082d2 <_raise_r+0x32>
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 f830 	bl	8008324 <_getpid_r>
 80082c4:	462a      	mov	r2, r5
 80082c6:	4601      	mov	r1, r0
 80082c8:	4620      	mov	r0, r4
 80082ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ce:	f000 b817 	b.w	8008300 <_kill_r>
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d00a      	beq.n	80082ec <_raise_r+0x4c>
 80082d6:	1c59      	adds	r1, r3, #1
 80082d8:	d103      	bne.n	80082e2 <_raise_r+0x42>
 80082da:	2316      	movs	r3, #22
 80082dc:	6003      	str	r3, [r0, #0]
 80082de:	2001      	movs	r0, #1
 80082e0:	bd38      	pop	{r3, r4, r5, pc}
 80082e2:	2400      	movs	r4, #0
 80082e4:	4628      	mov	r0, r5
 80082e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082ea:	4798      	blx	r3
 80082ec:	2000      	movs	r0, #0
 80082ee:	bd38      	pop	{r3, r4, r5, pc}

080082f0 <raise>:
 80082f0:	4b02      	ldr	r3, [pc, #8]	; (80082fc <raise+0xc>)
 80082f2:	4601      	mov	r1, r0
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	f7ff bfd3 	b.w	80082a0 <_raise_r>
 80082fa:	bf00      	nop
 80082fc:	20000010 	.word	0x20000010

08008300 <_kill_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	2300      	movs	r3, #0
 8008304:	4c06      	ldr	r4, [pc, #24]	; (8008320 <_kill_r+0x20>)
 8008306:	4605      	mov	r5, r0
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	f7fa fbd0 	bl	8002ab2 <_kill>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	d102      	bne.n	800831c <_kill_r+0x1c>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	b103      	cbz	r3, 800831c <_kill_r+0x1c>
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	bf00      	nop
 8008320:	200007bc 	.word	0x200007bc

08008324 <_getpid_r>:
 8008324:	f7fa bbbe 	b.w	8002aa4 <_getpid>

08008328 <_init>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr

08008334 <_fini>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr
